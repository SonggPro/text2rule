{"task_index": 2, "task_description": "calculator name is:Creatinine Clearance (Cockcroft-Gault Equation),\nquestion is:What is the patient's Creatinine Clearance using the Cockroft-Gault Equation in terms of mL/min? You should use the patient's adjusted body weight in kg instead of the patient's actual body weight if the patient is overweight or obese based on their BMI. If the patient's BMI's normal, set their adjusted body weight to the minimum of the ideal body and actual weight. If the patient is underweight, please set their adjusted body weight to their actual body weight..\n", "python_code": "def calculate_creatinine_clearance(weight, height, age, serum_creatinine, gender):\n    # Convert height from meters to inches\n    height_inches = height * 39.3701\n    \n    # Calculate BMI\n    bmi = weight / (height ** 2)\n    \n    # Determine Ideal Body Weight (IBW)\n    if gender == 'female':\n        ibw = 45.5 + 2.3 * (height_inches - 60)\n    else:\n        ibw = 50 + 2.3 * (height_inches - 60)\n    \n    # Determine Adjusted Body Weight (ABW)\n    if bmi < 18.5:\n        abw = weight\n    elif 18.5 <= bmi < 25:\n        abw = min(weight, ibw)\n    else:\n        abw = ibw + 0.4 * (weight - ibw)\n    \n    # Calculate Creatinine Clearance (CrCl)\n    if gender == 'female':\n        crcl = ((140 - age) * abw * 0.85) / (72 * serum_creatinine)\n    else:\n        crcl = ((140 - age) * abw) / (72 * serum_creatinine)\n    \n    return crcl", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"serum_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender (use 'male' or 'female')\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"weight": "kg", "height": "m", "age": "years", "serum_creatinine": "mg/dL"}}
{"task_index": 6, "task_description": "calculator name is:Body Mass Index (BMI),\nquestion is:What is the patient's body mass mass index (BMI)? Your answer should be in terms of kg/m²..\n", "python_code": "def calculate_bmi(weight, height):\n    bmi = weight / (height ** 2)\n    return bmi", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"weight": "kg", "height": "m"}}
{"task_index": 8, "task_description": "calculator name is:Wells' Criteria for Pulmonary Embolism,\nquestion is:What is the patient’s score of Wells' criteria for Pulmonary Embolism?.\n", "python_code": "def calculate_wells_score(signs_of_dvt, alternative_diagnosis, heart_rate, immobilization, surgery, previous_pe, hemoptysis, malignancy):\n    score = 0\n    \n    # Signs of DVT\n    if signs_of_dvt:\n        score += 3\n    \n    # Alternative diagnosis less likely than PE\n    if alternative_diagnosis:\n        score += 3\n    \n    # Heart rate > 100 bpm\n    if heart_rate > 100:\n        score += 1.5\n    \n    # Immobilization for > 3 days or surgery within 4 weeks\n    if immobilization or surgery:\n        score += 1.5\n    \n    # Previous DVT or PE\n    if previous_pe:\n        score += 1.5\n    \n    # Hemoptysis\n    if hemoptysis:\n        score += 1\n    \n    # Malignancy (treatment ongoing, within 6 months, or palliative)\n    if malignancy:\n        score += 1\n    \n    return score", "properties": {"row": "properties = {\n    \"signs_of_dvt\": {\n        \"description\": \"Does the patient have signs of deep vein thrombosis (DVT)? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"alternative_diagnosis\": {\n        \"description\": \"Is an alternative diagnosis less likely than pulmonary embolism (PE)? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"immobilization\": {\n        \"description\": \"Has the patient been immobilized for more than 3 days or had surgery within 4 weeks? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"surgery\": {\n        \"description\": \"Has the patient had surgery within 4 weeks? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"previous_pe\": {\n        \"description\": \"Does the patient have a history of deep vein thrombosis (DVT) or pulmonary embolism (PE)? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"hemoptysis\": {\n        \"description\": \"Does the patient have hemoptysis (coughing up blood)? (True or False)\",\n        \"type\": \"boolean\"\n    },\n    \"malignancy\": {\n        \"description\": \"Does the patient have active malignancy (treatment ongoing, within 6 months, or palliative)? (True or False)\",\n        \"type\": \"boolean\"\n    }\n}"}, "need_unit": {"heart_rate": "bpm"}}
{"task_index": 10, "task_description": "calculator name is:Ideal Body Weight,\nquestion is:Using the Ideal Body Weight Formula, what is the patient's ideal body weight in terms of kg?.\n", "python_code": "def calculate_ideal_body_weight(height, gender):\n    if gender == 'male':\n        ibw = 50 + 2.3 * (height - 60)\n    else:\n        ibw = 45.5 + 2.3 * (height - 60)\n    \n    return ibw", "properties": {"row": "properties = {\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender (use 'male' or 'female')\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"height": "inches"}}
{"task_index": 19, "task_description": "calculator name is:Fibrosis-4 (FIB-4) Index for Liver Fibrosis,\nquestion is:What is the patient's Fibrosis-4 (FIB-4) index?.\n", "python_code": "def calculate_fib4_index(age, ast, alt, platelets):\n    fib4_index = (age * ast) / (platelets * (alt ** 0.5))\n    return fib4_index", "properties": {"row": "properties = {\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"ast\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Aspartate Aminotransferase (AST) level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Aspartate Aminotransferase (AST) level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alt\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Alanine Aminotransferase (ALT) level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Alanine Aminotransferase (ALT) level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"platelets\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's platelet count\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's platelet count\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"age": "years", "ast": "U/L", "alt": "U/L", "platelets": "10^9/L"}}
{"task_index": 30, "task_description": "calculator name is:Serum Osmolality,\nquestion is:What is the patient's serum osmolality in terms of mOsm/kg?.\n", "python_code": "def calculate_serum_osmolality(sodium, glucose, urea_nitrogen, alcohol=None):\n    # Calculate serum osmolality\n    osmolality = 2 * sodium + (glucose / 18) + (urea_nitrogen / 2.8)\n    \n    # Adjust for alcohol if present\n    if alcohol is not None:\n        osmolality += alcohol / 4.6\n    \n    return osmolality", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum sodium level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum sodium level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"glucose\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum glucose level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum glucose level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"urea_nitrogen\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's blood urea nitrogen (BUN) level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's blood urea nitrogen (BUN) level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alcohol\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum alcohol level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum alcohol level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "glucose": "mg/dL", "urea_nitrogen": "mg/dL", "alcohol": "mg/dL (optional)"}}
{"task_index": 38, "task_description": "calculator name is:Free Water Deficit,\nquestion is:What is the patient's free water deficit in terms of liters? You may take the ideal sodium concentration to be 140 mEq/L..\n", "python_code": "def calculate_free_water_deficit(weight, measured_sodium, ideal_sodium=140):\n    free_water_deficit = weight * 0.6 * ((measured_sodium / ideal_sodium) - 1)\n    return free_water_deficit", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"measured_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's measured serum sodium level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's measured serum sodium level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"ideal_sodium\": {\n        \"description\": \"Ideal serum sodium concentration (default is 140 mEq/L)\",\n        \"type\": \"number\",\n        \"default\": 140\n    }\n}"}, "need_unit": {"weight": "kg", "measured_sodium": "mEq/L"}}
{"task_index": 40, "task_description": "calculator name is:Fractional Excretion of Sodium (FENa),\nquestion is:What is the patient's Fractional Excretion of Sodium (FENa)? Please return your answer as a percentage value..\n", "python_code": "def calculate_fena(urine_sodium, serum_sodium, urine_creatinine, serum_creatinine):\n    fena = (urine_sodium / serum_sodium) / (urine_creatinine / serum_creatinine) * 100\n    return fena", "properties": {"row": "properties = {\n    \"urine_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's urine sodium level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's urine sodium level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"serum_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum sodium level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum sodium level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"urine_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's urine creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's urine creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"serum_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's serum creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's serum creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"urine_sodium": "mEq/L", "serum_sodium": "mEq/L", "urine_creatinine": "mg/dL", "serum_creatinine": "mg/dL"}}
{"task_index": 62, "task_description": "calculator name is:Adjusted Body Weight,\nquestion is:Using the adjusted body weight formula, what is the patient's adjusted body weight in terms of kg?.\n", "python_code": "def calculate_adjusted_body_weight(weight, height, gender):\n    # Convert height from cm to inches\n    height_inches = height / 2.54\n    \n    # Calculate Ideal Body Weight (IBW)\n    if gender == 'male':\n        ibw = 50 + 2.3 * (height_inches - 60)\n    else:\n        ibw = 45.5 + 2.3 * (height_inches - 60)\n    \n    # Calculate Adjusted Body Weight (ABW)\n    abw = ibw + 0.4 * (weight - ibw)\n    \n    return abw", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender (use 'male' or 'female')\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"weight": "kg", "height": "cm"}}
{"task_index": 5, "task_description": "calculator name is:Mean Arterial Pressure (MAP),\nquestion is:What is patient's mean arterial pressure in mm Hg?.\n", "python_code": "def calculate_map(sbp, dbp):\n    \"\"\"\n    Calculate the Mean Arterial Pressure (MAP) in mm Hg.\n\n    Parameters:\n    - sbp (number): Systolic Blood Pressure in mm Hg\n    - dbp (number): Diastolic Blood Pressure in mm Hg\n\n    Returns:\n    - map (number): Mean Arterial Pressure in mm Hg\n    \"\"\"\n    if sbp < 0 or dbp < 0:\n        raise ValueError(\"Blood pressure values must be non-negative.\")\n    \n    map_value = dbp + (1/3) * (sbp - dbp)\n    return map_value", "properties": {"row": "properties = {\n    \"sbp\": {\n        \"type\": \"array\",\n        \"description\": \"Systolic Blood Pressure\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Systolic Blood Pressure\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"dbp\": {\n        \"type\": \"array\",\n        \"description\": \"Diastolic Blood Pressure\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Diastolic Blood Pressure\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sbp": "mm Hg", "dbp": "mm Hg"}}
{"task_index": 7, "task_description": "calculator name is:Calcium Correction for Hypoalbuminemia,\nquestion is:Using the Calcium Correction for Hypoalbuminemia formula, what is the patient's corrected calcium in mg/dL? Your may set your normal albumin concentration to be 4 g/dL..\n", "python_code": "def calculate_corrected_calcium(ca, alb, alb_norm=4.0):\n    \"\"\"\n    Calculate the corrected calcium level for hypoalbuminemia.\n\n    Parameters:\n    - ca (float): Measured Serum Calcium Level in mg/dL\n    - alb (float): Measured Serum Albumin Level in g/dL\n    - alb_norm (float): Normal Albumin Concentration in g/dL (default is 4.0)\n\n    Returns:\n    - corrected_ca (float): Corrected Serum Calcium Level in mg/dL\n    \"\"\"\n    if ca < 0 or alb < 0 or alb_norm < 0:\n        raise ValueError(\"All input values must be non-negative.\")\n    \n    corrected_ca = ca + 0.8 * (alb_norm - alb)\n    return corrected_ca", "properties": {"row": "properties = {\n    \"ca\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Serum Calcium Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Serum Calcium Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alb\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Serum Albumin Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Serum Albumin Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alb_norm\": {\n        \"type\": \"array\",\n        \"description\": \"Normal Albumin Concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Normal Albumin Concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"ca": "mg/dL", "alb": "g/dL", "alb_norm": "g/dL"}}
{"task_index": 11, "task_description": "calculator name is:QTc Bazett Calculator,\nquestion is:Using the Bazett Formula for corrected QT interval, what is the patient's corrected QT interval in msec?.\n", "python_code": "def calculate_qtc_bazett(qt, hr):\n    \"\"\"\n    Calculate the corrected QT interval (QTc) using the Bazett formula.\n\n    Parameters:\n    - qt (float): Measured QT Interval in msec\n    - hr (float): Heart Rate in bpm\n\n    Returns:\n    - qtc (float): Corrected QT Interval in msec\n    \"\"\"\n    if qt <= 0 or hr <= 0:\n        raise ValueError(\"QT interval and heart rate must be positive values.\")\n    \n    # Convert heart rate to RR interval in seconds\n    rr = 60 / hr\n    \n    # Bazett formula for corrected QT interval\n    qtc = qt / (rr ** 0.5)\n    return qtc", "properties": {"row": "properties = {\n    \"qt\": {\n        \"type\": \"array\",\n        \"description\": \"Measured QT Interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured QT Interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hr\": {\n        \"type\": \"array\",\n        \"description\": \"Heart Rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Heart Rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt": "msec", "hr": "bpm"}}
{"task_index": 22, "task_description": "calculator name is:Maintenance Fluids Calculations,\nquestion is:Based on the patient's weight, what is the patient's maintenance fluid in mL/hr?.\n", "python_code": "def calculate_maintenance_fluids(weight):\n    \"\"\"\n    Calculate the patient's maintenance fluid requirement in mL/hr based on their weight.\n\n    Parameters:\n    - weight (float): Patient's Weight in kg\n\n    Returns:\n    - hourly_fluid (float): Maintenance Fluid Requirement in mL/hr\n    \"\"\"\n    if weight <= 0:\n        raise ValueError(\"Weight must be a positive value.\")\n    \n    # Calculate daily maintenance fluid\n    if weight <= 10:\n        daily_fluid = 100 * weight\n    elif weight <= 20:\n        daily_fluid = 1000 + 50 * (weight - 10)\n    else:\n        daily_fluid = 1500 + 20 * (weight - 20)\n    \n    # Convert daily fluid to hourly fluid\n    hourly_fluid = daily_fluid / 24\n    return hourly_fluid", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"weight": "kg"}}
{"task_index": 26, "task_description": "calculator name is:Sodium Correction for Hyperglycemia,\nquestion is:What is the patient's corrected sodium concentration in terms of mEq/L?.\n", "python_code": "def calculate_corrected_sodium(na, glucose, glucose_norm=100.0):\n    \"\"\"\n    Calculate the corrected sodium level for hyperglycemia.\n\n    Parameters:\n    - na (float): Measured Sodium Level in mEq/L\n    - glucose (float): Measured Glucose Level in mg/dL\n    - glucose_norm (float): Normal Glucose Level in mg/dL (default is 100.0)\n\n    Returns:\n    - corrected_na (float): Corrected Sodium Level in mEq/L\n    \"\"\"\n    if na < 0 or glucose < 0 or glucose_norm < 0:\n        raise ValueError(\"All input values must be non-negative.\")\n    \n    # Sodium correction formula\n    corrected_na = na + 0.016 * (glucose - glucose_norm)\n    return corrected_na", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Sodium Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Sodium Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"glucose\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Glucose Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Glucose Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"glucose_norm\": {\n        \"type\": \"array\",\n        \"description\": \"Normal Glucose Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Normal Glucose Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "glucose": "mg/dL", "glucose_norm": "mg/dL"}}
{"task_index": 31, "task_description": "calculator name is:HOMA-IR (Homeostatic Model Assessment for Insulin Resistance),\nquestion is:What is the patient's HOMA-IR score?.\n", "python_code": "def calculate_homa_ir(fpg, fi):\n    \"\"\"\n    Calculate the HOMA-IR (Homeostatic Model Assessment for Insulin Resistance) score.\n\n    Parameters:\n    - fpg (float): Fasting Plasma Glucose Level in mg/dL\n    - fi (float): Fasting Insulin Level in μU/mL\n\n    Returns:\n    - homa_ir (float): HOMA-IR Score\n    \"\"\"\n    if fpg <= 0 or fi <= 0:\n        raise ValueError(\"Fasting Plasma Glucose and Fasting Insulin must be positive values.\")\n    \n    # HOMA-IR formula\n    homa_ir = (fpg * fi) / 405\n    return homa_ir", "properties": {"row": "properties = {\n    \"fpg\": {\n        \"type\": \"array\",\n        \"description\": \"Fasting Plasma Glucose Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Fasting Plasma Glucose Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"fi\": {\n        \"type\": \"array\",\n        \"description\": \"Fasting Insulin Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Fasting Insulin Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"fpg": "mg/dL", "fi": "μU/mL"}}
{"task_index": 39, "task_description": "calculator name is:Anion Gap,\nquestion is:What is the patient's anion gap in terms of mEq/L?.\n", "python_code": "def calculate_anion_gap(na, cl, hco3):\n    \"\"\"\n    Calculate the patient's anion gap.\n\n    Parameters:\n    - na (float): Serum Sodium Level in mEq/L\n    - cl (float): Serum Chloride Level in mEq/L\n    - hco3 (float): Serum Bicarbonate Level in mEq/L\n\n    Returns:\n    - anion_gap (float): Anion Gap in mEq/L\n    \"\"\"\n    if na < 0 or cl < 0 or hco3 < 0:\n        raise ValueError(\"All input values must be non-negative.\")\n    \n    # Anion gap formula\n    anion_gap = na - (cl + hco3)\n    return anion_gap", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Serum Sodium Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum Sodium Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Serum Chloride Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum Chloride Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Serum Bicarbonate Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum Bicarbonate Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L"}}
{"task_index": 44, "task_description": "calculator name is:LDL Calculated,\nquestion is:What is the patient's LDL cholestrol concentration? Please outuput your answer in terms of mg/dL..\n", "python_code": "def calculate_ldl(tc, hdl, tg):\n    \"\"\"\n    Calculate the patient's LDL cholesterol concentration using the Friedewald formula.\n\n    Parameters:\n    - tc (float): Total Cholesterol Level in mg/dL\n    - hdl (float): HDL Cholesterol Level in mg/dL\n    - tg (float): Triglyceride Level in mg/dL\n\n    Returns:\n    - ldl (float): LDL Cholesterol Concentration in mg/dL\n    \"\"\"\n    if tc < 0 or hdl < 0 or tg < 0:\n        raise ValueError(\"All input values must be non-negative.\")\n    \n    if tg >= 400:\n        raise ValueError(\"Triglyceride level is too high for the Friedewald formula. Direct measurement of LDL is recommended.\")\n    \n    # Friedewald formula\n    ldl = tc - hdl - (tg / 5)\n    return ldl", "properties": {"row": "properties = {\n    \"tc\": {\n        \"type\": \"array\",\n        \"description\": \"Total Cholesterol Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Total Cholesterol Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hdl\": {\n        \"type\": \"array\",\n        \"description\": \"HDL Cholesterol Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"HDL Cholesterol Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"tg\": {\n        \"type\": \"array\",\n        \"description\": \"Triglyceride Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Triglyceride Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"tc": "mg/dL", "hdl": "mg/dL", "tg": "mg/dL"}}
{"task_index": 56, "task_description": "calculator name is:QTc Fridericia Calculator,\nquestion is:Using the Fridericia Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.\n", "python_code": "def calculate_qtc_fridericia(qt, hr):\n    \"\"\"\n    Calculate the corrected QT interval (QTc) using the Fridericia formula.\n\n    Parameters:\n    - qt (float): Measured QT Interval in msec\n    - hr (float): Heart Rate in bpm\n\n    Returns:\n    - qtc (float): Corrected QT Interval in msec\n    \"\"\"\n    if qt <= 0 or hr <= 0:\n        raise ValueError(\"QT interval and heart rate must be positive values.\")\n    \n    # Convert heart rate to RR interval in seconds\n    rr = 60 / hr\n    \n    # Fridericia formula for corrected QT interval\n    qtc = qt / (rr ** (1/3))\n    return qtc", "properties": {"row": "properties = {\n    \"qt\": {\n        \"type\": \"array\",\n        \"description\": \"Measured QT Interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured QT Interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hr\": {\n        \"type\": \"array\",\n        \"description\": \"Heart Rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Heart Rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt": "msec", "hr": "bpm"}}
{"task_index": 58, "task_description": "calculator name is:QTc Hodges Calculator,\nquestion is:Using the Hodges Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.\n", "python_code": "def calculate_qtc_hodges(qt, hr):\n    \"\"\"\n    Calculate the corrected QT interval (QTc) using the Hodges formula.\n\n    Parameters:\n    - qt (float): Measured QT Interval in msec\n    - hr (float): Heart Rate in bpm\n\n    Returns:\n    - qtc (float): Corrected QT Interval in msec\n    \"\"\"\n    if qt <= 0 or hr <= 0:\n        raise ValueError(\"QT interval and heart rate must be positive values.\")\n    \n    # Convert heart rate to RR interval in milliseconds\n    rr = 60000 / hr\n    \n    # Hodges formula for corrected QT interval\n    qtc = qt + 0.154 * (1000 - rr)\n    return qtc", "properties": {"row": "properties = {\n    \"qt\": {\n        \"type\": \"array\",\n        \"description\": \"Measured QT Interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured QT Interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hr\": {\n        \"type\": \"array\",\n        \"description\": \"Heart Rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Heart Rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt": "msec", "hr": "bpm"}}
{"task_index": 60, "task_description": "calculator name is:Body Surface Area Calculator,\nquestion is:What is the patient's body surface area? Please output your answer in terms of m²..\n", "python_code": "def calculate_bsa(w, h):\n    \"\"\"\n    Calculate the patient's body surface area (BSA) using the Du Bois formula.\n\n    Parameters:\n    - w (float): Patient's Weight in kg\n    - h (float): Patient's Height in cm\n\n    Returns:\n    - bsa (float): Body Surface Area in m²\n    \"\"\"\n    if w <= 0 or h <= 0:\n        raise ValueError(\"Weight and height must be positive values.\")\n    \n    # Du Bois formula for body surface area\n    bsa = 0.007184 * (w ** 0.425) * (h ** 0.725)\n    return bsa", "properties": {"row": "properties = {\n    \"w\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"h\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"w": "kg", "h": "cm"}}
{"task_index": 3, "task_description": "calculator name is:CKD-EPI Equations for Glomerular Filtration Rate,\nquestion is:Using the 2021 CKD-EPI Creatinine equation, what is the patient's Glomerular Filtration Rate (GFR) in terms of mL/min/1.73 m²?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The formula for computing GFR is 142 x (Scr/A)**B x 0.9938**age x (gender_coeffcient), where the ** indicates an exponent operation, Scr is the concentration of serum creatinine in mg/dL and gender_coefficient is 1.012 if the patient is female, else the coeffient is 1. The coefficients A and B are dependent on the patient's gender and the patient's creatinine concentration.\\nThe patient is 81 years old. The patient's gender is Male, and so the patient's gender coefficient is 1.0.\\nThe concentration of Serum Creatinine is 1.7 mg/dL. Because the patient's gender is male and the creatinine concentration is greater than or equal to 0.9 mg/dL, A = 0.9 and B = -1.2.\\nPlugging in these values, we get 142 * (1.7/0.9)**-1.2 * 0.9938**81 * 1.0 = 40.0.\\nHence, the GFR value is 40.0 ml/min/1.73 m².\", 'answer': 40.0}", "python_code": "def calculate_gfr(serum_creatinine, age, gender):\n    # Determine A and B based on gender and serum creatinine concentration\n    if gender.lower() == 'male':\n        if serum_creatinine >= 0.9:\n            A = 0.9\n            B = -1.209\n        else:\n            A = 0.7\n            B = -0.329\n        gender_coefficient = 1.0\n    elif gender.lower() == 'female':\n        if serum_creatinine >= 0.7:\n            A = 0.7\n            B = -1.209\n        else:\n            A = 0.7\n            B = -0.329\n        gender_coefficient = 1.012\n    else:\n        raise ValueError(\"Gender must be 'male' or 'female'\")\n\n    # Calculate GFR using the CKD-EPI formula\n    gfr = 142 * (serum_creatinine / A) ** B * (0.9938 ** age) * gender_coefficient\n    return gfr\n\n# Example usage\nserum_creatinine = 1.7  # mg/dL\nage = 81  # years\ngender = 'male'\ngfr = calculate_gfr(serum_creatinine, age, gender)\nprint(f\"GFR: {gfr:.1f} mL/min/1.73 m²\")", "properties": {"row": "properties = {\n    \"serum_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Serum Creatinine Concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum Creatinine Concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender (returns 'male' or 'female')\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"serum_creatinine": "mg/dL", "age": "years"}}
{"task_index": 57, "task_description": "calculator name is:QTc Framingham Calculator,\nquestion is:Using the Framingham Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The corrected QT interval using the Framingham formula is computed as  QTc = QT Interval + (154 * (1 - rr_interval_sec)), where QT interval is in msec, and RR interval is given as 60/(heart rate).\\nThe patient's heart rate is 87 beats per minute.\\nThe QT interval is 330 msec.\\nThe RR interval is computed as 60/(heart rate), and so the RR interval is 60/87 = 0.69.\\nHence, plugging in these values, we will get 330/(154 * ( 1- 0.69 )) = 377.74.\\nThe patient's corrected QT interval (QTc) is 377.74 msec.\", 'answer': 377.74}", "python_code": "def calculate_qtc(qt_interval, heart_rate):\n    # Calculate the RR interval in seconds\n    rr_interval = 60 / heart_rate\n    \n    # Calculate the corrected QT interval using the Framingham formula\n    qtc = qt_interval + 154 * (1 - rr_interval)\n    \n    return qtc\n\n# Example usage\nqt_interval = 330  # msec\nheart_rate = 87  # bpm\nqtc = calculate_qtc(qt_interval, heart_rate)\nprint(f\"Corrected QT Interval (QTc): {qtc:.2f} msec\")", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"Measured QT Interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured QT Interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's Heart Rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's Heart Rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "heart_rate": "beats per minute (bpm)"}}
{"task_index": 65, "task_description": "calculator name is:Albumin Corrected Anion Gap,\nquestion is:What is the patient's albumin corrected anion gap in mEq/L?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The formula for computing a patient's albumin corrected anion gap is: anion_gap (in mEq/L) + 2.5 * (4 - albumin (in g/dL)).\\nThe formula for computing a patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\\nThe concentration of sodium is 137.0 mEq/L. \\nThe concentration of chloride is 116.0 mEq/L. \\nThe concentration of bicarbonate is 12.1 mEq/L. \\nPlugging in these values into the anion gap formula gives us 137.0 mEq/L - (116.0 mEq/L + 12.1 mEq/L) = 8.9 mEq/L. Hence, The patient's anion gap is 8.9 mEq/L.\\nThe concentration of albumin is 3.7 g/dL. Plugging in these values into the albumin corrected anion gap formula, we get 8.9 (mEq/L) + 2.5 * (4 - 3.7 (in g/dL)) = 9.65 mEq/L. Hence, the patient's albumin corrected anion gap is 9.65 mEq/L.\", 'answer': 9.65}", "python_code": "def calculate_albumin_corrected_anion_gap(sodium, chloride, bicarbonate, albumin):\n    # Calculate the Anion Gap\n    anion_gap = sodium - (chloride + bicarbonate)\n\n    # Calculate the Albumin Corrected Anion Gap\n    albumin_corrected_anion_gap = anion_gap + 2.5 * (4 - albumin)\n\n    return albumin_corrected_anion_gap\n\n# Example usage\nsodium = 137.0  # mEq/L\nchloride = 116.0  # mEq/L\nbicarbonate = 12.1  # mEq/L\nalbumin = 3.7  # g/dL\nalbumin_corrected_anion_gap = calculate_albumin_corrected_anion_gap(sodium, chloride, bicarbonate, albumin)\nprint(f\"Albumin Corrected Anion Gap: {albumin_corrected_anion_gap:.2f} mEq/L\")", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"chloride\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bicarbonate\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Albumin concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Albumin concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "chloride": "mEq/L", "bicarbonate": "mEq/L", "albumin": "g/dL"}}
{"task_index": 63, "task_description": "calculator name is:Delta Gap,\nquestion is:What is the patient's delta gap in mEq/L?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"To compute the formula of the delta gap, the formula is anion gap (in mEq/L) - 12. The first step is to compute the patient's anion gap.\\nThe formula for computing a patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\\nThe concentration of sodium is 143.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of sodium from mmol to mEq. The mass of sodium is 143.0 mmol. The compound, sodium, has a valence of 1, and so multiply the valence by the value of mmol to get, 143.0 mmol * 1 mEq/mmol = 143.0 mEq sodium. The volume units is L so no volume conversion is needed. Hence, the concentration value of 143.0 mmol sodium/L converts to 143.0 mEq sodium/L. \\nThe concentration of chloride is 106.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of chloride from mmol to mEq. The mass of chloride is 106.0 mmol. The compound, chloride, has a valence of 1, and so multiply the valence by the value of mmol to get, 106.0 mmol * 1 mEq/mmol = 106.0 mEq chloride. The volume units is L so no volume conversion is needed. Hence, the concentration value of 106.0 mmol chloride/L converts to 106.0 mEq chloride/L. \\nThe concentration of bicarbonate is 25.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of bicarbonate from mmol to mEq. The mass of bicarbonate is 25.0 mmol. The compound, bicarbonate, has a valence of 1, and so multiply the valence by the value of mmol to get, 25.0 mmol * 1 mEq/mmol = 25.0 mEq bicarbonate. The volume units is L so no volume conversion is needed. Hence, the concentration value of 25.0 mmol bicarbonate/L converts to 25.0 mEq bicarbonate/L. \\nPlugging in these values into the anion gap formula gives us 143.0 mEq/L - (106.0 mEq/L + 25.0 mEq/L) = 12.0 mEq/L. Hence, The patient's anion gap is 12.0 mEq/L.\\nPlugging in 12.0 mEq/L for the delta gap formula, we get 12.0 - 12 = 0 mEq/L. Hence, the patient's delta gap is 0 mEq/L.\", 'answer': 0}", "python_code": "def calculate_delta_gap(sodium, chloride, bicarbonate):\n    \"\"\"\n    Calculate the patient's delta gap in mEq/L.\n\n    Parameters:\n    - sodium (float): Concentration of sodium ions in mEq/L\n    - chloride (float): Concentration of chloride ions in mEq/L\n    - bicarbonate (float): Concentration of bicarbonate ions in mEq/L\n\n    Returns:\n    - float: The patient's delta gap in mEq/L\n    \"\"\"\n    # Calculate the anion gap\n    anion_gap = sodium - (chloride + bicarbonate)\n    \n    # Calculate the delta gap\n    delta_gap = anion_gap - 12\n    \n    return delta_gap", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of sodium ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of sodium ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"chloride\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of chloride ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of chloride ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bicarbonate\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of bicarbonate ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of bicarbonate ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "chloride": "mEq/L", "bicarbonate": "mEq/L"}}
{"task_index": 64, "task_description": "calculator name is:Delta Ratio,\nquestion is:What is the patient's delta ratio?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The formula for computing the delta ratio is delta gap (mEq/L)/(24 - bicarbonate mEq/L).\\nTo compute the formula of the delta gap, the formula is anion gap (in mEq/L) - 12. The first step is to compute the patient's anion gap.\\nThe formula for computing a patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\\nThe concentration of sodium is 143.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of sodium from mmol to mEq. The mass of sodium is 143.0 mmol. The compound, sodium, has a valence of 1, and so multiply the valence by the value of mmol to get, 143.0 mmol * 1 mEq/mmol = 143.0 mEq sodium. The volume units is L so no volume conversion is needed. Hence, the concentration value of 143.0 mmol sodium/L converts to 143.0 mEq sodium/L. \\nThe concentration of chloride is 106.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of chloride from mmol to mEq. The mass of chloride is 106.0 mmol. The compound, chloride, has a valence of 1, and so multiply the valence by the value of mmol to get, 106.0 mmol * 1 mEq/mmol = 106.0 mEq chloride. The volume units is L so no volume conversion is needed. Hence, the concentration value of 106.0 mmol chloride/L converts to 106.0 mEq chloride/L. \\nThe concentration of bicarbonate is 25.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of bicarbonate from mmol to mEq. The mass of bicarbonate is 25.0 mmol. The compound, bicarbonate, has a valence of 1, and so multiply the valence by the value of mmol to get, 25.0 mmol * 1 mEq/mmol = 25.0 mEq bicarbonate. The volume units is L so no volume conversion is needed. Hence, the concentration value of 25.0 mmol bicarbonate/L converts to 25.0 mEq bicarbonate/L. \\nPlugging in these values into the anion gap formula gives us 143.0 mEq/L - (106.0 mEq/L + 25.0 mEq/L) = 12.0 mEq/L. Hence, The patient's anion gap is 12.0 mEq/L.\\nPlugging in 12.0 mEq/L for the delta gap formula, we get 12.0 - 12 = 0 mEq/L. Hence, the patient's delta gap is 0 mEq/L.\\nPlugging in the delta gap and the bicarbonate concentration for the delta ratio formula, we get 0 mEq/L / -1.0 mEq/L = 0. The patient's delta ratio is 0.\", 'answer': 0}", "python_code": "def calculate_delta_ratio(sodium, chloride, bicarbonate):\n    \"\"\"\n    Calculate the patient's delta ratio.\n\n    Parameters:\n    - sodium (float): Concentration of sodium ions in mEq/L\n    - chloride (float): Concentration of chloride ions in mEq/L\n    - bicarbonate (float): Concentration of bicarbonate ions in mEq/L\n\n    Returns:\n    - float: The patient's delta ratio\n    \"\"\"\n    # Calculate the anion gap\n    anion_gap = sodium - (chloride + bicarbonate)\n    \n    # Calculate the delta gap\n    delta_gap = anion_gap - 12\n    \n    # Calculate the delta ratio\n    delta_ratio = delta_gap / (24 - bicarbonate)\n    \n    return delta_ratio", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of sodium ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of sodium ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"chloride\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of chloride ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of chloride ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bicarbonate\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of bicarbonate ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of bicarbonate ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "chloride": "mEq/L", "bicarbonate": "mEq/L"}}
{"task_index": 66, "task_description": "calculator name is:Albumin Corrected Delta Gap,\nquestion is:What is the patient's albumin corrected delta gap in mEq/L?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"To compute the formula of albumin corrected delta gap, the formula is albumin corrected anion gap (in mEq/L) - 12.\\nThe formula for computing a patient's albumin corrected anion gap is: anion_gap (in mEq/L) + 2.5 * (4 - albumin (in g/dL)).\\nThe formula for computing a patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\\nThe concentration of sodium is 148.0 mEq/L. \\nThe concentration of chloride is 101.0 mEq/L. \\nThe concentration of bicarbonate is 12.2 mEq/L. \\nPlugging in these values into the anion gap formula gives us 148.0 mEq/L - (101.0 mEq/L + 12.2 mEq/L) = 34.8 mEq/L. Hence, The patient's anion gap is 34.8 mEq/L.\\nThe concentration of albumin is 5.3 g/L. We need to convert the concentration to g/dL. The mass units of the source and target are the same so no conversion is needed. The current volume unit is L and the target volume unit is dL. The conversion factor is 10.0 dL for every unit of L. Our next step will be to divide the mass by the volume conversion factor of 10.0 to get the final concentration in terms of g/dL. This will result to 5.3 g albumin/10.0 dL = 0.53 g albumin/dL. The concentration value of 5.3 g albumin/L converts to 0.53 g albumin/dL. Plugging in these values into the albumin corrected anion gap formula, we get 34.8 (mEq/L) + 2.5 * (4 - 0.53 (in g/dL)) = 43.475 mEq/L. Hence, the patient's albumin corrected anion gap is 43.475 mEq/L.\\nPlugging in 43.475 mEq/L for the anion gap into the albumin corrected delta gap formula, we get 43.475 - 12 = 31.475 mEq/L. Hence, the patient's albumin corrected delta gap is 31.475 mEq/L.\", 'answer': 31.475}", "python_code": "def calculate_albumin_corrected_delta_gap(sodium, chloride, bicarbonate, albumin):\n    \"\"\"\n    Calculate the patient's albumin corrected delta gap in mEq/L.\n\n    Parameters:\n    - sodium (float): Concentration of sodium ions in mEq/L\n    - chloride (float): Concentration of chloride ions in mEq/L\n    - bicarbonate (float): Concentration of bicarbonate ions in mEq/L\n    - albumin (float): Concentration of albumin in g/dL\n\n    Returns:\n    - float: The patient's albumin corrected delta gap in mEq/L\n    \"\"\"\n    # Calculate the anion gap\n    anion_gap = sodium - (chloride + bicarbonate)\n    \n    # Calculate the albumin-corrected anion gap\n    albumin_corrected_anion_gap = anion_gap + 2.5 * (4 - albumin)\n    \n    # Calculate the albumin-corrected delta gap\n    albumin_corrected_delta_gap = albumin_corrected_anion_gap - 12\n    \n    return albumin_corrected_delta_gap", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of sodium ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of sodium ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"chloride\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of chloride ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of chloride ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bicarbonate\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of bicarbonate ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of bicarbonate ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of albumin\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of albumin\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "chloride": "mEq/L", "bicarbonate": "mEq/L", "albumin": "g/dL"}}
{"task_index": 67, "task_description": "calculator name is:Albumin Corrected Delta Ratio,\nquestion is:What is the patient's albumin corrected delta ratio?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The formula for computing the albumin corrected delta ratio is albumin corrected delta gap (mEq/L)/(24 - bicarbonate mEq/L).\\nTo compute the formula of albumin corrected delta gap, the formula is albumin corrected anion gap (in mEq/L) - 12.\\nThe formula for computing a patient's albumin corrected anion gap is: anion_gap (in mEq/L) + 2.5 * (4 - albumin (in g/dL)).\\nThe formula for computing a patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\\nThe concentration of sodium is 125.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of sodium from mmol to mEq. The mass of sodium is 125.0 mmol. The compound, sodium, has a valence of 1, and so multiply the valence by the value of mmol to get, 125.0 mmol * 1 mEq/mmol = 125.0 mEq sodium. The volume units is L so no volume conversion is needed. Hence, the concentration value of 125.0 mmol sodium/L converts to 125.0 mEq sodium/L. \\nThe concentration of chloride is 102.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of chloride from mmol to mEq. The mass of chloride is 102.0 mmol. The compound, chloride, has a valence of 1, and so multiply the valence by the value of mmol to get, 102.0 mmol * 1 mEq/mmol = 102.0 mEq chloride. The volume units is L so no volume conversion is needed. Hence, the concentration value of 102.0 mmol chloride/L converts to 102.0 mEq chloride/L. \\nThe concentration of bicarbonate is 21.0 mmol/L. We need to convert the concentration to mEq/L. Let's first convert the mass of bicarbonate from mmol to mEq. The mass of bicarbonate is 21.0 mmol. The compound, bicarbonate, has a valence of 1, and so multiply the valence by the value of mmol to get, 21.0 mmol * 1 mEq/mmol = 21.0 mEq bicarbonate. The volume units is L so no volume conversion is needed. Hence, the concentration value of 21.0 mmol bicarbonate/L converts to 21.0 mEq bicarbonate/L. \\nPlugging in these values into the anion gap formula gives us 125.0 mEq/L - (102.0 mEq/L + 21.0 mEq/L) = 2.0 mEq/L. Hence, The patient's anion gap is 2.0 mEq/L.\\nThe concentration of albumin is 2.8 g/dL. Plugging in these values into the albumin corrected anion gap formula, we get 2.0 (mEq/L) + 2.5 * (4 - 2.8 (in g/dL)) = 5.0 mEq/L. Hence, the patient's albumin corrected anion gap is 5.0 mEq/L.\\nPlugging in 5.0 mEq/L for the anion gap into the albumin corrected delta gap formula, we get 5.0 - 12 = -7.0 mEq/L. Hence, the patient's albumin corrected delta gap is -7.0 mEq/L.\\nPlugging in the albumin corrected delta gap and the bicarbonate concentration into the albumin corrected delta ratio formula, we get -7.0 mEq/L / 3.0 mEq/L = -2.33. The patient's albumin corrected delta ratio is -2.33.\", 'answer': -2.33}", "python_code": "def calculate_albumin_corrected_delta_ratio(sodium, chloride, bicarbonate, albumin):\n    \"\"\"\n    Calculate the patient's albumin corrected delta ratio.\n\n    Parameters:\n    - sodium (float): Concentration of sodium ions in mEq/L\n    - chloride (float): Concentration of chloride ions in mEq/L\n    - bicarbonate (float): Concentration of bicarbonate ions in mEq/L\n    - albumin (float): Concentration of albumin in g/dL\n\n    Returns:\n    - float: The patient's albumin corrected delta ratio\n    \"\"\"\n    # Calculate the anion gap\n    anion_gap = sodium - (chloride + bicarbonate)\n    \n    # Calculate the albumin-corrected anion gap\n    albumin_corrected_anion_gap = anion_gap + 2.5 * (4 - albumin)\n    \n    # Calculate the albumin-corrected delta gap\n    albumin_corrected_delta_gap = albumin_corrected_anion_gap - 12\n    \n    # Calculate the albumin-corrected delta ratio\n    albumin_corrected_delta_ratio = albumin_corrected_delta_gap / (24 - bicarbonate)\n    \n    return albumin_corrected_delta_ratio", "properties": {"row": "properties = {\n    \"sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of sodium ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of sodium ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"chloride\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of chloride ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of chloride ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bicarbonate\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of bicarbonate ions\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of bicarbonate ions\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Concentration of albumin\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Concentration of albumin\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sodium": "mEq/L", "chloride": "mEq/L", "bicarbonate": "mEq/L", "albumin": "g/dL"}}
{"task_index": 61, "task_description": "calculator name is:Target weight,\nquestion is:Based on the patient's height and target BMI, what is the patient's target weight in kg?.\n", "python_code": "def calculate_albumin_corrected_delta_ratio(ag, eag=12.0, cl, ecl=103.0, alb, alb_norm=4.0):\n    \"\"\"\n    Calculate the patient's albumin corrected delta ratio.\n\n    Parameters:\n    - ag (float): Measured Anion Gap in mEq/L\n    - eag (float): Expected Anion Gap in mEq/L (default is 12.0)\n    - cl (float): Measured Serum Chloride Level in mEq/L\n    - ecl (float): Expected Serum Chloride Level in mEq/L (default is 103.0)\n    - alb (float): Measured Serum Albumin Level in g/dL\n    - alb_norm (float): Normal Serum Albumin Level in g/dL (default is 4.0)\n\n    Returns:\n    - albumin_corrected_delta_ratio (float): Albumin Corrected Delta Ratio\n    \"\"\"\n    if ag < 0 or cl < 0 or eag < 0 or ecl < 0 or alb < 0 or alb_norm < 0:\n        raise ValueError(\"All input values must be non-negative.\")\n    \n    # Calculate delta gap\n    delta_gap = ag - eag - (cl - ecl)\n    \n    # Calculate albumin corrected anion gap\n    corrected_ag = ag + 2.5 * (alb_norm - alb)\n    \n    # Calculate albumin corrected delta ratio\n    albumin_corrected_delta_ratio = delta_gap / corrected_ag\n    return albumin_corrected_delta_ratio", "properties": {"row": "properties = {\n    \"ag\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Anion Gap\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Anion Gap\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"eag\": {\n        \"type\": \"array\",\n        \"description\": \"Expected Anion Gap\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Expected Anion Gap\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Serum Chloride Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Serum Chloride Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"ecl\": {\n        \"type\": \"array\",\n        \"description\": \"Expected Serum Chloride Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Expected Serum Chloride Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alb\": {\n        \"type\": \"array\",\n        \"description\": \"Measured Serum Albumin Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured Serum Albumin Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alb_norm\": {\n        \"type\": \"array\",\n        \"description\": \"Normal Serum Albumin Level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Normal Serum Albumin Level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"ag": "mEq/L", "eag": "mEq/L", "cl": "mEq/L", "ecl": "mEq/L", "alb": "g/dL", "alb_norm": "g/dL"}}
{"task_index": 9, "task_description": "calculator name is:MDRD GFR Equation,\nquestion is:Using the MDRD GFR equation, what is the patient's Glomerular Filtration Rate (GFR) in terms of mL/min/1.73 m²?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The patient is 85 years old. The concentration of Creatinine is 1.36 mg/dL. \\nThe race of the patient is not provided, so the default value of the race coefficient is 1.0.\\nThe patient is female, so the gender coefficient is 0.742.\\nThe patient's estimated GFR is calculated using the MDRD equation as:\\nGFR = 175 * creatinine^(-1.154) * age^(-0.203) * race_coefficient * gender_coefficient. The creatinine concentration is mg/dL.\\nPlugging in these values will give us: 175 * 1.36^(-1.154) * 85^(-0.203) * 1 * 0.742=36.954.\\nHence, the patient's GFR is 36.954 mL/min/1.73m².\", 'answer': 36.954}", "python_code": "def calculate_gfr(creatinine, age, race_coefficient, gender_coefficient):\n    \"\"\"\n    Calculate the Glomerular Filtration Rate (GFR) using the MDRD equation.\n    \n    Parameters:\n    - creatinine: Serum creatinine concentration in mg/dL\n    - age: Patient's age in years\n    - race_coefficient: Race coefficient (1.0 for non-African American, 1.212 for African American)\n    - gender_coefficient: Gender coefficient (1.0 for male, 0.742 for female)\n    \n    Returns:\n    - GFR: Glomerular Filtration Rate in mL/min/1.73 m²\n    \"\"\"\n    if age < 0:\n        raise ValueError(\"Age must be a positive number.\")\n    if creatinine <= 0:\n        raise ValueError(\"Creatinine concentration must be a positive number.\")\n    \n    gfr = 175 * (creatinine ** -1.154) * (age ** -0.203) * race_coefficient * gender_coefficient\n    return gfr", "properties": {"row": "properties = {\n    \"creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Serum creatinine concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum creatinine concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"race_coefficient\": {\n        \"description\": \"Race coefficient (1.0 for non-African American, 1.212 for African American)\",\n        \"type\": \"number\"\n    },\n    \"gender_coefficient\": {\n        \"description\": \"Gender coefficient (1.0 for male, 0.742 for female)\",\n        \"type\": \"number\"\n    }\n}"}, "need_unit": {"creatinine": "mg/dL", "age": "years"}}
{"task_index": 59, "task_description": "calculator name is:QTc Rautaharju Calculator,\nquestion is:Using the Rautaharju Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.\nstrictly use the formula to solve the question, but dont use list as parameters for the function, change list to multiple parameters:\ni will give you an solution to this question,you can analyze from the solution process:\n{'step_by_step_thinking': \"The corrected QT interval using the Rautajarju formula is computed as  QTc = QT interval x (120 + HR) / 180, where QT interval is in msec, and HR is the heart rate in beats per minute.\\nThe QT interval is 330 msec.\\nThe patient's heart rate is 68 beats per minute.\\nHence, plugging in these values, we will get 330 x (120 + 68) / 180 = 344.667.\\nThe patient's corrected QT interval (QTc) is 344.667 msec.\", 'answer': 344.667}", "python_code": "def calculate_qtc(qt_interval, hr):\n    \"\"\"\n    Calculate the corrected QT interval (QTc) using the Rautaharju formula.\n    \n    Parameters:\n    - qt_interval: QT interval in msec\n    - hr: Heart rate in beats per minute\n    \n    Returns:\n    - QTc: Corrected QT interval in msec\n    \"\"\"\n    if qt_interval <= 0:\n        raise ValueError(\"QT interval must be a positive number.\")\n    if hr < 0:\n        raise ValueError(\"Heart rate must be a non-negative number.\")\n    \n    qtc = qt_interval * (120 + hr) / 180\n    return qtc", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"QT interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"QT interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hr\": {\n        \"type\": \"array\",\n        \"description\": \"Heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "hr": "beats per minute"}}
