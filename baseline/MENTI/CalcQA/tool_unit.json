[
    {
        "function_name": "convert_potassium_k_unit",
        "tool_name": "Potassium (K), 钾 (K)",
        "description": "Convert Potassium (K) measurements into the following units.\n\nunits list = ['mmol/L', 'mEq/L']\n\nThe function returns the value of Potassium (K) in the target unit.",
        "code": "def convert_potassium_k_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Potassium (K) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mEq/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Potassium (K), 钾 (K), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Potassium (K) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_prealbumin_unit",
        "tool_name": "Prealbumin, 前白蛋白",
        "description": "Convert Prealbumin measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Prealbumin in the target unit.",
        "code": "def convert_prealbumin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Prealbumin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['0.055', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Prealbumin, 前白蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Prealbumin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_pregnancy_associated_plasma_protein_A_unit",
        "tool_name": "Pregnancy-associated plasma protein A, 妊娠相关血浆蛋白 A",
        "description": "Convert Pregnancy-associated plasma protein A measurements into the following units.\n\nunits list = ['mIU/L', 'µIU/mL', 'IU/L', 'mIU/mL']\n\nThe function returns the value of Pregnancy-associated plasma protein A in the target unit.",
        "code": "def convert_pregnancy_associated_plasma_protein_A_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Pregnancy-associated plasma protein A from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/L', 'µIU/mL', 'IU/L', 'mIU/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/L', 'µIU/mL', 'IU/L', 'mIU/mL']\n    factors = ['0.001', '0.001', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Pregnancy-associated plasma protein A, 妊娠相关血浆蛋白 A, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Pregnancy-associated plasma protein A from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/L', 'µIU/mL', 'IU/L', 'mIU/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_procalcitonin_unit",
        "tool_name": "Procalcitonin, 降钙素原",
        "description": "Convert Procalcitonin measurements into the following units.\n\nunits list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\nThe function returns the value of Procalcitonin in the target unit.",
        "code": "def convert_procalcitonin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Procalcitonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n    factors = ['0.1', '0.0001', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Procalcitonin, 降钙素原, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Procalcitonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_progesterone_unit",
        "tool_name": "Progesterone, 黄体酮",
        "description": "Convert Progesterone measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Progesterone in the target unit.",
        "code": "def convert_progesterone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Progesterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.031446', '0.000031446', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Progesterone, 黄体酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Progesterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_gastrin_releasing_peptide_precursor_unit",
        "tool_name": "Gastrin-releasing peptide precursor, 胃泌素释放肽前体",
        "description": "Convert Gastrin-releasing peptide precursor measurements into the following units.\n\nunits list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Gastrin-releasing peptide precursor in the target unit.",
        "code": "def convert_gastrin_releasing_peptide_precursor_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Gastrin-releasing peptide precursor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Gastrin-releasing peptide precursor, 胃泌素释放肽前体, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Gastrin-releasing peptide precursor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_prolactin_unit",
        "tool_name": "Prolactin, 催乳素",
        "description": "Convert Prolactin measurements into the following units.\n\nunits list = ['μg/L', 'μIU/mL', 'mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Prolactin in the target unit.",
        "code": "def convert_prolactin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Prolactin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['μg/L', 'μIU/mL', 'mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['μg/L', 'μIU/mL', 'mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['0.1', '0.0047', '0.0047', '0.1', '0.001', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Prolactin, 催乳素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Prolactin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['μg/L', 'μIU/mL', 'mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_proline_unit",
        "tool_name": "Proline, 脯氨酸",
        "description": "Convert Proline measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Proline in the target unit.",
        "code": "def convert_proline_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Proline from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.011513', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Proline, 脯氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Proline from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_prostate_specific_antigen_psa_unit",
        "tool_name": "Prostate-Specific Antigen (PSA), 前列腺特异性抗原",
        "description": "Convert Prostate-Specific Antigen (PSA) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Prostate-Specific Antigen (PSA) in the target unit.",
        "code": "def convert_prostate_specific_antigen_psa_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Prostate-Specific Antigen (PSA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Prostate-Specific Antigen (PSA), 前列腺特异性抗原, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Prostate-Specific Antigen (PSA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_free_prostate_specific_antigen_unit",
        "tool_name": "Free Prostate-Specific Antigen, 游离前列腺特异性抗原",
        "description": "Convert Free Prostate-Specific Antigen measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Free Prostate-Specific Antigen in the target unit.",
        "code": "def convert_free_prostate_specific_antigen_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Free Prostate-Specific Antigen from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Free Prostate-Specific Antigen, 游离前列腺特异性抗原, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Free Prostate-Specific Antigen from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_prothrombin_time_unit",
        "tool_name": "Prothrombin Time, 凝血酶原时间",
        "description": "Convert Prothrombin Time measurements into the following units.\n\nunits list = ['s', 'sec']\n\nThe function returns the value of Prothrombin Time in the target unit.",
        "code": "def convert_prothrombin_time_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Prothrombin Time from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['s', 'sec']\n    factors = ['1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Prothrombin Time, 凝血酶原时间, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Prothrombin Time from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_prothrombin_time_quick_test_unit",
        "tool_name": "Prothrombin Time (Quick's Test), 凝血酶原时间(Quick检测法)",
        "description": "Convert Prothrombin Time (Quick's Test) measurements into the following units.\n\nunits list = ['Ratio', 'Fraction', '%']\n\nThe function returns the value of Prothrombin Time (Quick's Test) in the target unit.",
        "code": "def convert_prothrombin_time_quick_test_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Prothrombin Time (Quick's Test) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Ratio', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Ratio', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Prothrombin Time (Quick's Test), 凝血酶原时间(Quick检测法), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Prothrombin Time (Quick's Test) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Ratio', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_pyrrolysine_unit",
        "tool_name": "Pyrrolysine, 吡咯赖氨酸",
        "description": "Convert Pyrrolysine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Pyrrolysine in the target unit.",
        "code": "def convert_pyrrolysine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Pyrrolysine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.0255313', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Pyrrolysine, 吡咯赖氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Pyrrolysine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_red_blood_cell_distribution_width_coefficient_of_variation_unit",
        "tool_name": "Red Blood Cell Distribution Width Coefficient of Variation, 红细胞分布宽度变异系数",
        "description": "Convert Red Blood Cell Distribution Width Coefficient of Variation measurements into the following units.\n\nunits list = ['Proportion of 1.0', '%']\n\nThe function returns the value of Red Blood Cell Distribution Width Coefficient of Variation in the target unit.",
        "code": "def convert_red_blood_cell_distribution_width_coefficient_of_variation_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Red Blood Cell Distribution Width Coefficient of Variation from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', '%']\n    factors = ['1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Red Blood Cell Distribution Width Coefficient of Variation, 红细胞分布宽度变异系数, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Red Blood Cell Distribution Width Coefficient of Variation from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_red_blood_cell_distribution_width_standard_deviation_unit",
        "tool_name": "Red Blood Cell Distribution Width Standard Deviation, 红细胞分布宽度标准差",
        "description": "Convert Red Blood Cell Distribution Width Standard Deviation measurements into the following units.\n\nunits list = ['fL', 'µm^3']\n\nThe function returns the value of Red Blood Cell Distribution Width Standard Deviation in the target unit.",
        "code": "def convert_red_blood_cell_distribution_width_standard_deviation_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Red Blood Cell Distribution Width Standard Deviation from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['fL', 'µm^3']\n    factors = ['1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Red Blood Cell Distribution Width Standard Deviation, 红细胞分布宽度标准差, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Red Blood Cell Distribution Width Standard Deviation from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_red_blood_cell_unit",
        "tool_name": "Red Blood Cell, 红细胞",
        "description": "Convert Red Blood Cell measurements into the following units.\n\nunits list = ['10^9/L', 'T/L', 'Tpt/L', 'cells/L', '106/µL (1000000/µL)', '106/mm3 (1000000/mm3)', 'M/µL', 'M/mm3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of Red Blood Cell in the target unit.",
        "code": "def convert_red_blood_cell_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Red Blood Cell from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'T/L', 'Tpt/L', 'cells/L', '106/µL (1000000/µL)', '106/mm3 (1000000/mm3)', 'M/µL', 'M/mm3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'T/L', 'Tpt/L', 'cells/L', '106/µL (1000000/µL)', '106/mm3 (1000000/mm3)', 'M/µL', 'M/mm3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000000001', '1', '1', '1', '1', '0.000001', '0.000001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Red Blood Cell, 红细胞, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Red Blood Cell from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'T/L', 'Tpt/L', 'cells/L', '106/µL (1000000/µL)', '106/mm3 (1000000/mm3)', 'M/µL', 'M/mm3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_renin_unit",
        "tool_name": "Renin, 肾素",
        "description": "Convert Renin measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Renin in the target unit.",
        "code": "def convert_renin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Renin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['4.219', '0.1', '0.1', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Renin, 肾素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Renin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_retinol_unit",
        "tool_name": "Retinol, 视黄醇",
        "description": "Convert Retinol measurements into the following units.\n\nunits list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\nThe function returns the value of Retinol in the target unit.",
        "code": "def convert_retinol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Retinol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n    factors = ['28,64516', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Retinol, 视黄醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Retinol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_rheumatoid_factor_unit",
        "tool_name": "Rheumatoid Factor, 类风湿因子",
        "description": "Convert Rheumatoid Factor measurements into the following units.\n\nunits list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\nThe function returns the value of Rheumatoid Factor in the target unit.",
        "code": "def convert_rheumatoid_factor_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Rheumatoid Factor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n    factors = ['1.0', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Rheumatoid Factor, 类风湿因子, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Rheumatoid Factor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_Riboflavin_unit",
        "tool_name": "Riboflavin, 核黄素",
        "description": "Convert Riboflavin measurements into the following units.\n\nunits list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\nThe function returns the value of Riboflavin in the target unit.",
        "code": "def convert_Riboflavin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Riboflavin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n    factors = ['0.037637', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Riboflavin, 核黄素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Riboflavin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_s100_protein_unit",
        "tool_name": "S100 Protein, S100蛋白",
        "description": "Convert S100 Protein measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of S100 Protein in the target unit.",
        "code": "def convert_s100_protein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of S100 Protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the S100 Protein, S100蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of S100 Protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_salicylates_unit",
        "tool_name": "Salicylates, 水杨酸盐",
        "description": "Convert Salicylates measurements into the following units.\n\nunits list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\nThe function returns the value of Salicylates in the target unit.",
        "code": "def convert_salicylates_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Salicylates from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n    factors = ['13.81', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Salicylates, 水杨酸盐, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Salicylates from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_Selenocysteine_unit",
        "tool_name": "Selenocysteine, 硒代半胱氨酸",
        "description": "Convert Selenocysteine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Selenocysteine in the target unit.",
        "code": "def convert_Selenocysteine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Selenocysteine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.016807', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Selenocysteine, 硒代半胱氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Selenocysteine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_serine_unit",
        "tool_name": "Serine, 丝氨酸",
        "description": "Convert Serine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\nThe function returns the value of Serine in the target unit.",
        "code": "def convert_serine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Serine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n    factors = ['0.010509', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Serine, 丝氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Serine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_serotonin_unit",
        "tool_name": "Serotonin, 血清素",
        "description": "Convert Serotonin measurements into the following units.\n\nunits list = ['µmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Serotonin in the target unit.",
        "code": "def convert_serotonin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Serotonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['17.6219', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Serotonin, 血清素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Serotonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_sex_hormone_binding_globulin_unit",
        "tool_name": "Sex Hormone Binding Globulin, 性激素结合球蛋白",
        "description": "Convert Sex Hormone Binding Globulin measurements into the following units.\n\nunits list = ['nmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\nThe function returns the value of Sex Hormone Binding Globulin in the target unit.",
        "code": "def convert_sex_hormone_binding_globulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Sex Hormone Binding Globulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n    factors = ['0.0095', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Sex Hormone Binding Globulin, 性激素结合球蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Sex Hormone Binding Globulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_soluble_fms_like_tyrosine_kinase_1_unit",
        "tool_name": "Soluble Fms-like tyrosine kinase 1, 可溶性Fms样酪氨酸激酶1",
        "description": "Convert Soluble Fms-like tyrosine kinase 1 measurements into the following units.\n\nunits list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Soluble Fms-like tyrosine kinase 1 in the target unit.",
        "code": "def convert_soluble_fms_like_tyrosine_kinase_1_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Soluble Fms-like tyrosine kinase 1 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Soluble Fms-like tyrosine kinase 1, 可溶性Fms样酪氨酸激酶1, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Soluble Fms-like tyrosine kinase 1 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_sodium_unit",
        "tool_name": "Sodium, 钠",
        "description": "Convert Sodium measurements into the following units.\n\nunits list = ['mmol/L', 'mEq/L']\n\nThe function returns the value of Sodium in the target unit.",
        "code": "def convert_sodium_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Sodium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mEq/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Sodium, 钠, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Sodium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_soluble_transferrin_receptor_unit",
        "tool_name": "Soluble Transferrin Receptor, 可溶性转铁蛋白受体",
        "description": "Convert Soluble Transferrin Receptor measurements into the following units.\n\nunits list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\nThe function returns the value of Soluble Transferrin Receptor in the target unit.",
        "code": "def convert_soluble_transferrin_receptor_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Soluble Transferrin Receptor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n    factors = ['0.085', '1', '10', '10', '10', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Soluble Transferrin Receptor, 可溶性转铁蛋白受体, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Soluble Transferrin Receptor from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_squamous_cell_carcinoma_unit",
        "tool_name": "Squamous cell carcinoma, 鳞状细胞癌",
        "description": "Convert Squamous cell carcinoma measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Squamous cell carcinoma in the target unit.",
        "code": "def convert_squamous_cell_carcinoma_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Squamous cell carcinoma from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Squamous cell carcinoma, 鳞状细胞癌, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Squamous cell carcinoma from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_testosterone_unit",
        "tool_name": "Testosterone, 睾酮",
        "description": "Convert Testosterone measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Testosterone in the target unit.",
        "code": "def convert_testosterone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Testosterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.028842', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Testosterone, 睾酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Testosterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_theobromine_unit",
        "tool_name": "Theobromine, 茶碱",
        "description": "Convert Theobromine measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Theobromine in the target unit.",
        "code": "def convert_theobromine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Theobromine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0180164', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Theobromine, 茶碱, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Theobromine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_threonine_thr_unit",
        "tool_name": "Threonine (Thr), 苏氨酸 (Thr)",
        "description": "Convert Threonine (Thr) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Threonine (Thr) in the target unit.",
        "code": "def convert_threonine_thr_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Threonine (Thr) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.011912', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Threonine (Thr), 苏氨酸 (Thr), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Threonine (Thr) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_coagulation_time_tt_unit",
        "tool_name": "Coagulation Time (TT), 凝血酶时间 (TT)",
        "description": "Convert Coagulation Time (TT) measurements into the following units.\n\nunits list = ['s', 'sec']\n\nThe function returns the value of Coagulation Time (TT) in the target unit.",
        "code": "def convert_coagulation_time_tt_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Coagulation Time (TT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['s', 'sec']\n    factors = ['1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Coagulation Time (TT), 凝血酶时间 (TT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Coagulation Time (TT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_thyroglobulin_tg_unit",
        "tool_name": "Thyroglobulin (Tg), 甲状腺球蛋白 (Tg)",
        "description": "Convert Thyroglobulin (Tg) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Thyroglobulin (Tg) in the target unit.",
        "code": "def convert_thyroglobulin_tg_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Thyroglobulin (Tg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Thyroglobulin (Tg), 甲状腺球蛋白 (Tg), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Thyroglobulin (Tg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_thyroid_uptake_unit",
        "tool_name": "Thyroid uptake, 甲状腺摄取",
        "description": "Convert Thyroid uptake measurements into the following units.\n\nunits list = ['Proportion of 1.0', '%']\n\nThe function returns the value of Thyroid uptake in the target unit.",
        "code": "def convert_thyroid_uptake_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Thyroid uptake from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', '%']\n    factors = ['1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Thyroid uptake, 甲状腺摄取, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Thyroid uptake from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_t4_unit",
        "tool_name": "Thyroxine (Total T4), 甲状腺素(总 T4)",
        "description": "Convert Thyroxine (Total T4) measurements into the following units.\n\nunits list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\nThe function returns the value of Thyroxine (Total T4) in the target unit.",
        "code": "def convert_total_t4_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Thyroxine (Total T4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n    factors = ['0.77688', '10', '10', '10', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Thyroxine (Total T4), 甲状腺素(总 T4), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Thyroxine (Total T4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_free_thyroxine_ft4_unit",
        "tool_name": "Free Thyroxine (FT4), 游离甲状腺素(FT4)",
        "description": "Convert Free Thyroxine (FT4) measurements into the following units.\n\nunits list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL', 'ng/L', 'pg/mL']\n\nThe function returns the value of Free Thyroxine (FT4) in the target unit.",
        "code": "def convert_free_thyroxine_ft4_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Free Thyroxine (FT4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL', 'ng/L', 'pg/mL']\n    factors = ['0.000077688', '0.001', '0.001', '0.001', '0.1', '0.0001', '0.0001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Free Thyroxine (FT4), 游离甲状腺素(FT4), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Free Thyroxine (FT4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_thyroxine_binding_globulin_unit",
        "tool_name": "Thyroxine-Binding Globulin (TBG), 甲状腺素结合球蛋白 (TBG)",
        "description": "Convert Thyroxine-Binding Globulin (TBG) measurements into the following units.\n\nunits list = ['nmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Thyroxine-Binding Globulin (TBG) in the target unit.",
        "code": "def convert_thyroxine_binding_globulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Thyroxine-Binding Globulin (TBG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0054', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Thyroxine-Binding Globulin (TBG), 甲状腺素结合球蛋白 (TBG), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Thyroxine-Binding Globulin (TBG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_tobramycin_unit",
        "tool_name": "Tobramycin, 妥布霉素",
        "description": "Convert Tobramycin measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Tobramycin in the target unit.",
        "code": "def convert_tobramycin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Tobramycin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0467515', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Tobramycin, 妥布霉素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Tobramycin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_protein_unit",
        "tool_name": "Total Protein, 总蛋白",
        "description": "Convert Total Protein measurements into the following units.\n\nunits list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Total Protein in the target unit.",
        "code": "def convert_total_protein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Total Protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Total Protein, 总蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Total Protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_transferrin_unit",
        "tool_name": "Transferrin, 转铁蛋白",
        "description": "Convert Transferrin measurements into the following units.\n\nunits list = ['µol/l', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Transferrin in the target unit.",
        "code": "def convert_transferrin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Transferrin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µol/l', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µol/l', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.0796', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Transferrin, 转铁蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Transferrin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µol/l', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_triglycerides_unit",
        "tool_name": "Triglycerides, 甘油三酯",
        "description": "Convert Triglycerides measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Triglycerides in the target unit.",
        "code": "def convert_triglycerides_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Triglycerides from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['88.5', '0.0885', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Triglycerides, 甘油三酯, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Triglycerides from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_triiodothyronine_t3_unit",
        "tool_name": "Triiodothyronine (T3), 三碘甲状腺原氨酸(T3)",
        "description": "Convert Triiodothyronine (T3) measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Triiodothyronine (T3) in the target unit.",
        "code": "def convert_triiodothyronine_t3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Triiodothyronine (T3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.06509776', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Triiodothyronine (T3), 三碘甲状腺原氨酸(T3), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Triiodothyronine (T3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_free_triiodothyronine_ft3_unit",
        "tool_name": "Free Triiodothyronine (FT3), 游离三碘甲状腺原氨酸(FT3)",
        "description": "Convert Free Triiodothyronine (FT3) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'ng/dL', 'ng/L']\n\nThe function returns the value of Free Triiodothyronine (FT3) in the target unit.",
        "code": "def convert_free_triiodothyronine_ft3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Free Triiodothyronine (FT3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'ng/dL', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'ng/dL', 'ng/L']\n    factors = ['0.0651', '0.1', '0.001', '0.001', '0.001', '1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Free Triiodothyronine (FT3), 游离三碘甲状腺原氨酸(FT3), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Free Triiodothyronine (FT3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'ng/dL', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_troponin_i_unit",
        "tool_name": "Troponin I (TnI), 肌钙蛋白 I (TnI)",
        "description": "Convert Troponin I (TnI) measurements into the following units.\n\nunits list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\nThe function returns the value of Troponin I (TnI) in the target unit.",
        "code": "def convert_troponin_i_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Troponin I (TnI) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Troponin I (TnI), 肌钙蛋白 I (TnI), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Troponin I (TnI) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_troponin_t_unit",
        "tool_name": "Troponin T (TnT), 肌钙蛋白 T (TnT)",
        "description": "Convert Troponin T (TnT) measurements into the following units.\n\nunits list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\nThe function returns the value of Troponin T (TnT) in the target unit.",
        "code": "def convert_troponin_t_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Troponin T (TnT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Troponin T (TnT), 肌钙蛋白 T (TnT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Troponin T (TnT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/1', 'µg%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_tryptophan_unit",
        "tool_name": "The English term for \"色氨酸 (Trp)\" is \"Tryptophan\"., 色氨酸 (Trp)",
        "description": "Convert The English term for \"色氨酸 (Trp)\" is \"Tryptophan\". measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of The English term for \"色氨酸 (Trp)\" is \"Tryptophan\". in the target unit.",
        "code": "def convert_tryptophan_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of The English term for \"色氨酸 (Trp)\" is \"Tryptophan\". from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.020423', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the The English term for \"色氨酸 (Trp)\" is \"Tryptophan\"., 色氨酸 (Trp), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of The English term for \"色氨酸 (Trp)\" is \"Tryptophan\". from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_TSH_Thyroid_Stimulating_Hormone_unit",
        "tool_name": "TSH - Thyroid Stimulating Hormone, TSH - 促甲状腺激素",
        "description": "Convert TSH - Thyroid Stimulating Hormone measurements into the following units.\n\nunits list = ['µIU/mL', 'mIU/L']\n\nThe function returns the value of TSH - Thyroid Stimulating Hormone in the target unit.",
        "code": "def convert_TSH_Thyroid_Stimulating_Hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of TSH - Thyroid Stimulating Hormone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µIU/mL', 'mIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µIU/mL', 'mIU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the TSH - Thyroid Stimulating Hormone, TSH - 促甲状腺激素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of TSH - Thyroid Stimulating Hormone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µIU/mL', 'mIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_tyrosine_tyr_unit",
        "tool_name": "Tyrosine (Tyr), 酪氨酸(Tyr)",
        "description": "Convert Tyrosine (Tyr) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Tyrosine (Tyr) in the target unit.",
        "code": "def convert_tyrosine_tyr_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Tyrosine (Tyr) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.018119', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Tyrosine (Tyr), 酪氨酸(Tyr), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Tyrosine (Tyr) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_urea_unit",
        "tool_name": "Urea, 尿素",
        "description": "Convert Urea measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Urea in the target unit.",
        "code": "def convert_urea_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Urea from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['6.006', '0.006006', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Urea, 尿素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Urea from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_blood_urea_nitrogen_unit",
        "tool_name": "Blood Urea Nitrogen (BUN), 尿素氮 (BUN)",
        "description": "Convert Blood Urea Nitrogen (BUN) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Blood Urea Nitrogen (BUN) in the target unit.",
        "code": "def convert_blood_urea_nitrogen_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Blood Urea Nitrogen (BUN) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['2.8', '0.0028', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Blood Urea Nitrogen (BUN), 尿素氮 (BUN), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Blood Urea Nitrogen (BUN) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_uric_acid_unit",
        "tool_name": "Uric Acid, 尿酸",
        "description": "Convert Uric Acid measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Uric Acid in the target unit.",
        "code": "def convert_uric_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Uric Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['16.811', '0.016811', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Uric Acid, 尿酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Uric Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_valine_val_unit",
        "tool_name": "Valine (Val), 缬氨酸(Val)",
        "description": "Convert Valine (Val) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Valine (Val) in the target unit.",
        "code": "def convert_valine_val_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Valine (Val) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.011715', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Valine (Val), 缬氨酸(Val), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Valine (Val) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_valproic_acid_unit",
        "tool_name": "Valproic acid, 丙戊酸",
        "description": "Convert Valproic acid measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Valproic acid in the target unit.",
        "code": "def convert_valproic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Valproic acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0144211', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Valproic acid, 丙戊酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Valproic acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vancomycin_unit",
        "tool_name": "Vancomycin, 万古霉素",
        "description": "Convert Vancomycin measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Vancomycin in the target unit.",
        "code": "def convert_vancomycin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vancomycin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.14493', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vancomycin, 万古霉素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vancomycin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_b1_thiamine_unit",
        "tool_name": "Vitamin B1 (Thiamine), 维生素 B1(硫胺素)",
        "description": "Convert Vitamin B1 (Thiamine) measurements into the following units.\n\nunits list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\nThe function returns the value of Vitamin B1 (Thiamine) in the target unit.",
        "code": "def convert_vitamin_b1_thiamine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin B1 (Thiamine) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n    factors = ['0.0337263', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin B1 (Thiamine), 维生素 B1(硫胺素), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin B1 (Thiamine) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_b12_cobalamin_cyanocobalamin_unit",
        "tool_name": "Vitamin B12 (Cobalamin, Cyanocobalamin), 维生素 B12(钴胺素、氰钴胺素)",
        "description": "Convert Vitamin B12 (Cobalamin, Cyanocobalamin) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Vitamin B12 (Cobalamin, Cyanocobalamin) in the target unit.",
        "code": "def convert_vitamin_b12_cobalamin_cyanocobalamin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin B12 (Cobalamin, Cyanocobalamin) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.135537', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin B12 (Cobalamin, Cyanocobalamin), 维生素 B12(钴胺素、氰钴胺素), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin B12 (Cobalamin, Cyanocobalamin) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_b3_niacin_nicotinic_acid_unit",
        "tool_name": "Vitamin B3 (Niacin, Nicotinic Acid), 维生素 B3(烟酸、烟酸)",
        "description": "Convert Vitamin B3 (Niacin, Nicotinic Acid) measurements into the following units.\n\nunits list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL']\n\nThe function returns the value of Vitamin B3 (Niacin, Nicotinic Acid) in the target unit.",
        "code": "def convert_vitamin_b3_niacin_nicotinic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin B3 (Niacin, Nicotinic Acid) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL']\n    factors = ['0.1', '0.1', '1.0', '1.0', '1.0', '100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin B3 (Niacin, Nicotinic Acid), 维生素 B3(烟酸、烟酸), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin B3 (Niacin, Nicotinic Acid) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_b6_pyridoxal_phosphate_unit",
        "tool_name": "Vitamin B6 (Pyridoxal Phosphate), 维生素 B6(磷酸吡哆醛)",
        "description": "Convert Vitamin B6 (Pyridoxal Phosphate) measurements into the following units.\n\nunits list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\nThe function returns the value of Vitamin B6 (Pyridoxal Phosphate) in the target unit.",
        "code": "def convert_vitamin_b6_pyridoxal_phosphate_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin B6 (Pyridoxal Phosphate) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n    factors = ['0.0247143', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin B6 (Pyridoxal Phosphate), 维生素 B6(磷酸吡哆醛), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin B6 (Pyridoxal Phosphate) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_c_ascorbic_acid_unit",
        "tool_name": "Vitamin C (Ascorbic Acid), 维生素 C(抗坏血酸)",
        "description": "Convert Vitamin C (Ascorbic Acid) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Vitamin C (Ascorbic Acid) in the target unit.",
        "code": "def convert_vitamin_c_ascorbic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin C (Ascorbic Acid) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.017612', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin C (Ascorbic Acid), 维生素 C(抗坏血酸), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin C (Ascorbic Acid) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_d_total_unit",
        "tool_name": "Vitamin D Total, 维生素 D 总量",
        "description": "Convert Vitamin D Total measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Vitamin D Total in the target unit.",
        "code": "def convert_vitamin_d_total_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin D Total from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.040', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin D Total, 维生素 D 总量, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin D Total from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_d_25_hydroxy_calcifediol_unit",
        "tool_name": "Vitamin D, 25-hydroxy (Calcifediol), 维生素 D，25-羟基(骨化二醇)",
        "description": "Convert Vitamin D, 25-hydroxy (Calcifediol) measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Vitamin D, 25-hydroxy (Calcifediol) in the target unit.",
        "code": "def convert_vitamin_d_25_hydroxy_calcifediol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin D, 25-hydroxy (Calcifediol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.0400647', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin D, 25-hydroxy (Calcifediol), 维生素 D，25-羟基(骨化二醇), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin D, 25-hydroxy (Calcifediol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_d3_125_dihydroxy_calcifediol_unit",
        "tool_name": "Vitamin D3, 1,25-dihydroxy (Calcifediol), 维生素 D3，1,25-二羟基(骨化三醇)",
        "description": "Convert Vitamin D3, 1,25-dihydroxy (Calcifediol) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Vitamin D3, 1,25-dihydroxy (Calcifediol) in the target unit.",
        "code": "def convert_vitamin_d3_125_dihydroxy_calcifediol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin D3, 1,25-dihydroxy (Calcifediol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['0.0416646', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin D3, 1,25-dihydroxy (Calcifediol), 维生素 D3，1,25-二羟基(骨化三醇), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin D3, 1,25-dihydroxy (Calcifediol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_E_alpha_tocopherol_unit",
        "tool_name": "Vitamin E (α-tocopherol), 维生素 E(α-生育酚)",
        "description": "Convert Vitamin E (α-tocopherol) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Vitamin E (α-tocopherol) in the target unit.",
        "code": "def convert_vitamin_E_alpha_tocopherol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin E (α-tocopherol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.043071', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin E (α-tocopherol), 维生素 E(α-生育酚), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin E (α-tocopherol) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_k_phylloquinone_unit",
        "tool_name": "Vitamin K (Phylloquinone), 维生素 K(叶绿醌)",
        "description": "Convert Vitamin K (Phylloquinone) measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Vitamin K (Phylloquinone) in the target unit.",
        "code": "def convert_vitamin_k_phylloquinone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Vitamin K (Phylloquinone) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.0450707', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Vitamin K (Phylloquinone), 维生素 K(叶绿醌), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Vitamin K (Phylloquinone) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_white_blood_cell_unit",
        "tool_name": "White Blood Cell (WBC), 白细胞 (WBC)",
        "description": "Convert White Blood Cell (WBC) measurements into the following units.\n\nunits list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of White Blood Cell (WBC) in the target unit.",
        "code": "def convert_white_blood_cell_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of White Blood Cell (WBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the White Blood Cell (WBC), 白细胞 (WBC), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of White Blood Cell (WBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_zinc_zn_unit",
        "tool_name": "Zinc (Zn), 锌 (Zn)",
        "description": "Convert Zinc (Zn) measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\nThe function returns the value of Zinc (Zn) in the target unit.",
        "code": "def convert_zinc_zn_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Zinc (Zn) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n    factors = ['0.006538', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Zinc (Zn), 锌 (Zn), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Zinc (Zn) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_insulin_like_growth_factor_binding_protein_3_unit",
        "tool_name": "Insulin-like Growth Factor Binding Protein 3 (IGFBP-3), 胰岛素样生长因子结合蛋白 3 (IGFBP-3)",
        "description": "Convert Insulin-like Growth Factor Binding Protein 3 (IGFBP-3) measurements into the following units.\n\nunits list = ['µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\nThe function returns the value of Insulin-like Growth Factor Binding Protein 3 (IGFBP-3) in the target unit.",
        "code": "def convert_insulin_like_growth_factor_binding_protein_3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Insulin-like Growth Factor Binding Protein 3 (IGFBP-3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Insulin-like Growth Factor Binding Protein 3 (IGFBP-3), 胰岛素样生长因子结合蛋白 3 (IGFBP-3), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Insulin-like Growth Factor Binding Protein 3 (IGFBP-3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_beta_hydroxybutyric_acid_unit",
        "tool_name": "β-Hydroxybutyric Acid, β-羟丁酸",
        "description": "Convert β-Hydroxybutyric Acid measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of β-Hydroxybutyric Acid in the target unit.",
        "code": "def convert_beta_hydroxybutyric_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of β-Hydroxybutyric Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['10.411', '0.010411', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the β-Hydroxybutyric Acid, β-羟丁酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of β-Hydroxybutyric Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_17_Hydroxyprogesterone_unit",
        "tool_name": "17-Hydroxyprogesterone, 17-羟孕酮",
        "description": "Convert 17-Hydroxyprogesterone measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of 17-Hydroxyprogesterone in the target unit.",
        "code": "def convert_17_Hydroxyprogesterone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of 17-Hydroxyprogesterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.033046', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the 17-Hydroxyprogesterone, 17-羟孕酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of 17-Hydroxyprogesterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_paracetamol_unit",
        "tool_name": "Paracetamol, 对乙酰氨基酚",
        "description": "Convert Paracetamol measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Paracetamol in the target unit.",
        "code": "def convert_paracetamol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Paracetamol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0151165', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Paracetamol, 对乙酰氨基酚, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Paracetamol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_acetoacetic_acid_acetoacetate_unit",
        "tool_name": "Acetoacetic acid (Acetoacetate), 乙酰乙酸(乙酰乙酸盐)",
        "description": "Convert Acetoacetic acid (Acetoacetate) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Acetoacetic acid (Acetoacetate) in the target unit.",
        "code": "def convert_acetoacetic_acid_acetoacetate_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Acetoacetic acid (Acetoacetate) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['10.2088', '0.0102088', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Acetoacetic acid (Acetoacetate), 乙酰乙酸(乙酰乙酸盐), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Acetoacetic acid (Acetoacetate) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_acetone_unit",
        "tool_name": "Acetone, 丙酮",
        "description": "Convert Acetone measurements into the following units.\n\nunits list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Acetone in the target unit.",
        "code": "def convert_acetone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Acetone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['5.808', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Acetone, 丙酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Acetone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_acid_phosphatase_unit",
        "tool_name": "Acid Phosphatase (ACP), 酸性磷酸酶 (ACP)",
        "description": "Convert Acid Phosphatase (ACP) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)L', 'µmol/(h•mL)']\n\nThe function returns the value of Acid Phosphatase (ACP) in the target unit.",
        "code": "def convert_acid_phosphatase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Acid Phosphatase (ACP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)L', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)L', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Acid Phosphatase (ACP), 酸性磷酸酶 (ACP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Acid Phosphatase (ACP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)L', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_activated_partial_thromboplastin_time_unit",
        "tool_name": "Activated Partial Thromboplastin Time (APTT), 活化部分凝血活酶时间 (APTT)",
        "description": "Convert Activated Partial Thromboplastin Time (APTT) measurements into the following units.\n\nunits list = ['s', 'sec']\n\nThe function returns the value of Activated Partial Thromboplastin Time (APTT) in the target unit.",
        "code": "def convert_activated_partial_thromboplastin_time_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Activated Partial Thromboplastin Time (APTT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['s', 'sec']\n    factors = ['1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Activated Partial Thromboplastin Time (APTT), 活化部分凝血活酶时间 (APTT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Activated Partial Thromboplastin Time (APTT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['s', 'sec']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_adrenocorticotropic_hormone_unit",
        "tool_name": "Adrenocorticotropic Hormone (ACTH), 促肾上腺皮质激素 (ACTH)",
        "description": "Convert Adrenocorticotropic Hormone (ACTH) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Adrenocorticotropic Hormone (ACTH) in the target unit.",
        "code": "def convert_adrenocorticotropic_hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Adrenocorticotropic Hormone (ACTH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.4541', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Adrenocorticotropic Hormone (ACTH), 促肾上腺皮质激素 (ACTH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Adrenocorticotropic Hormone (ACTH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alanine_ala_unit",
        "tool_name": "Alanine (Ala), 丙氨酸(Ala)",
        "description": "Convert Alanine (Ala) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/L']\n\nThe function returns the value of Alanine (Ala) in the target unit.",
        "code": "def convert_alanine_ala_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Alanine (Ala) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/L']\n    factors = ['0.008909', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Alanine (Ala), 丙氨酸(Ala), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Alanine (Ala) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alanine_aminotransferase_ALT_SGPT_unit",
        "tool_name": "Alanine Aminotransferase (ALT/SGPT), 丙氨酸氨基转移酶 (ALT/SGPT)",
        "description": "Convert Alanine Aminotransferase (ALT/SGPT) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Alanine Aminotransferase (ALT/SGPT) in the target unit.",
        "code": "def convert_alanine_aminotransferase_ALT_SGPT_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Alanine Aminotransferase (ALT/SGPT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Alanine Aminotransferase (ALT/SGPT), 丙氨酸氨基转移酶 (ALT/SGPT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Alanine Aminotransferase (ALT/SGPT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_albumin_unit",
        "tool_name": "Albumin, 白蛋白",
        "description": "Convert Albumin measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Albumin in the target unit.",
        "code": "def convert_albumin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Albumin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['66.460', '0.066460', '1', '10', '10', '10', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Albumin, 白蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Albumin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ethanol_dehydrogenase_adh_unit",
        "tool_name": "Ethanol Dehydrogenase (ADH), 乙醇脱氢酶(ADH)",
        "description": "Convert Ethanol Dehydrogenase (ADH) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Ethanol Dehydrogenase (ADH) in the target unit.",
        "code": "def convert_ethanol_dehydrogenase_adh_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ethanol Dehydrogenase (ADH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ethanol Dehydrogenase (ADH), 乙醇脱氢酶(ADH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ethanol Dehydrogenase (ADH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_aldehyde_dehydrogenase_unit",
        "tool_name": "Aldehyde dehydrogenase, 醛缩酶",
        "description": "Convert Aldehyde dehydrogenase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Aldehyde dehydrogenase in the target unit.",
        "code": "def convert_aldehyde_dehydrogenase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Aldehyde dehydrogenase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Aldehyde dehydrogenase, 醛缩酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Aldehyde dehydrogenase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_aldosterone_unit",
        "tool_name": "Aldosterone, 醛固酮",
        "description": "Convert Aldosterone measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\nThe function returns the value of Aldosterone in the target unit.",
        "code": "def convert_aldosterone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Aldosterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n    factors = ['0.036045', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.0001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Aldosterone, 醛固酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Aldosterone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alkaline_phosphatase_ALP_unit",
        "tool_name": "Alkaline Phosphatase (ALP), 碱性磷酸酶 (ALP)",
        "description": "Convert Alkaline Phosphatase (ALP) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Alkaline Phosphatase (ALP) in the target unit.",
        "code": "def convert_alkaline_phosphatase_ALP_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Alkaline Phosphatase (ALP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Alkaline Phosphatase (ALP), 碱性磷酸酶 (ALP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Alkaline Phosphatase (ALP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alpha1_acid_glycoprotein_unit",
        "tool_name": "α1-酸性糖蛋白, α1-酸性糖蛋白",
        "description": "Convert α1-酸性糖蛋白 measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of α1-酸性糖蛋白 in the target unit.",
        "code": "def convert_alpha1_acid_glycoprotein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of α1-酸性糖蛋白 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['40', '0.040', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the α1-酸性糖蛋白, α1-酸性糖蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of α1-酸性糖蛋白 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alpha_1_antitrypsin_unit",
        "tool_name": "Alpha-1 Antitrypsin, α1-抗胰蛋白酶",
        "description": "Convert Alpha-1 Antitrypsin measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Alpha-1 Antitrypsin in the target unit.",
        "code": "def convert_alpha_1_antitrypsin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Alpha-1 Antitrypsin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['54.35', '0.05435', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Alpha-1 Antitrypsin, α1-抗胰蛋白酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Alpha-1 Antitrypsin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_alpha1_Microglobulin_unit",
        "tool_name": "α1-Microglobulin, α1‑微球蛋白",
        "description": "Convert α1-Microglobulin measurements into the following units.\n\nunits list = ['µmol/L', 'nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\nThe function returns the value of α1-Microglobulin in the target unit.",
        "code": "def convert_alpha1_Microglobulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of α1-Microglobulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n    factors = ['30', '0.030', '1', '10', '10', '10', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the α1-Microglobulin, α1‑微球蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of α1-Microglobulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_AFP_AlphaFetoprotein_unit",
        "tool_name": "AFP (Alpha-fetoprotein), 甲胎蛋白(AFP)",
        "description": "Convert AFP (Alpha-fetoprotein) measurements into the following units.\n\nunits list = ['IUmL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\nThe function returns the value of AFP (Alpha-fetoprotein) in the target unit.",
        "code": "def convert_AFP_AlphaFetoprotein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of AFP (Alpha-fetoprotein) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IUmL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['IUmL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n    factors = ['0.121', '0.1', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the AFP (Alpha-fetoprotein), 甲胎蛋白(AFP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of AFP (Alpha-fetoprotein) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IUmL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ammonia_nh3_unit",
        "tool_name": "Ammonia (NH3), 氨(NH3)",
        "description": "Convert Ammonia (NH3) measurements into the following units.\n\nunits list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL', 'µg/L', 'mg/L']\n\nThe function returns the value of Ammonia (NH3) in the target unit.",
        "code": "def convert_ammonia_nh3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ammonia (NH3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL', 'µg/L', 'mg/L']\n    factors = ['0.0017031', '0.001', '0.001', '0.001', '0.1', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ammonia (NH3), 氨(NH3), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ammonia (NH3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/mL', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_amylase_unit",
        "tool_name": "Amylase, 淀粉酶",
        "description": "Convert Amylase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Amylase in the target unit.",
        "code": "def convert_amylase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Amylase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Amylase, 淀粉酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Amylase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_pancreatic_amylase_unit",
        "tool_name": "Pancreatic amylase, 胰淀粉酶",
        "description": "Convert Pancreatic amylase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Pancreatic amylase in the target unit.",
        "code": "def convert_pancreatic_amylase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Pancreatic amylase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Pancreatic amylase, 胰淀粉酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Pancreatic amylase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_androstenedione_unit",
        "tool_name": "Androstenedione, 雄烯二酮",
        "description": "Convert Androstenedione measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Androstenedione in the target unit.",
        "code": "def convert_androstenedione_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Androstenedione from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.02864', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Androstenedione, 雄烯二酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Androstenedione from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_anti_thyroid_peroxidase_antibody_anti_tpo_unit",
        "tool_name": "Anti-Thyroid Peroxidase Antibody (Anti-TPO), 甲状腺过氧化物酶抗体(Anti-TPO)",
        "description": "Convert Anti-Thyroid Peroxidase Antibody (Anti-TPO) measurements into the following units.\n\nunits list = ['IU/mL', 'kIU/L']\n\nThe function returns the value of Anti-Thyroid Peroxidase Antibody (Anti-TPO) in the target unit.",
        "code": "def convert_anti_thyroid_peroxidase_antibody_anti_tpo_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Anti-Thyroid Peroxidase Antibody (Anti-TPO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['IU/mL', 'kIU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Anti-Thyroid Peroxidase Antibody (Anti-TPO), 甲状腺过氧化物酶抗体(Anti-TPO), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Anti-Thyroid Peroxidase Antibody (Anti-TPO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_TSH_Receptor_Antibody_Anti_TSHR_unit",
        "tool_name": "TSH Receptor Antibody (Anti-TSHR), TSH 受体抗体(Anti-TSHR)",
        "description": "Convert TSH Receptor Antibody (Anti-TSHR) measurements into the following units.\n\nunits list = ['IU/mL', 'kIU/L']\n\nThe function returns the value of TSH Receptor Antibody (Anti-TSHR) in the target unit.",
        "code": "def convert_TSH_Receptor_Antibody_Anti_TSHR_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of TSH Receptor Antibody (Anti-TSHR) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['IU/mL', 'kIU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the TSH Receptor Antibody (Anti-TSHR), TSH 受体抗体(Anti-TSHR), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of TSH Receptor Antibody (Anti-TSHR) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_anti_cyclic_citrullinated_peptide_antibody_unit",
        "tool_name": "Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP), 抗环瓜氨酸肽抗体(Anti-CCP)",
        "description": "Convert Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP) measurements into the following units.\n\nunits list = ['U/mL', 'kU/L']\n\nThe function returns the value of Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP) in the target unit.",
        "code": "def convert_anti_cyclic_citrullinated_peptide_antibody_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP), 抗环瓜氨酸肽抗体(Anti-CCP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Anti-Cyclic Citrullinated Peptide Antibody (Anti-CCP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_anti_thyroglobulin_antibody_anti_tg_unit",
        "tool_name": "Anti-Thyroglobulin Antibody (Anti-Tg), 甲状腺球蛋白抗体 (Anti-Tg)",
        "description": "Convert Anti-Thyroglobulin Antibody (Anti-Tg) measurements into the following units.\n\nunits list = ['IU/mL', 'kIU/L']\n\nThe function returns the value of Anti-Thyroglobulin Antibody (Anti-Tg) in the target unit.",
        "code": "def convert_anti_thyroglobulin_antibody_anti_tg_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Anti-Thyroglobulin Antibody (Anti-Tg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['IU/mL', 'kIU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Anti-Thyroglobulin Antibody (Anti-Tg), 甲状腺球蛋白抗体 (Anti-Tg), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Anti-Thyroglobulin Antibody (Anti-Tg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_antidiuretic_hormone_vasopressin_unit",
        "tool_name": "Antidiuretic Hormone (Vasopressin), 抗利尿激素(血管加压素)",
        "description": "Convert Antidiuretic Hormone (Vasopressin) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Antidiuretic Hormone (Vasopressin) in the target unit.",
        "code": "def convert_antidiuretic_hormone_vasopressin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Antidiuretic Hormone (Vasopressin) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['0.108423', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Antidiuretic Hormone (Vasopressin), 抗利尿激素(血管加压素), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Antidiuretic Hormone (Vasopressin) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_antistreptolysin_o_unit",
        "tool_name": "Antistreptolysin O (ASLO), 抗链球菌溶血素O(ASLO)",
        "description": "Convert Antistreptolysin O (ASLO) measurements into the following units.\n\nunits list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\nThe function returns the value of Antistreptolysin O (ASLO) in the target unit.",
        "code": "def convert_antistreptolysin_o_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Antistreptolysin O (ASLO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n    factors = ['1.0', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Antistreptolysin O (ASLO), 抗链球菌溶血素O(ASLO), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Antistreptolysin O (ASLO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L', 'IU/mL', 'kIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_antithrombin_iii_activity_unit",
        "tool_name": "Antithrombin III activity, 抗凝血酶III活性",
        "description": "Convert Antithrombin III activity measurements into the following units.\n\nunits list = ['Proportion', '%', 'UmL', 'kU/L']\n\nThe function returns the value of Antithrombin III activity in the target unit.",
        "code": "def convert_antithrombin_iii_activity_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Antithrombin III activity from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion', '%', 'UmL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion', '%', 'UmL', 'kU/L']\n    factors = ['1', '0.01', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Antithrombin III activity, 抗凝血酶III活性, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Antithrombin III activity from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion', '%', 'UmL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_anti_mullerian_hormone_unit",
        "tool_name": "Anti-Müllerian Hormone (AMH), 抗苗勒氏管激素(AMH)",
        "description": "Convert Anti-Müllerian Hormone (AMH) measurements into the following units.\n\nunits list = ['pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\nThe function returns the value of Anti-Müllerian Hormone (AMH) in the target unit.",
        "code": "def convert_anti_mullerian_hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Anti-Müllerian Hormone (AMH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n    factors = ['0.0140', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.0001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Anti-Müllerian Hormone (AMH), 抗苗勒氏管激素(AMH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Anti-Müllerian Hormone (AMH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_apolipoprotein_A_1_unit",
        "tool_name": "Apolipoprotein A-1, 载脂蛋白A-1",
        "description": "Convert Apolipoprotein A-1 measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Apolipoprotein A-1 in the target unit.",
        "code": "def convert_apolipoprotein_A_1_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Apolipoprotein A-1 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['28.0', '0.0280', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Apolipoprotein A-1, 载脂蛋白A-1, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Apolipoprotein A-1 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_apolipoprotein_b_unit",
        "tool_name": "Apolipoprotein B, 载脂蛋白B",
        "description": "Convert Apolipoprotein B measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Apolipoprotein B in the target unit.",
        "code": "def convert_apolipoprotein_b_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Apolipoprotein B from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['513.0', '0.513', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Apolipoprotein B, 载脂蛋白B, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Apolipoprotein B from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_arginine_arg_unit",
        "tool_name": "Arginine (Arg), 精氨酸(Arg)",
        "description": "Convert Arginine (Arg) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Arginine (Arg) in the target unit.",
        "code": "def convert_arginine_arg_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Arginine (Arg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.01742', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Arginine (Arg), 精氨酸(Arg), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Arginine (Arg) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_asparagine_asn_unit",
        "tool_name": "Asparagine (Asn), 天冬酰胺(Asn)",
        "description": "Convert Asparagine (Asn) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Asparagine (Asn) in the target unit.",
        "code": "def convert_asparagine_asn_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Asparagine (Asn) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.013212', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Asparagine (Asn), 天冬酰胺(Asn), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Asparagine (Asn) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_aspartate_aminotransferase_ast_sgot_unit",
        "tool_name": "Aspartate Aminotransferase (AST/SGOT), 天冬氨酸氨基转移酶(AST/SGOT)",
        "description": "Convert Aspartate Aminotransferase (AST/SGOT) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Aspartate Aminotransferase (AST/SGOT) in the target unit.",
        "code": "def convert_aspartate_aminotransferase_ast_sgot_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Aspartate Aminotransferase (AST/SGOT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Aspartate Aminotransferase (AST/SGOT), 天冬氨酸氨基转移酶(AST/SGOT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Aspartate Aminotransferase (AST/SGOT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_aspartic_acid_asp_unit",
        "tool_name": "Aspartic Acid (Asp), 天冬氨酸(Asp)",
        "description": "Convert Aspartic Acid (Asp) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Aspartic Acid (Asp) in the target unit.",
        "code": "def convert_aspartic_acid_asp_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Aspartic Acid (Asp) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.01331', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Aspartic Acid (Asp), 天冬氨酸(Asp), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Aspartic Acid (Asp) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_basophil_absolute_value_unit",
        "tool_name": "Basophil (Basophil Absolute Value), 嗜碱性粒细胞(嗜碱性粒细胞绝对值)",
        "description": "Convert Basophil (Basophil Absolute Value) measurements into the following units.\n\nunits list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'k/µL', 'k/mm3', 'cells/µL', 'cells/mm3']\n\nThe function returns the value of Basophil (Basophil Absolute Value) in the target unit.",
        "code": "def convert_basophil_absolute_value_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Basophil (Basophil Absolute Value) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'k/µL', 'k/mm3', 'cells/µL', 'cells/mm3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'k/µL', 'k/mm3', 'cells/µL', 'cells/mm3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Basophil (Basophil Absolute Value), 嗜碱性粒细胞(嗜碱性粒细胞绝对值), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Basophil (Basophil Absolute Value) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'k/µL', 'k/mm3', 'cells/µL', 'cells/mm3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_basophil_baso_unit",
        "tool_name": "Basophil (BASO), 嗜碱性粒细胞(BASO)",
        "description": "Convert Basophil (BASO) measurements into the following units.\n\nunits list = ['Proportion of 1.0', 'Fraction', '%']\n\nThe function returns the value of Basophil (BASO) in the target unit.",
        "code": "def convert_basophil_baso_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Basophil (BASO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Basophil (BASO), 嗜碱性粒细胞(BASO), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Basophil (BASO) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_beta_collagen_degradation_product_type_i_collagen_degradation_product_unit",
        "tool_name": "β-Collagen Degradation Product (Type I Collagen Degradation Product), β-胶原降解产物(Ⅰ型胶原降解产物)",
        "description": "Convert β-Collagen Degradation Product (Type I Collagen Degradation Product) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\nThe function returns the value of β-Collagen Degradation Product (Type I Collagen Degradation Product) in the target unit.",
        "code": "def convert_beta_collagen_degradation_product_type_i_collagen_degradation_product_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of β-Collagen Degradation Product (Type I Collagen Degradation Product) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.0001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the β-Collagen Degradation Product (Type I Collagen Degradation Product), β-胶原降解产物(Ⅰ型胶原降解产物), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of β-Collagen Degradation Product (Type I Collagen Degradation Product) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_beta2_microglobulin_unit",
        "tool_name": "β2-Microglobulin (β2-M), β2-微球蛋白 (β2-M)",
        "description": "Convert β2-Microglobulin (β2-M) measurements into the following units.\n\nunits list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'ng/mL']\n\nThe function returns the value of β2-Microglobulin (β2-M) in the target unit.",
        "code": "def convert_beta2_microglobulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of β2-Microglobulin (β2-M) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'ng/mL']\n    factors = ['0.01179', '1', '10', '10', '10', '1', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the β2-Microglobulin (β2-M), β2-微球蛋白 (β2-M), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of β2-Microglobulin (β2-M) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_bicarbonate_hco3_minus_unit",
        "tool_name": "Bicarbonate (HCO3-), 碳酸氢盐(HCO3-)",
        "description": "Convert Bicarbonate (HCO3-) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mEq/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'mg/L']\n\nThe function returns the value of Bicarbonate (HCO3-) in the target unit.",
        "code": "def convert_bicarbonate_hco3_minus_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Bicarbonate (HCO3-) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mEq/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mEq/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'mg/L']\n    factors = ['6.10168', '0.00610168', '6.10168', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Bicarbonate (HCO3-), 碳酸氢盐(HCO3-), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Bicarbonate (HCO3-) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mEq/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_direct_bilirubin_unit",
        "tool_name": "Direct Bilirubin, 直接胆红素",
        "description": "Convert Direct Bilirubin measurements into the following units.\n\nunits list = ['µmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Direct Bilirubin in the target unit.",
        "code": "def convert_direct_bilirubin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Direct Bilirubin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['58.467', '0.058467', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Direct Bilirubin, 直接胆红素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Direct Bilirubin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_bilirubin_unit",
        "tool_name": "Total Bilirubin, 总胆红素",
        "description": "Convert Total Bilirubin measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Total Bilirubin in the target unit.",
        "code": "def convert_total_bilirubin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Total Bilirubin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['58.467', '0.058467', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Total Bilirubin, 总胆红素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Total Bilirubin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_vitamin_b7_unit",
        "tool_name": "Biotin (Vitamin B7), 生物素(维生素B7)",
        "description": "Convert Biotin (Vitamin B7) measurements into the following units.\n\nunits list = ['nmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Biotin (Vitamin B7) in the target unit.",
        "code": "def convert_vitamin_b7_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Biotin (Vitamin B7) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['24,431', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Biotin (Vitamin B7), 生物素(维生素B7), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Biotin (Vitamin B7) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_c_peptide_unit",
        "tool_name": "C-peptide, C肽",
        "description": "Convert C-peptide measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of C肽 in the target unit.",
        "code": "def convert_c_peptide_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of C肽 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.302029', '0.000302029', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the C-peptide, C肽, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of C肽 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_c_reactive_protein_unit",
        "tool_name": "C-reactive protein (CRP), C-反应蛋白(CRP)",
        "description": "Convert C-reactive protein (CRP) measurements into the following units.\n\nunits list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'g/L']\n\nThe function returns the value of C-reactive protein (CRP) in the target unit.",
        "code": "def convert_c_reactive_protein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of C-reactive protein (CRP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'g/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'g/L']\n    factors = ['0.105', '1', '1', '10', '10', '10', '1000']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the C-reactive protein (CRP), C-反应蛋白(CRP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of C-reactive protein (CRP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL', 'g/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_complement_factor_3_unit",
        "tool_name": "Complement Factor 3 (C3), 补体因子3(C3)",
        "description": "Convert Complement Factor 3 (C3) measurements into the following units.\n\nunits list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Complement Factor 3 (C3) in the target unit.",
        "code": "def convert_complement_factor_3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Complement Factor 3 (C3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Complement Factor 3 (C3), 补体因子3(C3), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Complement Factor 3 (C3) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_complement_factor_4_unit",
        "tool_name": "Complement Factor 4 (C4), 补体因子4(C4)",
        "description": "Convert Complement Factor 4 (C4) measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Complement Factor 4 (C4) in the target unit.",
        "code": "def convert_complement_factor_4_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Complement Factor 4 (C4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.2', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Complement Factor 4 (C4), 补体因子4(C4), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Complement Factor 4 (C4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cancer_antigen_125_unit",
        "tool_name": "Cancer Antigen 125, 癌抗原 125",
        "description": "Convert Cancer Antigen 125 measurements into the following units.\n\nunits list = ['U/mL', 'kU/L']\n\nThe function returns the value of Cancer Antigen 125 in the target unit.",
        "code": "def convert_cancer_antigen_125_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cancer Antigen 125 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cancer Antigen 125, 癌抗原 125, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cancer Antigen 125 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cancer_antigen_15_3_unit",
        "tool_name": "Cancer Antigen 15-3, 癌抗原 15-3",
        "description": "Convert Cancer Antigen 15-3 measurements into the following units.\n\nunits list = ['U/mL', 'kU/L']\n\nThe function returns the value of Cancer Antigen 15-3 in the target unit.",
        "code": "def convert_cancer_antigen_15_3_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cancer Antigen 15-3 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cancer Antigen 15-3, 癌抗原 15-3, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cancer Antigen 15-3 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cancer_antigen_19_9_unit",
        "tool_name": "Cancer Antigen 19-9, 癌抗原 19-9",
        "description": "Convert Cancer Antigen 19-9 measurements into the following units.\n\nunits list = ['U/mL', 'kU/L']\n\nThe function returns the value of Cancer Antigen 19-9 in the target unit.",
        "code": "def convert_cancer_antigen_19_9_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cancer Antigen 19-9 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cancer Antigen 19-9, 癌抗原 19-9, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cancer Antigen 19-9 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cancer_antigen_72_4_unit",
        "tool_name": "Cancer Antigen 72-4, 癌抗原 72-4",
        "description": "Convert Cancer Antigen 72-4 measurements into the following units.\n\nunits list = ['U/mL', 'kU/L']\n\nThe function returns the value of Cancer Antigen 72-4 in the target unit.",
        "code": "def convert_cancer_antigen_72_4_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cancer Antigen 72-4 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['U/mL', 'kU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cancer Antigen 72-4, 癌抗原 72-4, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cancer Antigen 72-4 from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['U/mL', 'kU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_calcitonin_unit",
        "tool_name": "Calcitonin, 降钙素",
        "description": "Convert Calcitonin measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Calcitonin in the target unit.",
        "code": "def convert_calcitonin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Calcitonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.34176', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Calcitonin, 降钙素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Calcitonin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_calcium_unit",
        "tool_name": "Calcium, 钙",
        "description": "Convert Calcium measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\nThe function returns the value of Calcium in the target unit.",
        "code": "def convert_calcium_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Calcium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n    factors = ['4.0078', '0.0040078', '1.0', '1.0', '1.0', '0.1', '0.1', '2.0039']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Calcium, 钙, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Calcium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_carbamazepine_unit",
        "tool_name": "Carbamazepine, 卡马西平",
        "description": "Convert Carbamazepine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Carbamazepine in the target unit.",
        "code": "def convert_carbamazepine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Carbamazepine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.023626', '1.000', '1.000', '0.100', '1.000', '0.100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Carbamazepine, 卡马西平, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Carbamazepine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_carcinoembryonic_antigen_cea_unit",
        "tool_name": "Carcinoembryonic Antigen (CEA), 癌胚抗原",
        "description": "Convert Carcinoembryonic Antigen (CEA) measurements into the following units.\n\nunits list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\nThe function returns the value of Carcinoembryonic Antigen (CEA) in the target unit.",
        "code": "def convert_carcinoembryonic_antigen_cea_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Carcinoembryonic Antigen (CEA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n    factors = ['0.1', '0.0001', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Carcinoembryonic Antigen (CEA), 癌胚抗原, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Carcinoembryonic Antigen (CEA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ceruloplasmin_unit",
        "tool_name": "Ceruloplasmin, 铜蓝蛋白",
        "description": "Convert Ceruloplasmin measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Ceruloplasmin in the target unit.",
        "code": "def convert_ceruloplasmin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ceruloplasmin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['134', '0.134', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ceruloplasmin, 铜蓝蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ceruloplasmin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_chloride_unit",
        "tool_name": "Chloride, 氯化物",
        "description": "Convert Chloride measurements into the following units.\n\nunits list = ['mmol/L', 'mEq/L']\n\nThe function returns the value of Chloride in the target unit.",
        "code": "def convert_chloride_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Chloride from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mEq/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Chloride, 氯化物, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Chloride from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mEq/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_high_density_lipoprotein_cholesterol_unit",
        "tool_name": "High-density lipoprotein cholesterol, 高密度脂蛋白胆固醇",
        "description": "Convert High-density lipoprotein cholesterol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of High-density lipoprotein cholesterol in the target unit.",
        "code": "def convert_high_density_lipoprotein_cholesterol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of High-density lipoprotein cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['38.665', '0.038665', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the High-density lipoprotein cholesterol, 高密度脂蛋白胆固醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of High-density lipoprotein cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_low_density_lipoprotein_cholesterol_unit",
        "tool_name": "Low-density lipoprotein cholesterol, 低密度脂蛋白胆固醇",
        "description": "Convert Low-density lipoprotein cholesterol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Low-density lipoprotein cholesterol in the target unit.",
        "code": "def convert_low_density_lipoprotein_cholesterol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Low-density lipoprotein cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['38.665', '0.038665', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Low-density lipoprotein cholesterol, 低密度脂蛋白胆固醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Low-density lipoprotein cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_cholesterol_unit",
        "tool_name": "Total Cholesterol, 总胆固醇",
        "description": "Convert Total Cholesterol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Total Cholesterol in the target unit.",
        "code": "def convert_total_cholesterol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Total Cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['38.665', '0.038665', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Total Cholesterol, 总胆固醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Total Cholesterol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_choline_esterase_unit",
        "tool_name": "Choline Esterase, 胆碱酯酶",
        "description": "Convert Choline Esterase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Choline Esterase in the target unit.",
        "code": "def convert_choline_esterase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Choline Esterase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Choline Esterase, 胆碱酯酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Choline Esterase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ck_mb_mass_unit",
        "tool_name": "CK-MB Mass (Quantitative Detection), CK-MB质量(定量检测)",
        "description": "Convert CK-MB Mass (Quantitative Detection) measurements into the following units.\n\nunits list = ['µg/L', 'ng/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of CK-MB Mass (Quantitative Detection) in the target unit.",
        "code": "def convert_ck_mb_mass_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of CK-MB Mass (Quantitative Detection) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/L', 'ng/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['0.1', '0.0001', '0.1', '0.001', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the CK-MB Mass (Quantitative Detection), CK-MB质量(定量检测), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of CK-MB Mass (Quantitative Detection) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/L', 'ng/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_copper_unit",
        "tool_name": "Copper, 铜",
        "description": "Convert Copper measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\nThe function returns the value of Copper in the target unit.",
        "code": "def convert_copper_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Copper from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n    factors = ['0.0063546', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Copper, 铜, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Copper from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cortisol_unit",
        "tool_name": "Cortisol, 皮质醇",
        "description": "Convert Cortisol measurements into the following units.\n\nunits list = ['nmol/L', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\nThe function returns the value of Cortisol in the target unit.",
        "code": "def convert_cortisol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cortisol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n    factors = ['0.3625', '10', '10', '1', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cortisol, 皮质醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cortisol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'µg/dL', 'µg/100mL', 'ng%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_creatine_kinase_unit",
        "tool_name": "Creatine Kinase, 肌酸激酶",
        "description": "Convert Creatine Kinase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Creatine Kinase in the target unit.",
        "code": "def convert_creatine_kinase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Creatine Kinase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Creatine Kinase, 肌酸激酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Creatine Kinase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ck_mb_activity_unit",
        "tool_name": "CK-MB(活性), CK-MB(活性)",
        "description": "Convert CK-MB(活性) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of CK-MB(活性) in the target unit.",
        "code": "def convert_ck_mb_activity_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of CK-MB(活性) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the CK-MB(活性), CK-MB(活性), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of CK-MB(活性) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_creatinine_unit",
        "tool_name": "Creatinine, 肌酐",
        "description": "Convert Creatinine measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Creatinine in the target unit.",
        "code": "def convert_creatinine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Creatinine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['11.312', '0.011312', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Creatinine, 肌酐, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Creatinine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cellular_keratin_19_fragment_unit",
        "tool_name": "Cellular Keratin 19 Fragment, 细胞角蛋白19片段",
        "description": "Convert Cellular Keratin 19 Fragment measurements into the following units.\n\nunits list = ['µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'ng/mL']\n\nThe function returns the value of Cellular Keratin 19 Fragment in the target unit.",
        "code": "def convert_cellular_keratin_19_fragment_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cellular Keratin 19 Fragment from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'ng/mL']\n    factors = ['1', '10', '10', '10', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cellular Keratin 19 Fragment, 细胞角蛋白19片段, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cellular Keratin 19 Fragment from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'µg/dL', 'µg/100mL', 'ng%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cystatin_c_unit",
        "tool_name": "Cystatin C, 胱抑素C",
        "description": "Convert Cystatin C measurements into the following units.\n\nunits list = ['mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\nThe function returns the value of Cystatin C in the target unit.",
        "code": "def convert_cystatin_c_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cystatin C from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n    factors = ['0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cystatin C, 胱抑素C, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cystatin C from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cysteine_unit",
        "tool_name": "Cysteine, 半胱氨酸",
        "description": "Convert Cysteine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Cysteine in the target unit.",
        "code": "def convert_cysteine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cysteine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.0121154', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cysteine, 半胱氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cysteine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_cystine_unit",
        "tool_name": "Cystine, 胱氨酸",
        "description": "Convert Cystine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Cystine in the target unit.",
        "code": "def convert_cystine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Cystine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.024029', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Cystine, 胱氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Cystine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_D_dimer_unit",
        "tool_name": "D-dimer, D-二聚体",
        "description": "Convert D-dimer measurements into the following units.\n\nunits list = ['mg FEU/L', 'mg/L (DDU)', 'µg/L (DDU)', 'µg FEU/mL', 'ng FEU/mL', 'µg/mL (DDU)', 'ng/mL (DDU)']\n\nThe function returns the value of D-dimer in the target unit.",
        "code": "def convert_D_dimer_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of D-dimer from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mg FEU/L', 'mg/L (DDU)', 'µg/L (DDU)', 'µg FEU/mL', 'ng FEU/mL', 'µg/mL (DDU)', 'ng/mL (DDU)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mg FEU/L', 'mg/L (DDU)', 'µg/L (DDU)', 'µg FEU/mL', 'ng FEU/mL', 'µg/mL (DDU)', 'ng/mL (DDU)']\n    factors = ['1.0', '1.0*2', '0.001*2', '1.0', '0.001', '1.0*2', '0.001*2']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the D-dimer, D-二聚体, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of D-dimer from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mg FEU/L', 'mg/L (DDU)', 'µg/L (DDU)', 'µg FEU/mL', 'ng FEU/mL', 'µg/mL (DDU)', 'ng/mL (DDU)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_dehydroepiandrosterone_sulfate_unit",
        "tool_name": "Dehydroepiandrosterone sulfate, 硫酸脱氢表雄酮",
        "description": "Convert Dehydroepiandrosterone sulfate measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\nThe function returns the value of Dehydroepiandrosterone sulfate in the target unit.",
        "code": "def convert_dehydroepiandrosterone_sulfate_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Dehydroepiandrosterone sulfate from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n    factors = ['0.036846', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Dehydroepiandrosterone sulfate, 硫酸脱氢表雄酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Dehydroepiandrosterone sulfate from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_digitalis_toxin_unit",
        "tool_name": "Digitalis Toxin, 毛地黄毒苷",
        "description": "Convert Digitalis Toxin measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Digitalis Toxin in the target unit.",
        "code": "def convert_digitalis_toxin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Digitalis Toxin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.0764939', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Digitalis Toxin, 毛地黄毒苷, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Digitalis Toxin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_digoxin_unit",
        "tool_name": "Digoxin, 地高辛",
        "description": "Convert Digoxin measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Digoxin in the target unit.",
        "code": "def convert_digoxin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Digoxin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.0780949', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Digoxin, 地高辛, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Digoxin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_eosinophil_cationic_protein_unit",
        "tool_name": "Eosinophil cationic protein, 嗜酸性粒细胞阳离子蛋白",
        "description": "Convert Eosinophil cationic protein measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Eosinophil cationic protein in the target unit.",
        "code": "def convert_eosinophil_cationic_protein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Eosinophil cationic protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Eosinophil cationic protein, 嗜酸性粒细胞阳离子蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Eosinophil cationic protein from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_eosinophil_absolute_count_unit",
        "tool_name": "Eosinophil (Eosinophil Absolute Count), 嗜酸性粒细胞(嗜酸性粒细胞绝对计数)",
        "description": "Convert Eosinophil (Eosinophil Absolute Count) measurements into the following units.\n\nunits list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of Eosinophil (Eosinophil Absolute Count) in the target unit.",
        "code": "def convert_eosinophil_absolute_count_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Eosinophil (Eosinophil Absolute Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Eosinophil (Eosinophil Absolute Count), 嗜酸性粒细胞(嗜酸性粒细胞绝对计数), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Eosinophil (Eosinophil Absolute Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_eosinophil_unit",
        "tool_name": "Eosinophil, 嗜酸性粒细胞",
        "description": "Convert Eosinophil measurements into the following units.\n\nunits list = ['Proportion of 1.0', 'Fraction', '%']\n\nThe function returns the value of Eosinophil in the target unit.",
        "code": "def convert_eosinophil_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Eosinophil from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Eosinophil, 嗜酸性粒细胞, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Eosinophil from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_erythropoietin_unit",
        "tool_name": "Erythropoietin, 促红细胞生成素",
        "description": "Convert Erythropoietin measurements into the following units.\n\nunits list = ['mIU/mL', 'IU/L']\n\nThe function returns the value of Erythropoietin in the target unit.",
        "code": "def convert_erythropoietin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Erythropoietin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/mL', 'IU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Erythropoietin, 促红细胞生成素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Erythropoietin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_estradiol_unit",
        "tool_name": "Estradiol, 雌二醇",
        "description": "Convert Estradiol measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Estradiol in the target unit.",
        "code": "def convert_estradiol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Estradiol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.027238', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Estradiol, 雌二醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Estradiol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_free_estradiol_unit",
        "tool_name": "Free Estradiol, 游离雌三醇",
        "description": "Convert Free Estradiol measurements into the following units.\n\nunits list = ['mmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Free Estradiol in the target unit.",
        "code": "def convert_free_estradiol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Free Estradiol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.028839', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Free Estradiol, 游离雌三醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Free Estradiol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_estrone_unit",
        "tool_name": "Estrone, 雌酮",
        "description": "Convert Estrone measurements into the following units.\n\nunits list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\nThe function returns the value of Estrone in the target unit.",
        "code": "def convert_estrone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Estrone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n    factors = ['0.0270372', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Estrone, 雌酮, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Estrone from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'pg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ethanol_unit",
        "tool_name": "Ethanol, 乙醇",
        "description": "Convert Ethanol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Ethanol in the target unit.",
        "code": "def convert_ethanol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ethanol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['4.607', '0.004607', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ethanol, 乙醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ethanol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ethylene_glycol_unit",
        "tool_name": "Ethylene glycol, 乙二醇",
        "description": "Convert Ethylene glycol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Ethylene glycol in the target unit.",
        "code": "def convert_ethylene_glycol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ethylene glycol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['6.2068', '0.0062068', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ethylene glycol, 乙二醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ethylene glycol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_ferritin_unit",
        "tool_name": "Ferritin, 铁蛋白",
        "description": "Convert Ferritin measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'ng/mL']\n\nThe function returns the value of Ferritin in the target unit.",
        "code": "def convert_ferritin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Ferritin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'ng/mL']\n    factors = ['445', '0.445', '1', '10', '10', '10', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Ferritin, 铁蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Ferritin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%', 'ng/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_fibrinogen_unit",
        "tool_name": "Fibrinogen, 纤维蛋白原",
        "description": "Convert Fibrinogen measurements into the following units.\n\nunits list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Fibrinogen in the target unit.",
        "code": "def convert_fibrinogen_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Fibrinogen from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['100', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Fibrinogen, 纤维蛋白原, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Fibrinogen from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_folic_acid_unit",
        "tool_name": "Folic Acid, 叶酸盐",
        "description": "Convert Folic Acid measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\nThe function returns the value of Folic Acid in the target unit.",
        "code": "def convert_folic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Folic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n    factors = ['0.044', '0.000044', '0.1', '0.001', '0.001', '0.001', '0.0001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Folic Acid, 叶酸盐, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Folic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_folic_acid_unit",
        "tool_name": "Folic Acid, 叶酸",
        "description": "Convert Folic Acid measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Folic Acid in the target unit.",
        "code": "def convert_folic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Folic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.04414', '0.00004414', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Folic Acid, 叶酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Folic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_follicle_stimulating_hormone_unit",
        "tool_name": "Follicle-stimulating hormone (FSH), 卵泡刺激素 (FSH)",
        "description": "Convert Follicle-stimulating hormone (FSH) measurements into the following units.\n\nunits list = ['mIU/mL', 'IU/L']\n\nThe function returns the value of Follicle-stimulating hormone (FSH) in the target unit.",
        "code": "def convert_follicle_stimulating_hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Follicle-stimulating hormone (FSH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/mL', 'IU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Follicle-stimulating hormone (FSH), 卵泡刺激素 (FSH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Follicle-stimulating hormone (FSH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_free_human_chorionic_gonadotropin_beta_subunit_unit",
        "tool_name": "Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG), 游离人绒毛膜促性腺激素β亚基(游离βhCG)",
        "description": "Convert Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG) measurements into the following units.\n\nunits list = ['ng/mL', 'mIU/mL', 'IU/L']\n\nThe function returns the value of Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG) in the target unit.",
        "code": "def convert_free_human_chorionic_gonadotropin_beta_subunit_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'mIU/mL', 'IU/L']\n    factors = ['1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG), 游离人绒毛膜促性腺激素β亚基(游离βhCG), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Free Human Chorionic Gonadotropin Beta Subunit (Free βhCG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_fructosamine_unit",
        "tool_name": "Fructosamine, 果糖胺",
        "description": "Convert Fructosamine measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L']\n\nThe function returns the value of Fructosamine in the target unit.",
        "code": "def convert_fructosamine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Fructosamine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L']\n    factors = ['1.0', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Fructosamine, 果糖胺, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Fructosamine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_fructose_unit",
        "tool_name": "Fructose, 果糖",
        "description": "Convert Fructose measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Fructose in the target unit.",
        "code": "def convert_fructose_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Fructose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['18.016', '0.018016', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Fructose, 果糖, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Fructose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_galactose_unit",
        "tool_name": "Galactose, 半乳糖",
        "description": "Convert Galactose measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Galactose in the target unit.",
        "code": "def convert_galactose_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Galactose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['18.016', '0.018016', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Galactose, 半乳糖, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Galactose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_gamma_glutamyltransferase_unit",
        "tool_name": "Gamma-glutamyltransferase (GGT), γ-谷氨酰转肽酶(GGT)",
        "description": "Convert Gamma-glutamyltransferase (GGT) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Gamma-glutamyltransferase (GGT) in the target unit.",
        "code": "def convert_gamma_glutamyltransferase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Gamma-glutamyltransferase (GGT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Gamma-glutamyltransferase (GGT), γ-谷氨酰转肽酶(GGT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Gamma-glutamyltransferase (GGT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_gastrin_unit",
        "tool_name": "Gastrin, 胃泌素",
        "description": "Convert Gastrin measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'mU/L']\n\nThe function returns the value of Gastrin in the target unit.",
        "code": "def convert_gastrin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Gastrin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'mU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'mU/L']\n    factors = ['0.2098', '0.1', '0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Gastrin, 胃泌素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Gastrin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'ng/L', 'ng/dL', 'ng/100mL', 'ng%', 'mU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_gentamicin_unit",
        "tool_name": "Gentamicin, 庆大霉素",
        "description": "Convert Gentamicin measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Gentamicin in the target unit.",
        "code": "def convert_gentamicin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Gentamicin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0477596', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Gentamicin, 庆大霉素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Gentamicin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glucagon_unit",
        "tool_name": "Glucagon, 胰高血糖素",
        "description": "Convert Glucagon measurements into the following units.\n\nunits list = ['ng/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\nThe function returns the value of Glucagon in the target unit.",
        "code": "def convert_glucagon_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glucagon from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n    factors = ['0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glucagon, 胰高血糖素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glucagon from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/L', 'pg/mL', 'ng/dL', 'ng/100mL', 'ng%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glucose_unit",
        "tool_name": "Glucose, 葡萄糖",
        "description": "Convert Glucose measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Glucose in the target unit.",
        "code": "def convert_glucose_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glucose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['18.016', '0.018016', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glucose, 葡萄糖, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glucose from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glutamate_dehydrogenase_gldh_unit",
        "tool_name": "Glutamate Dehydrogenase (GLDH), 谷氨酸脱氢酶 (GLDH)",
        "description": "Convert Glutamate Dehydrogenase (GLDH) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Glutamate Dehydrogenase (GLDH) in the target unit.",
        "code": "def convert_glutamate_dehydrogenase_gldh_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glutamate Dehydrogenase (GLDH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glutamate Dehydrogenase (GLDH), 谷氨酸脱氢酶 (GLDH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glutamate Dehydrogenase (GLDH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glutamic_acid_glu_unit",
        "tool_name": "Glutamic Acid (Glu), 谷氨酸(Glu)",
        "description": "Convert Glutamic Acid (Glu) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Glutamic Acid (Glu) in the target unit.",
        "code": "def convert_glutamic_acid_glu_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glutamic Acid (Glu) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.014713', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glutamic Acid (Glu), 谷氨酸(Glu), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glutamic Acid (Glu) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glutamine_gln_unit",
        "tool_name": "Glutamine (Gln), 谷氨酰胺 (Gln)",
        "description": "Convert Glutamine (Gln) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Glutamine (Gln) in the target unit.",
        "code": "def convert_glutamine_gln_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glutamine (Gln) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.014615', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glutamine (Gln), 谷氨酰胺 (Gln), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glutamine (Gln) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_glycine_gly_unit",
        "tool_name": "Glycine (Gly), 甘氨酸(Gly)",
        "description": "Convert Glycine (Gly) measurements into the following units.\n\nunits list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Glycine (Gly) in the target unit.",
        "code": "def convert_glycine_gly_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Glycine (Gly) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.007507', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Glycine (Gly), 甘氨酸(Gly), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Glycine (Gly) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_growth_differentiation_factor_15_unit",
        "tool_name": "Growth Differentiation Factor-15 (GDF-15), 生长分化因子-15 (GDF-15)",
        "description": "Convert Growth Differentiation Factor-15 (GDF-15) measurements into the following units.\n\nunits list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Growth Differentiation Factor-15 (GDF-15) in the target unit.",
        "code": "def convert_growth_differentiation_factor_15_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Growth Differentiation Factor-15 (GDF-15) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Growth Differentiation Factor-15 (GDF-15), 生长分化因子-15 (GDF-15), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Growth Differentiation Factor-15 (GDF-15) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_globulin_unit",
        "tool_name": "Globulin, 结合珠蛋白",
        "description": "Convert Globulin measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Globulin in the target unit.",
        "code": "def convert_globulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Globulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.1000', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Globulin, 结合珠蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Globulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_human_epididymis_protein_4_unit",
        "tool_name": "Human Epididymis Protein 4 (HE4), 人附睾蛋白4(HE4)",
        "description": "Convert Human Epididymis Protein 4 (HE4) measurements into the following units.\n\nunits list = ['nmol/L', 'pmol/L']\n\nThe function returns the value of Human Epididymis Protein 4 (HE4) in the target unit.",
        "code": "def convert_human_epididymis_protein_4_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Human Epididymis Protein 4 (HE4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'pmol/L']\n    factors = ['1.0', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Human Epididymis Protein 4 (HE4), 人附睾蛋白4(HE4), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Human Epididymis Protein 4 (HE4) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'pmol/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_hematocrit_hct_unit",
        "tool_name": "Hematocrit (HCT), 血细胞比容(HCT)",
        "description": "Convert Hematocrit (HCT) measurements into the following units.\n\nunits list = ['L/L', 'Proportion of 1.0', 'volume fraction', '%']\n\nThe function returns the value of Hematocrit (HCT) in the target unit.",
        "code": "def convert_hematocrit_hct_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Hematocrit (HCT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['L/L', 'Proportion of 1.0', 'volume fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['L/L', 'Proportion of 1.0', 'volume fraction', '%']\n    factors = ['1', '1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Hematocrit (HCT), 血细胞比容(HCT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Hematocrit (HCT) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['L/L', 'Proportion of 1.0', 'volume fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_hemoglobin_hgb_unit",
        "tool_name": "Hemoglobin (HGB), 血红蛋白 (HGB)",
        "description": "Convert Hemoglobin (HGB) measurements into the following units.\n\nunits list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Hemoglobin (HGB) in the target unit.",
        "code": "def convert_hemoglobin_hgb_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Hemoglobin (HGB) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Hemoglobin (HGB), 血红蛋白 (HGB), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Hemoglobin (HGB) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_hemoglobin_subunit_unit",
        "tool_name": "Hemoglobin Subunit, 血红蛋白单体(亚基)",
        "description": "Convert Hemoglobin Subunit measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Hemoglobin Subunit in the target unit.",
        "code": "def convert_hemoglobin_subunit_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Hemoglobin Subunit from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['1.6114', '0.0016114', '0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Hemoglobin Subunit, 血红蛋白单体(亚基), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Hemoglobin Subunit from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_hemoglobin_tetramer_unit",
        "tool_name": "Hemoglobin Tetramer, 血红蛋白四聚体",
        "description": "Convert Hemoglobin Tetramer measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\nThe function returns the value of Hemoglobin Tetramer in the target unit.",
        "code": "def convert_hemoglobin_tetramer_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Hemoglobin Tetramer from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n    factors = ['6.4458', '0.0064458', '0.1', '1.0', '1.0', '1.0', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Hemoglobin Tetramer, 血红蛋白四聚体, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Hemoglobin Tetramer from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'g/L', 'g/dL', 'g/100mL', 'g%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_histidine_his_unit",
        "tool_name": "Histidine (His), 组氨酸(His)",
        "description": "Convert Histidine (His) measurements into the following units.\n\nunits list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Histidine (His) in the target unit.",
        "code": "def convert_histidine_his_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Histidine (His) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.015516', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Histidine (His), 组氨酸(His), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Histidine (His) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_homocysteine_hcy_unit",
        "tool_name": "Homocysteine (HCY), 同型半胱氨酸 (HCY)",
        "description": "Convert Homocysteine (HCY) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Homocysteine (HCY) in the target unit.",
        "code": "def convert_homocysteine_hcy_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Homocysteine (HCY) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.013518', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Homocysteine (HCY), 同型半胱氨酸 (HCY), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Homocysteine (HCY) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_human_chorionic_gonadotropin_unit",
        "tool_name": "Human Chorionic Gonadotropin (hCG), 人绒毛膜促性腺激素 (hCG)",
        "description": "Convert Human Chorionic Gonadotropin (hCG) measurements into the following units.\n\nunits list = ['mIU/mL', 'IU/L']\n\nThe function returns the value of Human Chorionic Gonadotropin (hCG) in the target unit.",
        "code": "def convert_human_chorionic_gonadotropin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Human Chorionic Gonadotropin (hCG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/mL', 'IU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Human Chorionic Gonadotropin (hCG), 人绒毛膜促性腺激素 (hCG), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Human Chorionic Gonadotropin (hCG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_human_growth_hormone_unit",
        "tool_name": "Human Growth Hormone (hGH), 人类生长激素(hGH)",
        "description": "Convert Human Growth Hormone (hGH) measurements into the following units.\n\nunits list = ['mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\nThe function returns the value of Human Growth Hormone (hGH) in the target unit.",
        "code": "def convert_human_growth_hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Human Growth Hormone (hGH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n    factors = ['0.0333', '0.1', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Human Growth Hormone (hGH), 人类生长激素(hGH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Human Growth Hormone (hGH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_insulin_like_growth_factor_1_unit",
        "tool_name": "Insulin-like Growth Factor 1 (IGF-1), 胰岛素样生长因子1(IGF-1)",
        "description": "Convert Insulin-like Growth Factor 1 (IGF-1) measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of Insulin-like Growth Factor 1 (IGF-1) in the target unit.",
        "code": "def convert_insulin_like_growth_factor_1_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Insulin-like Growth Factor 1 (IGF-1) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.7649', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Insulin-like Growth Factor 1 (IGF-1), 胰岛素样生长因子1(IGF-1), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Insulin-like Growth Factor 1 (IGF-1) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_immunoglobulin_a_unit",
        "tool_name": "Immunoglobulin A (IgA), 免疫球蛋白 A (IgA)",
        "description": "Convert Immunoglobulin A (IgA) measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Immunoglobulin A (IgA) in the target unit.",
        "code": "def convert_immunoglobulin_a_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Immunoglobulin A (IgA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.160', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Immunoglobulin A (IgA), 免疫球蛋白 A (IgA), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Immunoglobulin A (IgA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_immunoglobulin_e_unit",
        "tool_name": "Immunoglobulin E (IgE), 免疫球蛋白 E (IgE)",
        "description": "Convert Immunoglobulin E (IgE) measurements into the following units.\n\nunits list = ['IU/mL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\nThe function returns the value of Immunoglobulin E (IgE) in the target unit.",
        "code": "def convert_immunoglobulin_e_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Immunoglobulin E (IgE) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['IU/mL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n    factors = ['0.240', '0.1', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Immunoglobulin E (IgE), 免疫球蛋白 E (IgE), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Immunoglobulin E (IgE) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['IU/mL', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_immunoglobulin_g_unit",
        "tool_name": "Immunoglobulin G (IgG), 免疫球蛋白 G (IgG)",
        "description": "Convert Immunoglobulin G (IgG) measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Immunoglobulin G (IgG) in the target unit.",
        "code": "def convert_immunoglobulin_g_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Immunoglobulin G (IgG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.1499', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Immunoglobulin G (IgG), 免疫球蛋白 G (IgG), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Immunoglobulin G (IgG) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_immunoglobulin_m_unit",
        "tool_name": "Immunoglobulin M (IgM), 免疫球蛋白 M (IgM)",
        "description": "Convert Immunoglobulin M (IgM) measurements into the following units.\n\nunits list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Immunoglobulin M (IgM) in the target unit.",
        "code": "def convert_immunoglobulin_m_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Immunoglobulin M (IgM) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['0.971', '1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Immunoglobulin M (IgM), 免疫球蛋白 M (IgM), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Immunoglobulin M (IgM) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_insulin_unit",
        "tool_name": "Insulin, 胰岛素",
        "description": "Convert Insulin measurements into the following units.\n\nunits list = ['pmol/L', 'µIU/mL', 'mIU/L']\n\nThe function returns the value of Insulin in the target unit.",
        "code": "def convert_insulin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Insulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'µIU/mL', 'mIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'µIU/mL', 'mIU/L']\n    factors = ['0.144', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Insulin, 胰岛素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Insulin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'µIU/mL', 'mIU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_interleukin_6_unit",
        "tool_name": "Interleukin-6 (IL-6), 白细胞介素-6 (IL-6)",
        "description": "Convert Interleukin-6 (IL-6) measurements into the following units.\n\nunits list = ['pg/mL', 'pg/dL', 'pg/100mL', 'µg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Interleukin-6 (IL-6) in the target unit.",
        "code": "def convert_interleukin_6_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Interleukin-6 (IL-6) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'µg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pg/mL', 'pg/dL', 'pg/100mL', 'µg%', 'pg/L', 'ng/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Interleukin-6 (IL-6), 白细胞介素-6 (IL-6), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Interleukin-6 (IL-6) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'µg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_iron_fe_unit",
        "tool_name": "Iron (Fe), 铁(Fe)",
        "description": "Convert Iron (Fe) measurements into the following units.\n\nunits list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\nThe function returns the value of Iron (Fe) in the target unit.",
        "code": "def convert_iron_fe_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Iron (Fe) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n    factors = ['5.5845', '5584.5', '1.0', '1.0', '1.0', '0.1', '0.1', '100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Iron (Fe), 铁(Fe), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Iron (Fe) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_iron_binding_capacity_unit",
        "tool_name": "Total Iron Binding Capacity (TIBC), 总铁结合力 (TIBC)",
        "description": "Convert Total Iron Binding Capacity (TIBC) measurements into the following units.\n\nunits list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\nThe function returns the value of Total Iron Binding Capacity (TIBC) in the target unit.",
        "code": "def convert_total_iron_binding_capacity_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Total Iron Binding Capacity (TIBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n    factors = ['5.5845', '5584.5', '1.0', '1.0', '1.0', '0.1', '0.1', '100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Total Iron Binding Capacity (TIBC), 总铁结合力 (TIBC), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Total Iron Binding Capacity (TIBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_unsaturated_iron_binding_capacity_unit",
        "tool_name": "Unsaturated Iron Binding Capacity (UIBC), 不饱和铁结合力(UIBC)",
        "description": "Convert Unsaturated Iron Binding Capacity (UIBC) measurements into the following units.\n\nunits list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\nThe function returns the value of Unsaturated Iron Binding Capacity (UIBC) in the target unit.",
        "code": "def convert_unsaturated_iron_binding_capacity_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Unsaturated Iron Binding Capacity (UIBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n    factors = ['5.5845', '5584,5', '1.0', '1.0', '1.0', '0.1', '0.1', '100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Unsaturated Iron Binding Capacity (UIBC), 不饱和铁结合力(UIBC), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Unsaturated Iron Binding Capacity (UIBC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mmol/L', 'µg/dL', 'µg/100mL', 'µg%', 'µg/L', 'ng/mL', 'mg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_isoleucine_ile_unit",
        "tool_name": "Isoleucine (Ile), 异亮氨酸(Ile)",
        "description": "Convert Isoleucine (Ile) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Isoleucine (Ile) in the target unit.",
        "code": "def convert_isoleucine_ile_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Isoleucine (Ile) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.013118', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Isoleucine (Ile), 异亮氨酸(Ile), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Isoleucine (Ile) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_isopropyl_alcohol_unit",
        "tool_name": "Isopropyl alcohol, 异丙醇",
        "description": "Convert Isopropyl alcohol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Isopropyl alcohol in the target unit.",
        "code": "def convert_isopropyl_alcohol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Isopropyl alcohol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['6.0096', '0.0060096', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Isopropyl alcohol, 异丙醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Isopropyl alcohol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_kappa_light_chain_unit",
        "tool_name": "κ light chain, κ轻链",
        "description": "Convert κ light chain measurements into the following units.\n\nunits list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of κ light chain in the target unit.",
        "code": "def convert_kappa_light_chain_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of κ light chain from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the κ light chain, κ轻链, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of κ light chain from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lactic_acid_unit",
        "tool_name": "Lactic Acid, 乳酸",
        "description": "Convert Lactic Acid measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Lactic Acid in the target unit.",
        "code": "def convert_lactic_acid_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lactic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['9.008', '0.009008', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lactic Acid, 乳酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lactic Acid from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lactate_dehydrogenase_unit",
        "tool_name": "Lactate Dehydrogenase (LDH), 乳酸脱氢酶 (LDH)",
        "description": "Convert Lactate Dehydrogenase (LDH) measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Lactate Dehydrogenase (LDH) in the target unit.",
        "code": "def convert_lactate_dehydrogenase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lactate Dehydrogenase (LDH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lactate Dehydrogenase (LDH), 乳酸脱氢酶 (LDH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lactate Dehydrogenase (LDH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lambda_light_chain_unit",
        "tool_name": "λ light chain, λ轻链",
        "description": "Convert λ light chain measurements into the following units.\n\nunits list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of λ light chain in the target unit.",
        "code": "def convert_lambda_light_chain_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of λ light chain from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['1', '0.01', '0.01', '0.01', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the λ light chain, λ轻链, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of λ light chain from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_leucine_leu_unit",
        "tool_name": "Leucine (Leu), 亮氨酸 (Leu)",
        "description": "Convert Leucine (Leu) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Leucine (Leu) in the target unit.",
        "code": "def convert_leucine_leu_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Leucine (Leu) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.013118', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Leucine (Leu), 亮氨酸 (Leu), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Leucine (Leu) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lidocaine_unit",
        "tool_name": "Lidocaine, 利多卡因",
        "description": "Convert Lidocaine measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Lidocaine in the target unit.",
        "code": "def convert_lidocaine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lidocaine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.023434', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lidocaine, 利多卡因, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lidocaine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lipase_unit",
        "tool_name": "Lipase, 脂肪酶",
        "description": "Convert Lipase measurements into the following units.\n\nunits list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\nThe function returns the value of Lipase in the target unit.",
        "code": "def convert_lipase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lipase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n    factors = ['0.06', '60.0', '0.06', '60.0', '1', '1', '1', '0.01666666', '16.67']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lipase, 脂肪酶, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lipase from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nkat/L', 'µkat/L', 'nmol/(s•L)', 'µmol/(s•L)', 'U/L', 'IU/L', 'µmol/(min•L)', 'µmol/(h•L)', 'µmol/(h•mL)']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lipopolysaccharide_binding_protein_unit",
        "tool_name": "Lipopolysaccharide-binding protein (LBP), 脂多糖结合蛋白 (LBP)",
        "description": "Convert Lipopolysaccharide-binding protein (LBP) measurements into the following units.\n\nunits list = ['µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Lipopolysaccharide-binding protein (LBP) in the target unit.",
        "code": "def convert_lipopolysaccharide_binding_protein_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lipopolysaccharide-binding protein (LBP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lipopolysaccharide-binding protein (LBP), 脂多糖结合蛋白 (LBP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lipopolysaccharide-binding protein (LBP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lipoprotein_a_unit",
        "tool_name": "Lipoprotein(a), 脂蛋白(a)",
        "description": "Convert Lipoprotein(a) measurements into the following units.\n\nunits list = ['g/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\nThe function returns the value of Lipoprotein(a) in the target unit.",
        "code": "def convert_lipoprotein_a_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lipoprotein(a) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['g/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n    factors = ['100', '0.1', '1.0', '1.0', '1.0', '100']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lipoprotein(a), 脂蛋白(a), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lipoprotein(a) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['g/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lithium_Li_unit",
        "tool_name": "Lithium (Li), 锂 (Li)",
        "description": "Convert Lithium (Li) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\nThe function returns the value of Lithium (Li) in the target unit.",
        "code": "def convert_lithium_Li_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lithium (Li) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n    factors = ['0.694', '0.000694', '1.0', '1.0', '1.0', '0.1', '0.1', '0.694']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lithium (Li), 锂 (Li), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lithium (Li) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEq/l']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_luteinizing_hormone_unit",
        "tool_name": "Luteinizing Hormone (LH), 黄体生成素 (LH)",
        "description": "Convert Luteinizing Hormone (LH) measurements into the following units.\n\nunits list = ['mIU/mL', 'IU/L']\n\nThe function returns the value of Luteinizing Hormone (LH) in the target unit.",
        "code": "def convert_luteinizing_hormone_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Luteinizing Hormone (LH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mIU/mL', 'IU/L']\n    factors = ['1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Luteinizing Hormone (LH), 黄体生成素 (LH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Luteinizing Hormone (LH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mIU/mL', 'IU/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lymphocyte_absolute_count_unit",
        "tool_name": "Lymphocyte (Lymphocyte Absolute Count), 淋巴细胞(淋巴细胞绝对计数)",
        "description": "Convert Lymphocyte (Lymphocyte Absolute Count) measurements into the following units.\n\nunits list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of Lymphocyte (Lymphocyte Absolute Count) in the target unit.",
        "code": "def convert_lymphocyte_absolute_count_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lymphocyte (Lymphocyte Absolute Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lymphocyte (Lymphocyte Absolute Count), 淋巴细胞(淋巴细胞绝对计数), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lymphocyte (Lymphocyte Absolute Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lymphocyte_unit",
        "tool_name": "Lymphocyte, 淋巴细胞 (LYMPH)",
        "description": "Convert Lymphocyte measurements into the following units.\n\nunits list = ['Proportion of 1.0', 'Fraction', '%']\n\nThe function returns the value of Lymphocyte in the target unit.",
        "code": "def convert_lymphocyte_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lymphocyte from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lymphocyte, 淋巴细胞 (LYMPH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lymphocyte from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_lysine_unit",
        "tool_name": "Lysine, 赖氨酸",
        "description": "Convert Lysine measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Lysine in the target unit.",
        "code": "def convert_lysine_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Lysine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.014619', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Lysine, 赖氨酸, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Lysine from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_macroprolactinemia_unit",
        "tool_name": "Macroprolactinemia, 巨泌乳素",
        "description": "Convert Macroprolactinemia measurements into the following units.\n\nunits list = ['Fraction', '%']\n\nThe function returns the value of Macroprolactinemia in the target unit.",
        "code": "def convert_macroprolactinemia_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Macroprolactinemia from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Fraction', '%']\n    factors = ['1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Macroprolactinemia, 巨泌乳素, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Macroprolactinemia from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_magnesium_unit",
        "tool_name": "Magnesium, 镁",
        "description": "Convert Magnesium measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEg/L']\n\nThe function returns the value of Magnesium in the target unit.",
        "code": "def convert_magnesium_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Magnesium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEg/L']\n    factors = ['2.4305', '0.0024305', '1.0', '1.0', '1.0', '0.1', '0.1', '1.21525']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Magnesium, 镁, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Magnesium from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL', 'mEg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_mean_corpuscular_hemoglobin_concentration_unit",
        "tool_name": "Mean Corpuscular Hemoglobin Concentration (MCHC), 平均红细胞血红蛋白含量",
        "description": "Convert Mean Corpuscular Hemoglobin Concentration (MCHC) measurements into the following units.\n\nunits list = ['fmol', 'fmol/cell', 'pg', 'pg/cell']\n\nThe function returns the value of Mean Corpuscular Hemoglobin Concentration (MCHC) in the target unit.",
        "code": "def convert_mean_corpuscular_hemoglobin_concentration_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Mean Corpuscular Hemoglobin Concentration (MCHC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fmol', 'fmol/cell', 'pg', 'pg/cell']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['fmol', 'fmol/cell', 'pg', 'pg/cell']\n    factors = ['16.114', '16.114', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Mean Corpuscular Hemoglobin Concentration (MCHC), 平均红细胞血红蛋白含量, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Mean Corpuscular Hemoglobin Concentration (MCHC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fmol', 'fmol/cell', 'pg', 'pg/cell']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_mean_corpuscular_hemoglobin_concentration_unit",
        "tool_name": "Mean Corpuscular Hemoglobin Concentration (MCHC), 平均红细胞血红蛋白浓度",
        "description": "Convert Mean Corpuscular Hemoglobin Concentration (MCHC) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL', '%']\n\nThe function returns the value of Mean Corpuscular Hemoglobin Concentration (MCHC) in the target unit.",
        "code": "def convert_mean_corpuscular_hemoglobin_concentration_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Mean Corpuscular Hemoglobin Concentration (MCHC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL', '%']\n    factors = ['1.6114', '0.0016114', '0.1', '1.0', '1.0', '1.0', '0.1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Mean Corpuscular Hemoglobin Concentration (MCHC), 平均红细胞血红蛋白浓度, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Mean Corpuscular Hemoglobin Concentration (MCHC) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/mL', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_mean_corpuscular_volume_unit",
        "tool_name": "Mean Corpuscular Volume (MCV), 平均红细胞体积",
        "description": "Convert Mean Corpuscular Volume (MCV) measurements into the following units.\n\nunits list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\nThe function returns the value of Mean Corpuscular Volume (MCV) in the target unit.",
        "code": "def convert_mean_corpuscular_volume_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Mean Corpuscular Volume (MCV) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n    factors = ['1', '1', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Mean Corpuscular Volume (MCV), 平均红细胞体积, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Mean Corpuscular Volume (MCV) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_methanol_unit",
        "tool_name": "Methanol, 甲醇",
        "description": "Convert Methanol measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Methanol in the target unit.",
        "code": "def convert_methanol_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Methanol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['3', '0.0032041998087734', '1', '1', '1', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Methanol, 甲醇, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Methanol from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_methionine_met_unit",
        "tool_name": "Methionine (Met), 蛋氨酸(Met)",
        "description": "Convert Methionine (Met) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Methionine (Met) in the target unit.",
        "code": "def convert_methionine_met_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Methionine (Met) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.014921', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Methionine (Met), 蛋氨酸(Met), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Methionine (Met) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_absolute_monocyte_count_unit",
        "tool_name": "Monocyte (Absolute Monocyte Count), 单核细胞(绝对单核细胞计数)",
        "description": "Convert Monocyte (Absolute Monocyte Count) measurements into the following units.\n\nunits list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of Monocyte (Absolute Monocyte Count) in the target unit.",
        "code": "def convert_absolute_monocyte_count_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Monocyte (Absolute Monocyte Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Monocyte (Absolute Monocyte Count), 单核细胞(绝对单核细胞计数), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Monocyte (Absolute Monocyte Count) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_monocyte_unit",
        "tool_name": "Monocyte, 单核细胞",
        "description": "Convert Monocyte measurements into the following units.\n\nunits list = ['Proportion of 1.0', 'Fraction', '%']\n\nThe function returns the value of Monocyte in the target unit.",
        "code": "def convert_monocyte_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Monocyte from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Monocyte, 单核细胞, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Monocyte from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_mean_platelet_volume_unit",
        "tool_name": "Mean Platelet Volume, 平均血小板体积",
        "description": "Convert Mean Platelet Volume measurements into the following units.\n\nunits list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\nThe function returns the value of Mean Platelet Volume in the target unit.",
        "code": "def convert_mean_platelet_volume_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Mean Platelet Volume from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n    factors = ['1', '1', '1', '1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Mean Platelet Volume, 平均血小板体积, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Mean Platelet Volume from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['fL', 'µm^3', 'cu µm', 'cubic µm']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_myoglobin_unit",
        "tool_name": "Myoglobin, 肌红蛋白",
        "description": "Convert Myoglobin measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Myoglobin in the target unit.",
        "code": "def convert_myoglobin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Myoglobin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['1.75', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Myoglobin, 肌红蛋白, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Myoglobin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_N1_Methylnicotinamide_Nicotinic_Acid_Metabolite_unit",
        "tool_name": "N1-Methylnicotinamide (Nicotinic Acid Metabolite), N1-甲基烟酰胺(烟酸代谢物)",
        "description": "Convert N1-Methylnicotinamide (Nicotinic Acid Metabolite) measurements into the following units.\n\nunits list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\nThe function returns the value of N1-Methylnicotinamide (Nicotinic Acid Metabolite) in the target unit.",
        "code": "def convert_N1_Methylnicotinamide_Nicotinic_Acid_Metabolite_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of N1-Methylnicotinamide (Nicotinic Acid Metabolite) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n    factors = ['0.0137162', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the N1-Methylnicotinamide (Nicotinic Acid Metabolite), N1-甲基烟酰胺(烟酸代谢物), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of N1-Methylnicotinamide (Nicotinic Acid Metabolite) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['nmol/L', 'ng/mL', 'µg/L', 'µg/dL', 'µg/100mL', 'µg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_neuro_specific_enolase_unit",
        "tool_name": "Neuro-specific enolase (NSE), 神经元特异性烯醇化酶 (NSE)",
        "description": "Convert Neuro-specific enolase (NSE) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Neuro-specific enolase (NSE) in the target unit.",
        "code": "def convert_neuro_specific_enolase_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Neuro-specific enolase (NSE) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Neuro-specific enolase (NSE), 神经元特异性烯醇化酶 (NSE), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Neuro-specific enolase (NSE) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_neutrophil_absolute_value_unit",
        "tool_name": "Neutrophil (Neutrophil Absolute Value), 中性粒细胞(中性粒细胞绝对值)",
        "description": "Convert Neutrophil (Neutrophil Absolute Value) measurements into the following units.\n\nunits list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\nThe function returns the value of Neutrophil (Neutrophil Absolute Value) in the target unit.",
        "code": "def convert_neutrophil_absolute_value_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Neutrophil (Neutrophil Absolute Value) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Neutrophil (Neutrophil Absolute Value), 中性粒细胞(中性粒细胞绝对值), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Neutrophil (Neutrophil Absolute Value) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['10^9/L', 'G/L', 'Gpt/L', 'cells/L', '10^3/µL', '10^3/mm^3', 'K/µL', 'K/mm^3', 'cells/µL', 'cells/mm^3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_neutrophil_unit",
        "tool_name": "Neutrophil, 中性粒细胞(NEUT)",
        "description": "Convert Neutrophil measurements into the following units.\n\nunits list = ['Proportion of 1.0', 'Fraction', '%']\n\nThe function returns the value of Neutrophil in the target unit.",
        "code": "def convert_neutrophil_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Neutrophil from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['Proportion of 1.0', 'Fraction', '%']\n    factors = ['1', '1', '0.01']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Neutrophil, 中性粒细胞(NEUT), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Neutrophil from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['Proportion of 1.0', 'Fraction', '%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_n_terminal_pro_b_type_natriuretic_peptide_unit",
        "tool_name": "N-terminal pro-B-type natriuretic peptide (NT-proBNP), N末端B型利钠肽原(NT-proBNP)",
        "description": "Convert N-terminal pro-B-type natriuretic peptide (NT-proBNP) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of N-terminal pro-B-type natriuretic peptide (NT-proBNP) in the target unit.",
        "code": "def convert_n_terminal_pro_b_type_natriuretic_peptide_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of N-terminal pro-B-type natriuretic peptide (NT-proBNP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.8457', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the N-terminal pro-B-type natriuretic peptide (NT-proBNP), N末端B型利钠肽原(NT-proBNP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of N-terminal pro-B-type natriuretic peptide (NT-proBNP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_n_acetylprocainamide_napa_unit",
        "tool_name": "N-Acetylprocainamide (NAPA), N-乙酰普鲁卡因酰胺(NAPA)",
        "description": "Convert N-Acetylprocainamide (NAPA) measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of N-Acetylprocainamide (NAPA) in the target unit.",
        "code": "def convert_n_acetylprocainamide_napa_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of N-Acetylprocainamide (NAPA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0277362', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the N-Acetylprocainamide (NAPA), N-乙酰普鲁卡因酰胺(NAPA), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of N-Acetylprocainamide (NAPA) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_bone_calcification_ocn_unit",
        "tool_name": "Bone Calcification (OCN), 骨钙素(OCN)",
        "description": "Convert Bone Calcification (OCN) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\nThe function returns the value of Bone Calcification (OCN) in the target unit.",
        "code": "def convert_bone_calcification_ocn_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Bone Calcification (OCN) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Bone Calcification (OCN), 骨钙素(OCN), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Bone Calcification (OCN) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'ng/L', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_total_type_i_collagen_amino_terminal_extension_peptide_tp1np_unit",
        "tool_name": "Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP), 总Ⅰ型前胶原氨基端延长肽(TP1NP)",
        "description": "Convert Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP) measurements into the following units.\n\nunits list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\nThe function returns the value of Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP) in the target unit.",
        "code": "def convert_total_type_i_collagen_amino_terminal_extension_peptide_tp1np_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP), 总Ⅰ型前胶原氨基端延长肽(TP1NP), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Total Type I Collagen Amino-Terminal Extension Peptide (TP1NP) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['ng/mL', 'ng/dL', 'ng/100mL', 'ng%', 'µg/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_pantothenic_acid_vitamin_b5_unit",
        "tool_name": "Pantothenic Acid (Vitamin B5), 泛酸(维生素 B5)",
        "description": "Convert Pantothenic Acid (Vitamin B5) measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Pantothenic Acid (Vitamin B5) in the target unit.",
        "code": "def convert_pantothenic_acid_vitamin_b5_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Pantothenic Acid (Vitamin B5) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.021924', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Pantothenic Acid (Vitamin B5), 泛酸(维生素 B5), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Pantothenic Acid (Vitamin B5) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_parathyroid_hormone_pth_unit",
        "tool_name": "Parathyroid Hormone (PTH), 甲状旁腺激素(PTH)",
        "description": "Convert Parathyroid Hormone (PTH) measurements into the following units.\n\nunits list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Parathyroid Hormone (PTH) in the target unit.",
        "code": "def convert_parathyroid_hormone_pth_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Parathyroid Hormone (PTH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.943', '0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Parathyroid Hormone (PTH), 甲状旁腺激素(PTH), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Parathyroid Hormone (PTH) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pmol/L', 'pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_phenobarbital_unit",
        "tool_name": "Phenobarbital, 苯巴比妥",
        "description": "Convert Phenobarbital measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Phenobarbital in the target unit.",
        "code": "def convert_phenobarbital_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Phenobarbital from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0232235', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Phenobarbital, 苯巴比妥, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Phenobarbital from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_phenylalanine_phe_unit",
        "tool_name": "Phenylalanine (Phe), 苯丙氨酸(phe)",
        "description": "Convert Phenylalanine (Phe) measurements into the following units.\n\nunits list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Phenylalanine (Phe) in the target unit.",
        "code": "def convert_phenylalanine_phe_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Phenylalanine (Phe) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['0.016519', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Phenylalanine (Phe), 苯丙氨酸(phe), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Phenylalanine (Phe) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_phenytoin_unit",
        "tool_name": "Phenytoin, 苯妥英",
        "description": "Convert Phenytoin measurements into the following units.\n\nunits list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\nThe function returns the value of Phenytoin in the target unit.",
        "code": "def convert_phenytoin_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Phenytoin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n    factors = ['0.0252268', '0.1', '0.1', '1.0', '1.0', '1.0']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Phenytoin, 苯妥英, {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Phenytoin from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['µmol/L', 'µg/mL', 'mg/L', 'mg/dL', 'mg/100mL', 'mg%']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_phosphorus_p_unit",
        "tool_name": "Phosphorus (P), 磷 (P)",
        "description": "Convert Phosphorus (P) measurements into the following units.\n\nunits list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\nThe function returns the value of Phosphorus (P) in the target unit.",
        "code": "def convert_phosphorus_p_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Phosphorus (P) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n    factors = ['3.1', '0.0031', '1.0', '1.0', '1.0', '0.1', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Phosphorus (P), 磷 (P), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Phosphorus (P) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['mmol/L', 'µmol/L', 'mg/dL', 'mg/100mL', 'mg%', 'mg/L', 'µg/mL']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_platelet_unit",
        "tool_name": "Platelet, 血小板(血小板)",
        "description": "Convert Platelet measurements into the following units.\n\nunits list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'K/µL', 'K/mm3', 'cells/µL', 'cells/mm3']\n\nThe function returns the value of Platelet in the target unit.",
        "code": "def convert_platelet_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Platelet from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'K/µL', 'K/mm3', 'cells/µL', 'cells/mm3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'K/µL', 'K/mm3', 'cells/µL', 'cells/mm3']\n    factors = ['1', '1', '1', '0.000000001', '1', '1', '1', '1', '0.001', '0.001']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Platelet, 血小板(血小板), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Platelet from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['109/L', 'G/L', 'Gpt/L', 'cells/L', '103/µL', '103/mm3', 'K/µL', 'K/mm3', 'cells/µL', 'cells/mm3']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    },
    {
        "function_name": "convert_placental_growth_factor_unit",
        "tool_name": "Placental Growth Factor (PIGF), 胎盘生长因子(PIGF)",
        "description": "Convert Placental Growth Factor (PIGF) measurements into the following units.\n\nunits list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\nThe function returns the value of Placental Growth Factor (PIGF) in the target unit.",
        "code": "def convert_placental_growth_factor_unit(input_value, input_unit, target_unit):\n    \"\"\"\n    Convert the value of Placental Growth Factor (PIGF) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit.\n    \"\"\"\n\n    units = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n    factors = ['0.1', '0.001', '0.001', '0.001', '0.0001', '0.1']\n    factors = [float(i) for i in factors]\n    target_value = input_value * factors[input_unit] / factors[target_unit]\n\n    return f\"For the Placental Growth Factor (PIGF), 胎盘生长因子(PIGF), {input_value} {units[input_unit]} is equal to {target_value} {units[target_unit]}\"\n",
        "docstring": "Convert the value of Placental Growth Factor (PIGF) from the input_unit to the target_unit and print the conversion result in natural language.\n    units list = ['pg/mL', 'pg/dL', 'pg/100mL', 'pg%', 'pg/L', 'ng/L']\n\n    Parameters:\n        - input_value (float): The numeric value to convert.\n        - input_unit (int): The index of the unit for the input_value in the units list.\n        - target_unit (int): The index of the unit to which the value is to be converted(target_unit) in the units list.\n\n    Returns:\n        - str: A string stating the conversion result in a natural language format.\n\n    Notes:\n        - The `units` list is defined with the names of each unit as strings, corresponding to the indices used in input_unit and target_unit.\n        - The `factors` list is defined with numeric values that represent the conversion factors from each unit to a common base unit."
    }
]