[
    {
        "tool_name": "ARISCAT Score for Postoperative Pulmonary Complications",
        "function_name": "calculate_ariscat_score",
        "description": "The ARISCAT score is a tool used to assess the risk of postoperative pulmonary complications (PPCs) in patients undergoing surgery. It evaluates seven preoperative factors, including age, preoperative oxygen saturation, respiratory infection in the last month, anemia, and type of surgery, to predict the likelihood of PPCs. This scoring system helps healthcare providers identify high-risk patients, enabling targeted preventive measures to reduce complications.",
        "formula": "Addition of the selected points:\nVariable\nPoints\nAge, years\n≤50\n0\n51-80\n3\n>80\n16\nPreoperative SpO_2\n≥96%\n0\n91-95%\n8\n≤90%\n24\nRespiratory infection in the last month*\nNo\n0\nYes\n17\nPreoperative anemia (Hgb ≤10 g/dL)\nNo\n0\nYes\n11\nSurgical incision\nPeripheral\n0\nUpper abdominal\n15\nIntrathoracic\n24\nDuration of surgery\n<2 hrs\n0\n2-3 hrs\n16\n>3 hrs\n23\nEmergency procedure\nNo\n0\nYes\n8\n*Either upper or lower (i.e., URI, bronchitis, pneumonia), with fever and antibiotic treatment",
        "code": "def calculate_ariscat_score(age, spo2, respiratory_infection, anemia, surgical_incision, surgery_duration, emergency):\n    \"\"\"\n    Calculate the ARISCAT Score for Postoperative Pulmonary Complications.\n    This score helps predict the risk of pulmonary complications in patients undergoing surgery under general, neuraxial, or regional anesthesia.\n\n    Parameters:\n    age (int): Patient's age in years.\n    spo2 (int): Preoperative oxygen saturation (SpO2) percentage.\n    respiratory_infection (int): Indicates the presence of respiratory infection in the last month. 0 for 'No', 1 for 'Yes'.\n    anemia (int): Indicates preoperative anemia (Hgb ≤10 g/dL). 0 for 'No', 1 for 'Yes'.\n    surgical_incision (int): Type of surgical incision. 0 for 'Peripheral', 1 for 'Upper abdominal', 2 for 'Intrathoracic'.\n    surgery_duration (int): Duration of the surgery in hours.\n    emergency (int): Indicates if the procedure was an emergency. 0 for 'No', 1 for 'Yes'.\n\n    Returns:\n    int: The ARISCAT score, which is a summation of points based on the provided parameters.\n    \"\"\"\n\n    # Age points\n    if age <= 50:\n        age_points = 0\n    elif 51 <= age <= 80:\n        age_points = 3\n    else:\n        age_points = 16\n\n    # SpO2 points\n    if spo2 >= 96:\n        spo2_points = 0\n    elif 91 <= spo2 <= 95:\n        spo2_points = 8\n    else:\n        spo2_points = 24\n\n    # Respiratory infection points\n    respiratory_infection_points = 17 if respiratory_infection else 0\n\n    # Anemia points\n    anemia_points = 11 if anemia else 0\n\n    # Surgical incision points\n    if surgical_incision == 0:\n        surgical_incision_points = 0\n    elif surgical_incision == 1:\n        surgical_incision_points = 15\n    else:\n        surgical_incision_points = 24\n\n    # Surgery duration points\n    if surgery_duration < 2:\n        surgery_duration_points = 0\n    elif 2 <= surgery_duration <= 3:\n        surgery_duration_points = 16\n    else:\n        surgery_duration_points = 23\n\n    # Emergency procedure points\n    emergency_points = 8 if emergency else 0\n\n    # Total ARISCAT Score\n    total_score = (age_points + spo2_points + respiratory_infection_points +\n                   anemia_points + surgical_incision_points + surgery_duration_points +\n                   emergency_points)\n\n    return total_score\n",
        "docstring": "Calculate the ARISCAT Score for Postoperative Pulmonary Complications.\n    This score helps predict the risk of pulmonary complications in patients undergoing surgery under general, neuraxial, or regional anesthesia.\n\n    Parameters:\n    age (int): Patient's age in years.\n    spo2 (int): Preoperative oxygen saturation (SpO2) percentage.\n    respiratory_infection (int): Indicates the presence of respiratory infection in the last month. 0 for 'No', 1 for 'Yes'.\n    anemia (int): Indicates preoperative anemia (Hgb ≤10 g/dL). 0 for 'No', 1 for 'Yes'.\n    surgical_incision (int): Type of surgical incision. 0 for 'Peripheral', 1 for 'Upper abdominal', 2 for 'Intrathoracic'.\n    surgery_duration (int): Duration of the surgery in hours.\n    emergency (int): Indicates if the procedure was an emergency. 0 for 'No', 1 for 'Yes'.\n\n    Returns:\n    int: The ARISCAT score, which is a summation of points based on the provided parameters.\n",
        "next_steps": "ADVICE\nMay guide decision-making to reduce risk of postoperative pulmonary complications and encourage preventative strategies such as considering non-surgical procedures, delaying the surgery, shortening the time for surgery, or using tissue-sparing approaches. "
    },
    {
        "tool_name": "Morphine Milligram Equivalents (MME) Calculator",
        "function_name": "calculate_mme",
        "description": "The Morphine Milligram Equivalents (MME) Calculator is used to convert various opioid dosages into a standardized morphine equivalent to help assess opioid use risk and ensure safe dosing. It is particularly useful in clinical settings where healthcare providers manage patients with chronic pain or are prescribing multiple opioids. The tool aids in maintaining dosage safety and compliance with guidelines to minimize the risk of opioid misuse and overdose.",
        "formula": "MME/day = Dosage x Doses per day x MME conversion factor\n Multiple drugs may be selected, so the total MME/day is equal to the sum of the Mme/day of each drug.\nOpioid\nCommon dosages\nMME conversion factor\nCodeine\n15mg, 30mg, 60mg, 2.4 mg/mL, 6 mg/mL\n0.15\nFentaNYL buccal or sublingual tablets\n100 mcg, 200 mcg, 300 mcg, 400 mcg, 600 mcg, 800 mcg\n0.13\nFentaNYL patch (Duragesic)\n12.5 mcg, 25 mcg, 37.5 mcg, 50 mcg, 62.5 mcg, 75 mcg, 87.5 mcg, 100 mcg\n2.4\nHYDROcodone (Vicodin, Norco, Lortab)\n2.5 mg, 5 mg, 7.5 mg, 10 mg, 1 mg/mL, 0.5 mg/mL, 0.667 mg/mL\n1\nHYDROmorphone (Dilaudid)\n2 mg, 4 mg, 8 mg, 12 mg, 16 mg, 32 mg, 1 mg/mL\n5\nMethadone3\n5 mg, 10 mg, 40 mg\n4.7\nMorphine\n10 mg, 15 mg, 20 mg, 40 mg, 45 mg, 50 mg, 60 mg, 70 mg, 75 mg, 80 mg, 90 mg, 100 mg, 120 mg, 130 mg, 150 mg, 200 mg, 2 mg/mL, 20 mg/mL\n1\nOxyCODONE (OxyCONTIN, Roxicodone)\n5 mg, 7.5 mg, 10 mg, 15 mg, 20 mg, 30 mg, 40 mg, 60 mg, 80 mg, 1 mg/mL, 20 mg/mL\n1.5\nOxyMORphone\n5 mg, 7.5 mg, 10 mg, 15 mg, 20 mg, 30 mg, 40 mg, 1 mg/mL\n3\nTapentadol3, mg\n0.4\nTraMADol (Ultram), mg\n0.2\nBuprenorphine4\n10\n1Dosage in mcg/hr for fentaNYL patch, in mcg for fentaNYL buccal or sublingual tablets, and in mg for all other opioids.\n2These dose conversions are estimated and cannot account for individual differences in genetics and pharmacokinetics.\n3Conversion of methadone and tapentadol is particularly complex.\n4Buprenorphine is listed but, as a partial opioid agonist, is not expected to be associated with overdose risk in the same dose-dependent manner as doses for full agonist opioids and is therefore omitted from the calculator.",
        "code": "def calculate_mme(dosages, doses_per_day, drugs):\n    \"\"\"\n    Calculate the Morphine Milligram Equivalents (MME) per day based on the opioid dosage,\n    number of doses per day, and the drug used. This function can handle multiple drugs\n    to compute total MME/day by summing up MME for each drug.\n\n    Parameters:\n    - dosages (list of float): List of dosages for each drug in the units appropriate for the drug\n      (mcg/hr for fentanyl patches, mcg for fentanyl buccal/sublingual tablets, and mg for all other opioids).\n    - doses_per_day (list of int): List of doses per day for each corresponding drug.\n    - drugs (list of int): List of indexes representing drugs where each index corresponds to:\n      0: Codeine, 1: Fentanyl buccal or sublingual, 2: Fentanyl patch, 3: Hydrocodone,\n      4: Hydromorphone, 5: Methadone, 6: Morphine, 7: Oxycodone, 8: Oxymorphone,\n      9: Tapentadol, 10: Tramadol, 11: Buprenorphine (excluded from calculation).\n\n    Returns:\n    - float: Total MME/day calculated across all provided drugs.\n\n    Note:\n    - The conversion factors are based on standard estimates and may not account for individual differences.\n    - Buprenorphine is not included in the calculations as per its unique pharmacological profile.\n    \"\"\"\n\n    # Conversion factors for each drug based on the provided index.\n    conversion_factors = [0.15, 0.13, 2.4, 1, 5, 4.7, 1, 1.5, 3, 0.4, 0.2, 10]\n\n    # Calculate MME for each drug and sum them up\n    total_mme = 0\n    for dosage, dose_day, drug in zip(dosages, doses_per_day, drugs):\n        if drug < len(conversion_factors):  # ensure the drug index is within the range of defined drugs\n            total_mme += dosage * dose_day * conversion_factors[drug]\n\n    return total_mme",
        "docstring": "Calculate the Morphine Milligram Equivalents (MME) per day based on the opioid dosage,\n    number of doses per day, and the drug used. This function can handle multiple drugs\n    to compute total MME/day by summing up MME for each drug.\n\n    Parameters:\n    - dosages (list of float): List of dosages for each drug in the units appropriate for the drug\n      (mcg/hr for fentanyl patches, mcg for fentanyl buccal/sublingual tablets, and mg for all other opioids).\n    - doses_per_day (list of int): List of doses per day for each corresponding drug.\n    - drugs (list of int): List of indexes representing drugs where each index corresponds to:\n      0: Codeine, 1: Fentanyl buccal or sublingual, 2: Fentanyl patch, 3: Hydrocodone,\n      4: Hydromorphone, 5: Methadone, 6: Morphine, 7: Oxycodone, 8: Oxymorphone,\n      9: Tapentadol, 10: Tramadol, 11: Buprenorphine (excluded from calculation).\n\n    Returns:\n    - float: Total MME/day calculated across all provided drugs.\n\n    Note:\n    - The conversion factors are based on standard estimates and may not account for individual differences.\n    - Buprenorphine is not included in the calculations as per its unique pharmacological profile.",
        "next_steps": "MANAGEMENT\nCDC guidelines recommend prescribing the lowest effective opioid dose and to use caution when prescribing opioids at any dosage, particularly when increasing dosage to ≥50 MME/day. Doses ≥99 MME/day should be avoided or carefully justified (and titrated accordingly).\nAmerican College of Emergency Physicians (ACEP) guidelines recommend avoiding routinely prescribing outpatient opioids in patients with acute exacerbation of chronic noncancer pain in emergency settings.\nCRITICAL ACTIONS\nAvoid concurrent opioid and benzodiazepine prescribing, as it increases the potential for overdose (CDC guidelines)."
    },
    {
        "tool_name": "Centor Score (Modified/McIsaac) for Strep Pharyngitis",
        "function_name": "calculate_centor_score",
        "description": "The Centor Score, also known as the Modified Centor Score or McIsaac Score, is a clinical tool used to assess the likelihood of streptococcal pharyngitis in patients presenting with a sore throat. It evaluates factors such as age, fever, tonsillar exudates, tender anterior cervical lymphadenopathy, and absence of cough to guide clinicians on whether to perform further testing or prescribe antibiotics. This scoring system helps reduce unnecessary antibiotic use by identifying patients who are most likely to benefit from streptococcal testing.",
        "formula": " Addition of the selected points:\nCriteria\nPoints\nAge\n3-14 years\n+1\n15-44 years\n0\n≥45 years\n-1\nExudate or swelling on tonsils\nNo\n0\nYes\n+1\nTender/swollen anterior cervical lymph nodes\nNo\n0\nYes\n+1\nTemp >38°C (100.4°F)\nNo\n0\nYes\n+1\nCough\nCough present\n0\nCough absent\n+1\n",
        "code": "def calculate_centor_score(age, exudate_swelling, tender_swollen_lymph_nodes, temperature, cough):\n    \"\"\"\n    Calculate the Centor Score (Modified/McIsaac) for Strep Pharyngitis.\n    \n    This scoring system helps clinicians determine the likelihood of Group A Streptococcus (GAS) \n    in patients with symptoms of pharyngitis, which is critical for deciding whether to proceed \n    with testing for strep pharyngitis. The score integrates factors such as age, tonsillar exudate, \n    cervical lymphadenopathy, temperature, and the presence of cough to stratify the risk.\n    \n    Parameters:\n    - age (int): Age of the patient in years.\n    - exudate_swelling (bool): True if there is exudate or swelling on the tonsils, False otherwise.\n    - tender_swollen_lymph_nodes (bool): True if there are tender/swollen anterior cervical lymph nodes, False otherwise.\n    - temperature (float): Patient's temperature in degrees Celsius.\n    - cough (bool): True if cough is present, False otherwise.\n\n    Returns:\n    - int: The calculated Centor Score, which ranges from -1 to 4.\n    \n    Usage:\n    Typically used in primary care settings to assess the necessity for further testing for GAS infection,\n    guiding the judicious use of antibiotics in managing pharyngitis. Higher scores suggest a higher probability\n    of streptococcal infection and may warrant testing and/or treatment.\n    \"\"\"\n    score = 0\n    \n    # Age points\n    if age >= 3 and age <= 14:\n        score += 1\n    elif age >= 45:\n        score -= 1\n    \n    # Exudate or swelling on tonsils\n    if exudate_swelling:\n        score += 1\n    \n    # Tender/swollen anterior cervical lymph nodes\n    if tender_swollen_lymph_nodes:\n        score += 1\n    \n    # Temperature above 38°C\n    if temperature > 38.0:\n        score += 1\n    \n    # Absence of cough\n    if not cough:\n        score += 1\n    \n    return score\n",
        "docstring": " Calculate the Centor Score (Modified/McIsaac) for Strep Pharyngitis.\n    \n    This scoring system helps clinicians determine the likelihood of Group A Streptococcus (GAS) \n    in patients with symptoms of pharyngitis, which is critical for deciding whether to proceed \n    with testing for strep pharyngitis. The score integrates factors such as age, tonsillar exudate, \n    cervical lymphadenopathy, temperature, and the presence of cough to stratify the risk.\n    \n    Parameters:\n    - age (int): Age of the patient in years.\n    - exudate_swelling (bool): True if there is exudate or swelling on the tonsils, False otherwise.\n    - tender_swollen_lymph_nodes (bool): True if there are tender/swollen anterior cervical lymph nodes, False otherwise.\n    - temperature (float): Patient's temperature in degrees Celsius.\n    - cough (bool): True if cough is present, False otherwise.\n\n    Returns:\n    - int: The calculated Centor Score, which ranges from -1 to 4.\n    \n    Usage:\n    Typically used in primary care settings to assess the necessity for further testing for GAS infection,\n    guiding the judicious use of antibiotics in managing pharyngitis. Higher scores suggest a higher probability\n    of streptococcal infection and may warrant testing and/or treatment.\n ",
        "next_steps": "ADVICE\nSteroids and NSAIDS improve symptoms; antibiotics are often indicated in streptococcal pharyngitis, but do not prevent its suppurative complications, like peritonsillar abscess.\nCRITICAL ACTIONS\nCarefully consider patients with symptom duration longer than 3 days, even though the Centor Score does not apply.\nWhile symptoms are not compatible with a diagnosis of acute pharyngitis, these patients require evaluation for suppurative complications (peritonsillar abscess or Lemierre syndrome), or viral infections in adult patients (infectious mononucleosis or acute HIV) (Centor 2017)."
    },
    {
        "tool_name": "Free Water Deficit in Hypernatremia",
        "function_name": "calculate_free_water_deficit",
        "description": "The Free Water Deficit (FWD) calculation is used in the management of hypernatremia to estimate the amount of water required to normalize a patient's serum sodium concentration. It is particularly useful in clinical settings for patients with elevated sodium levels due to water loss or low water intake. This calculation helps guide appropriate fluid replacement strategies, ensuring both the safety and effectiveness of treatment.",
        "formula": "Free water deficit, L = (% total body water, fraction)*(Weight, kg)*([Current Na/Ideal Na] – 1)\nwhere % total body water (TBW) is:\nAdult male: 60% (i.e., use 0.6 in the equation)\nAdult female: 50% (0.5)\nElderly male: 50% (0.5)\nElderly female: 45% (0.45)\nChild: 60% (0.6) ",
        "code": "def calculate_free_water_deficit(gender_age_group, weight_kg, current_na, ideal_na):\n    \"\"\"\n    Calculate the Free Water Deficit (FWD) in a patient with hypernatremia.\n\n    The FWD is a measure used in the management of hypernatremia to determine the amount\n    of water a patient needs to ingest or be given intravenously to reach normal serum\n    sodium levels without inducing cellular edema.\n\n    Parameters:\n    - gender_age_group (int): Index representing the patient's gender and age group.\n      - 0: Adult male\n      - 1: Adult female\n      - 2: Elderly male\n      - 3: Elderly female\n      - 4: Child\n    - weight_kg (float): The weight of the patient in kilograms.\n    - current_na (float): The current serum sodium level of the patient (mmol/L).\n    - ideal_na (float): The target or ideal serum sodium level for the patient (mmol/L).\n\n    Returns:\n    - float: The calculated free water deficit in liters.\n\n    Usage:\n    Calculate the free water deficit for an elderly female weighing 70 kg with a current\n    sodium level of 155 mmol/L and an ideal sodium level of 140 mmol/L:\n    >>> calculate_free_water_deficit(3, 70, 155, 140)\n    \"\"\"\n    # Total body water percentages for each gender-age group\n    tbw_percentages = [0.6, 0.5, 0.5, 0.45, 0.6]\n    tbw_fraction = tbw_percentages[gender_age_group]\n\n    # Calculation of free water deficit\n    fwd = tbw_fraction * weight_kg * ((current_na / ideal_na) - 1)\n\n    return fwd\n",
        "docstring": "Calculate the Free Water Deficit (FWD) in a patient with hypernatremia.\n\n    The FWD is a measure used in the management of hypernatremia to determine the amount\n    of water a patient needs to ingest or be given intravenously to reach normal serum\n    sodium levels without inducing cellular edema.\n\n    Parameters:\n    - gender_age_group (int): Index representing the patient's gender and age group.\n      - 0: Adult male\n      - 1: Adult female\n      - 2: Elderly male\n      - 3: Elderly female\n      - 4: Child\n    - weight_kg (float): The weight of the patient in kilograms.\n    - current_na (float): The current serum sodium level of the patient (mmol/L).\n    - ideal_na (float): The target or ideal serum sodium level for the patient (mmol/L).\n\n    Returns:\n    - float: The calculated free water deficit in liters.\n\n    Usage:\n    Calculate the free water deficit for an elderly female weighing 70 kg with a current\n    sodium level of 155 mmol/L and an ideal sodium level of 140 mmol/L:\n    >>> calculate_free_water_deficit(3, 70, 155, 140)\n",
        "next_steps": "ADVICE\nAfter determining volume status, some patients with hypernatremia may improve with simple oral intake, while others may require further fluid management (and treatment of the underlying cause of the hypernatremia)."
    },
    {
        "tool_name": "Wells' Criteria for Pulmonary Embolism",
        "function_name": "calculate_wells_criteria",
        "description": "Wells' Criteria for Pulmonary Embolism is a clinical tool used to assess the probability of pulmonary embolism (PE) in patients presenting with symptoms suggestive of this condition. It involves scoring various clinical factors and symptoms to categorize the likelihood of PE as low, moderate, or high. This tool guides clinicians in deciding whether further diagnostic testing, such as a D-dimer test or imaging, is necessary.",
        "formula": "Addition of the selected points:\nClinical signs and symptoms of DVT\nNo\n0\nYes\n3\nPE is #1 diagnosis OR equally likely\nNo\n0\nYes\n3\nHeart rate > 100\nNo\n0\nYes\n1.5\nImmobilization at least 3 days OR surgery in the previous 4 weeks\nNo\n0\nYes\n1.5\nPrevious, objectively diagnosed PE or DVT\nNo\n0\nYes\n1.5\nHemoptysis\nNo\n0\nYes\n1\nMalignancy w/ treatment within 6 months or palliative\nNo\n0\nYes\n1 ",
        "code": "def calculate_wells_criteria(dvt_symptoms, pe_diagnosis, heart_rate, immobilization_surgery, previous_pe_dvt, hemoptysis, malignancy):\n    \"\"\"\n    Calculates the Wells' Criteria for Pulmonary Embolism (PE).\n    \n    This function estimates the pre-test probability of pulmonary embolism based on certain clinical criteria.\n    It helps in stratifying patients into different risk categories which then guides further diagnostic testing like d-dimer or CT angiogram.\n    \n    Parameters:\n    dvt_symptoms (bool): True if there are clinical signs and symptoms of deep vein thrombosis (DVT), else False.\n    pe_diagnosis (bool): True if pulmonary embolism is the #1 diagnosis or equally likely, else False.\n    heart_rate (bool): True if heart rate is over 100, else False.\n    immobilization_surgery (bool): True if patient has been immobilized for at least 3 days or had surgery in the past 4 weeks, else False.\n    previous_pe_dvt (bool): True if there is a history of previously diagnosed PE or DVT, else False.\n    hemoptysis (bool): True if the patient has hemoptysis, else False.\n    malignancy (bool): True if the patient has malignancy with treatment within the last 6 months or is on palliative, else False.\n    \n    Returns:\n    float: The total score based on Wells' Criteria, which can be used to estimate the risk of pulmonary embolism.\n    \n    Application:\n    This score should be used in conjunction with clinical judgment in patients who have a suspicion of pulmonary embolism.\n    It is validated for both inpatient and emergency department settings.\n    Not suitable for all patients with chest pain or shortness of breath without a clinical suspicion of PE.\n    \"\"\"\n    score = 0\n    score += 3 if dvt_symptoms else 0\n    score += 3 if pe_diagnosis else 0\n    score += 1.5 if heart_rate else 0\n    score += 1.5 if immobilization_surgery else 0\n    score += 1.5 if previous_pe_dvt else 0\n    score += 1 if hemoptysis else 0\n    score += 1 if malignancy else 0\n\n    return score\n\n",
        "docstring": "Calculates the Wells' Criteria for Pulmonary Embolism (PE).\n    \n    This function estimates the pre-test probability of pulmonary embolism based on certain clinical criteria.\n    It helps in stratifying patients into different risk categories which then guides further diagnostic testing like d-dimer or CT angiogram.\n    \n    Parameters:\n    dvt_symptoms (bool): True if there are clinical signs and symptoms of deep vein thrombosis (DVT), else False.\n    pe_diagnosis (bool): True if pulmonary embolism is the #1 diagnosis or equally likely, else False.\n    heart_rate (bool): True if heart rate is over 100, else False.\n    immobilization_surgery (bool): True if patient has been immobilized for at least 3 days or had surgery in the past 4 weeks, else False.\n    previous_pe_dvt (bool): True if there is a history of previously diagnosed PE or DVT, else False.\n    hemoptysis (bool): True if the patient has hemoptysis, else False.\n    malignancy (bool): True if the patient has malignancy with treatment within the last 6 months or is on palliative, else False.\n    \n    Returns:\n    float: The total score based on Wells' Criteria, which can be used to estimate the risk of pulmonary embolism.\n    \n    Application:\n    This score should be used in conjunction with clinical judgment in patients who have a suspicion of pulmonary embolism.\n    It is validated for both inpatient and emergency department settings.\n    Not suitable for all patients with chest pain or shortness of breath without a clinical suspicion of PE.\n",
        "next_steps": "ADVICE\nSome advocate using the Wells’ score over clinician gestalt to predict who is low-risk and then applying the PERC rule to stop workup for PE.\nAs with all clinical decision aids, the physician must first have a suspicion of the diagnosis before attempting to apply the Wells criteria.\nThe original intent of this tool was to determine who was low risk enough to rule out testing with a d-dimer.\nAge adjusted d-dimer cutoffs have been validated for use in patients over 50 years in low risk patients (rGeneva “not high” or Wells’ low). If using the appropriate d-dimer assay consider calculating the age adjusted d-dimer cutoff of: Age (years) x 10 µg/L = cutoff (for patients > 50 years).\nWhile both two and three tier models are accepted, guidelines appear to favor the two tier model which utilizes only the high sensitivity d-dimer and more conservative risk stratification; “intermediate” risk patients are thought to be still too high risk to be evaluated without further risk stratification.\nMANAGEMENT\nThree Tier Model\nPatient is determined to be low risk (<2 points:1.3% incidence PE): consider d-dimer testing to rule out Pulmonary embolism. Alternatively consider a rule-out criteria such as PERC.\nIf the dimer is negative consider stopping workup.\nIf the dimer is positive consider CTA.\nPatient is determined to be moderate risk (score 2-6 points, 16.2% incidence of PE): consider high sensitivity d-dimer testing or CTA.\nIf the dimer is negative consider stopping workup.\nIf the dimer is positive consider CTA.\nPatient is determined to be high risk (score >6 points: 37.5% incidence of PE): consider CTA. D-dimer testing is not recommended.\nTwo Tier Model\nPatient risk is determined to be “PE Unlikely” (0-4 points, 12.1% incidence of PE): consider high sensitivity d-dimer testing.\nIf the dimer is negative consider stopping workup.\nIf the dimer is positive consider CTA.\nPatient risk is determined to be “PE Likely” (>4 points, 37.1% incidence of PE): consider CTA testing.\nCRITICAL ACTIONS\nGiven the next generation d-dimer high sensitivity but low specificity (approx 50%), patients who are considered high risk should be ruled out with CTA.\nNever delay resuscitative efforts for diagnostic testing, especially in the unstable patient.\nHistory and exam should always be performed prior to diagnostic testing."
    },
    {
        "tool_name": "Anion Gap",
        "function_name": "calculate_anion_gap",
        "description": "The Anion Gap is a diagnostic tool used to help identify disturbances in acid-base balance in the body, typically by calculating the difference between primary measured cations and anions in serum. It is particularly useful in clinical settings for diagnosing the causes of metabolic acidosis, such as renal failure, diabetic ketoacidosis, or poisoning. Physicians often use this calculation when a patient presents with altered mental status, unexplained nausea, fatigue, or breathing difficulties.",
        "formula": "Anion gap, mEq/L = sodium, mEq/L - (chloride, mEq/L+ bicarbonate, mEq/L)",
        "code": "def calculate_anion_gap(sodium, chloride, bicarbonate):\n    \"\"\"\n    Calculate the Anion Gap using sodium, chloride, and bicarbonate levels.\n\n    The Anion Gap is a measure used in medicine to help diagnose the presence of an acidosis and whether it has an elevated anion gap. This calculation is essential in identifying the type of acidosis a patient might have, differentiating between gap and non-gap acidoses. Elevated Anion Gap suggests the presence of additional unmeasured anions in the blood, which could indicate conditions like ketoacidosis, lactic acidosis, or poisoning by substances such as methanol.\n\n    Parameters:\n    sodium (float): Sodium level in mEq/L.\n    chloride (float): Chloride level in mEq/L.\n    bicarbonate (float): Bicarbonate level in mEq/L.\n\n    Returns:\n    float: The calculated Anion Gap in mEq/L.\n\n    Example:\n    >>> calculate_anion_gap(140, 104, 24)\n    12.0\n    \"\"\"\n    anion_gap = sodium - (chloride + bicarbonate)\n    return anion_gap\n",
        "docstring": "Calculate the Anion Gap using sodium, chloride, and bicarbonate levels.\n\n    The Anion Gap is a measure used in medicine to help diagnose the presence of an acidosis and whether it has an elevated anion gap. This calculation is essential in identifying the type of acidosis a patient might have, differentiating between gap and non-gap acidoses. Elevated Anion Gap suggests the presence of additional unmeasured anions in the blood, which could indicate conditions like ketoacidosis, lactic acidosis, or poisoning by substances such as methanol.\n\n    Parameters:\n    sodium (float): Sodium level in mEq/L.\n    chloride (float): Chloride level in mEq/L.\n    bicarbonate (float): Bicarbonate level in mEq/L.\n\n    Returns:\n    float: The calculated Anion Gap in mEq/L.\n\n    Example:\n    >>> calculate_anion_gap(140, 104, 24)\n    12.0\n ",
        "next_steps": "ADVICE\nAnion Gap Metabolic Acidosis: MUDPILERS\nMethanol\nUremia\nDKA/alcoholic KA\nParaldehyde\nIsoniazid\nLactic acidosis\nEtoh/ethylene glycol\nRhabdo/renal failure\nSalicylates\nNon-Anion Gap Acidosis: HARDUPS\nHyperalimentation\nAcetazolamide\nRenal tubular acidosis\nDiarrhea\nUretero-pelvic shunt\nPost-hypocapnia\nSpironolactone\nAcute Respiratory Acidosis (Chronic Respiratory Acidosis = COPD/restrictive lung dz): any hypoventilation state\nCNS depression (drugs/CVA)\nAirway obstruction\nPneumonia\nPulmonary edema\nHemo/pneumothorax\nMyopathy\nMetabolic Alkalosis: CLEVER PD\nContraction\nLicorice\nEndo (Conn's, Cushings, Bartter's)\nVomiting\nExcess alkali\nRefeeding alkalosis\nPost-hypercapnia\nDiuretics\nRespiratory Alkalosis: CHAMPS (think speed up breathing)\nCNS disease\nHypoxia\nAnxiety\nMech ventilators\nProgesterone\nSalicylates/sepsis"
    },
    {
        "tool_name": "PHQ-9 (Patient Health Questionnaire-9)",
        "function_name": "calculate_phq9",
        "description": "The PHQ-9 (Patient Health Questionnaire-9) is a widely used self-administered diagnostic tool for assessing the presence and severity of depression. It consists of nine questions that align with the diagnostic criteria for depression from the DSM-IV (Diagnostic and Statistical Manual of Mental Disorders). Clinicians typically use the PHQ-9 in both medical and mental health settings to screen for depression during routine health assessments and to monitor treatment progress.",
        "formula": "Addition of the selected points:\n Little interest or pleasure in doing things?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Feeling down, depressed, or hopeless?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Trouble falling or staying asleep, or sleeping too much?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Feeling tired or having little energy?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Poor appetite or overeating?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Feeling bad about yourself — or that you are a failure or have let yourself or your family down?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Trouble concentrating on things, such as reading the newspaper or watching television?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Moving or speaking so slowly that other people could have noticed? Or so fidgety or restless that you have been moving a lot more than usual?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Thoughts that you would be better off dead, or thoughts of hurting yourself in some way?\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3 ",
        "code": "def calculate_phq9(\n    interest_pleasure, feeling_down, sleep_issues, tired_energy,\n    appetite_issues, self_feeling, concentration, activity_level, suicidal_thoughts):\n    \"\"\"\n    Calculate the PHQ-9 (Patient Health Questionnaire-9) score.\n\n    The PHQ-9 is a clinical scale used to diagnose depression and to quantify and monitor the severity of depression symptoms.\n    It evaluates symptoms based on the 9 DSM criteria for major depressive disorder (MDD). Each criterion is scored from 0 to 3:\n    - \"0\" for 'Not at all'\n    - \"1\" for 'Several days'\n    - \"2\" for 'More than half the days'\n    - \"3\" for 'Nearly every day'\n    The function sums these scores to provide an overall severity score ranging from 0 to 27.\n\n    Parameters:\n    - interest_pleasure (int): Index from 0 to 3 indicating frequency of little interest or pleasure in doing things.\n    - feeling_down (int): Index from 0 to 3 indicating frequency of feeling down, depressed, or hopeless.\n    - sleep_issues (int): Index from 0 to 3 indicating trouble with falling or staying asleep, or sleeping too much.\n    - tired_energy (int): Index from 0 to 3 indicating feeling tired or having little energy.\n    - appetite_issues (int): Index from 0 to 3 indicating issues with poor appetite or overeating.\n    - self_feeling (int): Index from 0 to 3 indicating feelings of being bad about oneself, or feeling like a failure.\n    - concentration (int): Index from 0 to 3 indicating trouble concentrating on things.\n    - activity_level (int): Index from 0 to 3 indicating altered activity levels, either moving too slowly or being too fidgety.\n    - suicidal_thoughts (int): Index from 0 to 3 indicating frequency of thoughts of self-harm or being better off dead.\n\n    Returns:\n    - int: The total PHQ-9 score, which is the sum of all the individual scores for the symptoms listed above.\n    \"\"\"\n    return (\n        interest_pleasure + feeling_down + sleep_issues + tired_energy +\n        appetite_issues + self_feeling + concentration + activity_level + suicidal_thoughts\n    )\n",
        "docstring": "Calculate the PHQ-9 (Patient Health Questionnaire-9) score.\n\n    The PHQ-9 is a clinical scale used to diagnose depression and to quantify and monitor the severity of depression symptoms.\n    It evaluates symptoms based on the 9 DSM criteria for major depressive disorder (MDD). Each criterion is scored from 0 to 3:\n    - \"0\" for 'Not at all'\n    - \"1\" for 'Several days'\n    - \"2\" for 'More than half the days'\n    - \"3\" for 'Nearly every day'\n    The function sums these scores to provide an overall severity score ranging from 0 to 27.\n\n    Parameters:\n    - interest_pleasure (int): Index from 0 to 3 indicating frequency of little interest or pleasure in doing things.\n    - feeling_down (int): Index from 0 to 3 indicating frequency of feeling down, depressed, or hopeless.\n    - sleep_issues (int): Index from 0 to 3 indicating trouble with falling or staying asleep, or sleeping too much.\n    - tired_energy (int): Index from 0 to 3 indicating feeling tired or having little energy.\n    - appetite_issues (int): Index from 0 to 3 indicating issues with poor appetite or overeating.\n    - self_feeling (int): Index from 0 to 3 indicating feelings of being bad about oneself, or feeling like a failure.\n    - concentration (int): Index from 0 to 3 indicating trouble concentrating on things.\n    - activity_level (int): Index from 0 to 3 indicating altered activity levels, either moving too slowly or being too fidgety.\n    - suicidal_thoughts (int): Index from 0 to 3 indicating frequency of thoughts of self-harm or being better off dead.\n\n    Returns:\n    - int: The total PHQ-9 score, which is the sum of all the individual scores for the symptoms listed above.\n",
        "next_steps": "ADVICE\nFinal diagnosis should be made with clinical interview and mental status examination including assessment of patient’s level of distress and functional impairment.\nMANAGEMENT\nPHQ-9 Management Summary\nScore Depression severity Comments\n0-4 Minimal or none Monitor; may not require treatment\n5-9 Mild Use clinical judgment (symptom duration, functional impairment) to determine necessity of treatment\n10-14 Moderate\n15-19 Moderately severe Warrants active treatment with psychotherapy, medications, or combination\n20-27 Severe\nCRITICAL ACTIONS\nPerform suicide risk assessment in patients who respond positively to item 9 “Thoughts that you would be better off dead or of hurting yourself in some way.”\nRule out bipolar disorder, normal bereavement, and medical disorders causing depression."
    },
    {
        "tool_name": "GAD-7 (General Anxiety Disorder-7)",
        "function_name": "calculate_gad_7",
        "description": "The GAD-7 (General Anxiety Disorder-7) is a self-administered questionnaire used to screen for and measure the severity of generalized anxiety disorder. It consists of seven questions that evaluate the frequency of anxiety symptoms over the past two weeks. This tool is widely used in clinical settings and research to facilitate the diagnosis and monitoring of anxiety.",
        "formula": "Addition of the selected points:\n Feeling nervous, anxious, or on edge\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Not being able to stop or control worrying\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Worrying too much about different things\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Trouble relaxing\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Being so restless that it's hard to sit still\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Becoming easily annoyed or irritable\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3\n Feeling afraid as if something awful might happen\n Not at all\n 0\nSeveral days \n 1 \n More than half the days\n 2 \nNearly every day\n 3",
        "code": "def calculate_gad_7(nervous, control_worrying, worry_too_much, trouble_relaxing, restlessness, irritability, fear_of_awful_events):\n    \"\"\"\n    Calculate the GAD-7 (General Anxiety Disorder-7) score. This function computes the total score \n    based on seven items that assess the severity of various signs of anxiety according to their \n    frequency over the past two weeks. Each item is scored from 0 to 3 (0 = Not at all, 1 = Several days,\n    2 = More than half the days, 3 = Nearly every day).\n\n    This scale is a quick screening tool for detecting the presence of clinically significant anxiety disorders \n    including Generalized Anxiety Disorder, Panic Disorder, Social Phobia, and Post-Traumatic Stress Disorder.\n    It is highly sensitive and specific across various cutoffs, used extensively in primary care and mental health settings \n    to assess and monitor treatment responses.\n\n    Parameters:\n    - nervous (int): Score for feeling nervous, anxious, or on edge.\n    - control_worrying (int): Score for not being able to stop or control worrying.\n    - worry_too_much (int): Score for worrying too much about different things.\n    - trouble_relaxing (int): Score for having trouble relaxing.\n    - restlessness (int): Score for being so restless that it is hard to sit still.\n    - irritability (int): Score for becoming easily annoyed or irritable.\n    - fear_of_awful_events (int): Score for feeling afraid as if something awful might happen.\n\n    Returns:\n    int: The total GAD-7 score, ranging from 0 to 21.\n\n    Usage Example:\n    gad_7_score = calculate_gad_7(3, 2, 1, 3, 0, 2, 1)\n    print(f\"GAD-7 Score: {gad_7_score}\") # Outputs the calculated GAD-7 score\n    \"\"\"\n\n    total_score = (nervous + control_worrying + worry_too_much + trouble_relaxing + \n                   restlessness + irritability + fear_of_awful_events)\n    \n    return total_score\n",
        "docstring": "Calculate the GAD-7 (General Anxiety Disorder-7) score. This function computes the total score \n    based on seven items that assess the severity of various signs of anxiety according to their \n    frequency over the past two weeks. Each item is scored from 0 to 3 (0 = Not at all, 1 = Several days,\n    2 = More than half the days, 3 = Nearly every day).\n\n    This scale is a quick screening tool for detecting the presence of clinically significant anxiety disorders \n    including Generalized Anxiety Disorder, Panic Disorder, Social Phobia, and Post-Traumatic Stress Disorder.\n    It is highly sensitive and specific across various cutoffs, used extensively in primary care and mental health settings \n    to assess and monitor treatment responses.\n\n    Parameters:\n    - nervous (int): Score for feeling nervous, anxious, or on edge.\n    - control_worrying (int): Score for not being able to stop or control worrying.\n    - worry_too_much (int): Score for worrying too much about different things.\n    - trouble_relaxing (int): Score for having trouble relaxing.\n    - restlessness (int): Score for being so restless that it is hard to sit still.\n    - irritability (int): Score for becoming easily annoyed or irritable.\n    - fear_of_awful_events (int): Score for feeling afraid as if something awful might happen.\n\n    Returns:\n    int: The total GAD-7 score, ranging from 0 to 21.\n\n    Usage Example:\n    gad_7_score = calculate_gad_7(3, 2, 1, 3, 0, 2, 1)\n    print(f\"GAD-7 Score: {gad_7_score}\") # Outputs the calculated GAD-7 score\n",
        "next_steps": "MANAGEMENT\nScores ≥10: Further assessment (including diagnostic interview and mental status examination) and/or referral to a mental health professional recommended.\nScore Symptom Severity Comments\n5-9 Mild Monitor\n10*-14 Moderate Possible clinically significant condition\n>15 Severe Active treatment probably warranted\n*For Panic Disorder, Social Phobia, & PTSD, cutoff score of 8 may be used for optimal sensitivity/specificity (see Evidence section).\nCRITICAL ACTIONS\nThis tool should be used for screening and monitoring symptom severity and cannot replace a clinical assessment and diagnosis.\nDo not forget to rule out medical causes of anxiety before diagnosing an anxiety disorder (for example, EKG for arrhythmias, TSH for thyroid disease)."
    },
    {
        "tool_name": "CIWA-Ar for Alcohol Withdrawal",
        "function_name": "calculate_ciwa_ar",
        "description": "The Clinical Institute Withdrawal Assessment for Alcohol, Revised (CIWA-Ar) is a tool used to assess the severity of alcohol withdrawal symptoms and guide treatment decisions. It is commonly used in hospital settings, particularly in emergency departments and detoxification units, to monitor withdrawal progression and determine the need for medication. The CIWA-Ar evaluates symptoms such as tremors, agitation, and hallucinations, facilitating targeted and safe management of withdrawal.",
        "formula": "Addition of the selected points:\n Nausea/vomitingAsk 'Do you feel sick to your stomach? Have you vomited?'\n No nausea and no vomiting\n 0\n Mild nausea and no vomiting\n 1\n(More severe symptoms) \n 2\n(More severe symptoms) \n 3\n Intermittent nausea with dry heaves\n 4\n(More severe symptoms) \n 5\n(More severe symptoms) \n 6\n Constant nausea, frequent dry heaves and vomiting\n 7\nTremor Arms extended and fingers spread apart \n No tremor\n 0\n Not visible, but can be felt fingertip to fingertip\n 1\n(More severe symptoms) \n 2\n(More severe symptoms) \n 3\n Moderate, with patient's arms extended\n 4\n(More severe symptoms) \n 5\n(More severe symptoms) \n 6\n Severe, even with arms not extended\n 7\n Paroxysmal sweats\n No sweat visible\n 0\n Barely perceptible sweating, palms moist\n 1\n(More severe symptoms) \n 2\n(More severe symptoms) \n 3\n Beads of sweat obvious on forehead\n 4\n(More severe symptoms) \n 5\n(More severe symptoms) \n 6\n Drenching sweats\n 7\n Anxiety\n No anxiety, at ease\n 0\n Mildly anxious\n 1\n(More severe symptoms) \n 2\n(More severe symptoms) \n 3\n Moderately anxious, or guarded, so anxiety is inferred\n 4\n(More severe symptoms) \n 5\n(More severe symptoms) \n 6\n Equivalent to acute panic states as seen in severe delirium or acute schizophrenic reactions\n 7\nAgitation\n Normal activity\n 0\n Somewhat more activity than normal activty\n 1\n(More severe symptoms) \n 2\n(More severe symptoms) \n 3\n Moderately fidgety and restless\n 4\n(More severe symptoms) \n 5\n(More severe symptoms) \n 6\n Paces back and forth during most of the interview, or constantly thrashes about\n 7\n Tactile disturbances\n None\n 0\nVery mild itching, pin and needles, burning, or numbness\n 1\nMild itching, pin and needles, burning, or numbness\n 2\nModerate itching, pin and needles, burning, or numbness \n 3\n Moderately severe hallucination\n 4\nSevere hallucinations\n 5\nExtremely severe hallucinations \n 6\n Continuous hallucinations\n 7 Visual disturbances\n No present\n 0\n Very mild sensitivity\n 1\nMild sensitivity \n 2\n \nModerate sensitivity 3\n Moderately severe hallucinations\n 4\n Severe hallucinations \n 5\nExtremely severe hallucinations \n 6\n Continuous hallucinations\n 7\nHeadache/fullness in head \n No Present\n 0\n Very mild\n 1\n Mild \n 2\nModerate \n 3\n Moderately severe\n 4\nSevere \n 5\nVery severe \n 6\nExtremely severe\n 7\nOrientation/clouding of sensorium \n Oriented, can do serial additions\n 0\n Can't do serial additions or is uncertain about date\n 1\nDisoriented for date by no more than 2 calendar days \n 2\nDisoriented for date by more than 2 calendar days \n 3\n Disoriented to place or person\n 4",
        "code": "def calculate_ciwa_ar(nausea_vomiting, tremor, paroxysmal_sweats, anxiety, agitation, tactile_disturbances, visual_disturbances, headache_fullness, orientation_sensorium):\n    \"\"\"\n    Calculate the CIWA-Ar scale score for assessing alcohol withdrawal severity.\n\n    The CIWA-Ar scale is intended for use in various medical settings where alcohol withdrawal is suspected.\n    This tool helps in quantifying the severity of alcohol withdrawal through several symptom dimensions,\n    each scored independently. The cumulative score helps guide clinical decisions regarding the necessity\n    and intensity of treatment for withdrawal.\n\n    Parameters:\n    nausea_vomiting (int): Index for nausea and vomiting severity. Range: 0-7.\n        - 0: No nausea and no vomiting\n        - 1: Mild nausea and no vomiting\n        - 2-3: More severe nausea without vomiting\n        - 4: Intermittent nausea with dry heaves\n        - 5-6: Increasing severity of nausea and dry heaves\n        - 7: Constant nausea, frequent dry heaves and vomiting\n    tremor (int): Index for tremor severity. Range: 0-7.\n        - 0: No tremor\n        - 1: Not visible, but can be felt fingertip to fingertip\n        - 2-3: More severe tremors without visible shaking\n        - 4: Moderate tremor with arms extended\n        - 5-6: Severe tremor, visible with arms extended\n        - 7: Very severe tremor, even with arms not extended\n    paroxysmal_sweats (int): Index for sweating severity. Range: 0-7.\n        - 0: No sweat visible\n        - 1: Barely perceptible sweating, palms moist\n        - 2-3: More perceptible sweating without drenching\n        - 4: Beads of sweat obvious on forehead\n        - 5-6: Severe sweating\n        - 7: Drenching sweats\n    anxiety (int): Index for anxiety level. Range: 0-7.\n        - 0: No anxiety, at ease\n        - 1: Mildly anxious\n        - 2-3: Moderate anxiety\n        - 4: Moderately anxious, or guarded, so anxiety is inferred\n        - 5-6: Severe anxiety, similar to panic states\n        - 7: Equivalent to acute panic states as seen in severe delirium or acute schizophrenic reactions\n    agitation (int): Index for agitation level. Range: 0-7.\n        - 0: Normal activity\n        - 1: Somewhat more activity than normal\n        - 2-3: More active, moderately fidgety and restless\n        - 4: Moderately fidgety and restless\n        - 5-6: Severe restlessness\n        - 7: Paces back and forth during most of the interview, or constantly thrashes about\n    tactile_disturbances (int): Index for tactile disturbances. Range: 0-7.\n        - 0: None\n        - 1-2: Mild to moderate itching, pin and needles, burning, or numbness\n        - 3-4: Moderate to moderately severe hallucinations\n        - 5-6: Severe to extremely severe hallucinations\n        - 7: Continuous hallucinations\n    visual_disturbances (int): Index for visual disturbances. Range: 0-7.\n        - 0: No visual disturbances\n        - 1-2: Mild to moderate sensitivity\n        - 3-4: Moderate to moderately severe hallucinations\n        - 5-6: Severe to extremely severe hallucinations\n        - 7: Continuous hallucinations\n    headache_fullness (int): Index for headache or fullness in head. Range: 0-7.\n        - 0: No headache\n        - 1-2: Mild to moderate headache\n        - 3-4: Moderate to moderately severe headache\n        - 5-6: Severe to very severe headache\n        - 7: Extremely severe headache\n    orientation_sensorium (int): Index for orientation or clouding of sensorium. Range: 0-4.\n        - 0: Fully oriented, can do serial additions\n        - 1: Can't do serial additions or is uncertain about date\n        - 2: Disoriented for date by no more than 2 calendar days\n        - 3: Disoriented for date by more than 2 calendar days\n        - 4: Disoriented to place or person\n\n    Returns:\n    int: The total CIWA-Ar score, representing the severity of alcohol withdrawal.\n\n    Usage:\n    score = calculate_ciwa_ar(2, 4, 1, 3, 5, 2, 0, 6, 1)\n    print(\"CIWA-Ar score:\", score)\n    \"\"\"\n\n    total_score = (nausea_vomiting + tremor + paroxysmal_sweats + anxiety +\n                   agitation + tactile_disturbances + visual_disturbances +\n                   headache_fullness + orientation_sensorium)\n    return total_score\n",
        "docstring": "Calculate the CIWA-Ar scale score for assessing alcohol withdrawal severity.\n\n    The CIWA-Ar scale is intended for use in various medical settings where alcohol withdrawal is suspected.\n    This tool helps in quantifying the severity of alcohol withdrawal through several symptom dimensions,\n    each scored independently. The cumulative score helps guide clinical decisions regarding the necessity\n    and intensity of treatment for withdrawal.\n\n    Parameters:\n    nausea_vomiting (int): Index for nausea and vomiting severity. Range: 0-7.\n        - 0: No nausea and no vomiting\n        - 1: Mild nausea and no vomiting\n        - 2-3: More severe nausea without vomiting\n        - 4: Intermittent nausea with dry heaves\n        - 5-6: Increasing severity of nausea and dry heaves\n        - 7: Constant nausea, frequent dry heaves and vomiting\n    tremor (int): Index for tremor severity. Range: 0-7.\n        - 0: No tremor\n        - 1: Not visible, but can be felt fingertip to fingertip\n        - 2-3: More severe tremors without visible shaking\n        - 4: Moderate tremor with arms extended\n        - 5-6: Severe tremor, visible with arms extended\n        - 7: Very severe tremor, even with arms not extended\n    paroxysmal_sweats (int): Index for sweating severity. Range: 0-7.\n        - 0: No sweat visible\n        - 1: Barely perceptible sweating, palms moist\n        - 2-3: More perceptible sweating without drenching\n        - 4: Beads of sweat obvious on forehead\n        - 5-6: Severe sweating\n        - 7: Drenching sweats\n    anxiety (int): Index for anxiety level. Range: 0-7.\n        - 0: No anxiety, at ease\n        - 1: Mildly anxious\n        - 2-3: Moderate anxiety\n        - 4: Moderately anxious, or guarded, so anxiety is inferred\n        - 5-6: Severe anxiety, similar to panic states\n        - 7: Equivalent to acute panic states as seen in severe delirium or acute schizophrenic reactions\n    agitation (int): Index for agitation level. Range: 0-7.\n        - 0: Normal activity\n        - 1: Somewhat more activity than normal\n        - 2-3: More active, moderately fidgety and restless\n        - 4: Moderately fidgety and restless\n        - 5-6: Severe restlessness\n        - 7: Paces back and forth during most of the interview, or constantly thrashes about\n    tactile_disturbances (int): Index for tactile disturbances. Range: 0-7.\n        - 0: None\n        - 1-2: Mild to moderate itching, pin and needles, burning, or numbness\n        - 3-4: Moderate to moderately severe hallucinations\n        - 5-6: Severe to extremely severe hallucinations\n        - 7: Continuous hallucinations\n    visual_disturbances (int): Index for visual disturbances. Range: 0-7.\n        - 0: No visual disturbances\n        - 1-2: Mild to moderate sensitivity\n        - 3-4: Moderate to moderately severe hallucinations\n        - 5-6: Severe to extremely severe hallucinations\n        - 7: Continuous hallucinations\n    headache_fullness (int): Index for headache or fullness in head. Range: 0-7.\n        - 0: No headache\n        - 1-2: Mild to moderate headache\n        - 3-4: Moderate to moderately severe headache\n        - 5-6: Severe to very severe headache\n        - 7: Extremely severe headache\n    orientation_sensorium (int): Index for orientation or clouding of sensorium. Range: 0-4.\n        - 0: Fully oriented, can do serial additions\n        - 1: Can't do serial additions or is uncertain about date\n        - 2: Disoriented for date by no more than 2 calendar days\n        - 3: Disoriented for date by more than 2 calendar days\n        - 4: Disoriented to place or person\n\n    Returns:\n    int: The total CIWA-Ar score, representing the severity of alcohol withdrawal.\n\n    Usage:\n    score = calculate_ciwa_ar(2, 4, 1, 3, 5, 2, 0, 6, 1)\n    print(\"CIWA-Ar score:\", score)\n",
        "next_steps": "ADVICE\nBenzodiazepines are generally used to control psychomotor agitation and prevent progression to more severe withdrawal.\nDiazePAM (Valium), LORazepam (Ativan), and chlordiazePOXIDE (Librium) are the most frequently used benzodiazepines. Follow your hospital's own alcohol withdrawal protocol; frequently treatment begins with benzodiazepines when CIWA-Ar scores reach 8-10, with standing or as needed dosing for scores 10-20. Some protocols even include transfer to the ICU for scores >20.\nConsider additional supportive care, including intravenous fluids, nutritional supplementation, and frequent clinical reassessment including vital signs.\nMANAGEMENT\nAssessment protocols utilizing CIWA-Ar vary and include medication dosing triggered by symptoms only and combined symptom-triggered + fixed-dose medication dosing.\nCRITICAL ACTIONS\nOther conditions can mimic or coexist with alcohol withdrawal, including:\nDrug overdose.\nTrauma (eg, intracranial hemorrhage).\nInfection (eg, meningitis).\nMetabolic derangements.\nHepatic failure.\nGastrointestinal bleeding.\nConsider additional testing to rule out alternative diagnoses, especially if presentation includes altered mental status and/or fever."
    },
    {
        "tool_name": "Revised Cardiac Risk Index for Pre-Operative Risk",
        "function_name": "calculate_revised_cardiac_risk_index",
        "description": "The Revised Cardiac Risk Index (RCRI) is a clinical tool used to estimate the risk of major cardiac complications, like heart attacks or cardiac arrest, in patients undergoing non-cardiac surgery. It evaluates risk based on six pre-operative criteria, including history of ischemic heart disease, congestive heart failure, and insulin therapy for diabetes, among others. This index aids healthcare providers in identifying high-risk patients who may benefit from further cardiac evaluation or specific perioperative management strategies.",
        "formula": "Addition of the selected points:\nRisk factor\nDescription\nPoints\nElevated-risk surgery*\nIntraperitoneal; intrathoracic; suprainguinal vascular\n+1\nHistory of ischemic heart disease\nHistory of myocardial infarction (MI); history of positive exercise test; current chest pain considered due to myocardial ischemia; use of nitrate therapy or ECG with pathological Q waves\n+1\nHistory of congestive heart failure\nPulmonary edema, bilateral rales or S3 gallop; paroxysmal nocturnal dyspnea; chest x-ray (CXR) showing pulmonary vascular redistribution\n+1\nHistory of cerebrovascular disease\nPrior transient ischemic attack (TIA) or stroke\n+1\nPre-operative treatment with insulin\n--\n+1\nPre-operative creatinine >2 mg/dL / 176.8 µmol/L\n--\n+1\n*See 2014 ACC/AHA Guideline.",
        "code": "def calculate_revised_cardiac_risk_index(elevated_risk_surgery, history_of_ischemic_heart_disease, history_of_congestive_heart_failure, history_of_cerebrovascular_disease, preop_treatment_with_insulin, preop_creatinine_above_threshold):\n    \"\"\"\n    Calculate the Revised Cardiac Risk Index for Pre-Operative Risk.\n\n    This function calculates the Revised Cardiac Risk Index, which is used to assess the risk of major cardiac complications in patients undergoing elective or urgent/semi-urgent non-cardiac surgery. It is based on a set of specific risk factors and is valuable for risk stratification and aiding discussions about informed consent with patients.\n\n    Parameters:\n    elevated_risk_surgery (bool): True if the surgery is intraperitoneal, intrathoracic, or suprainguinal vascular.\n    history_of_ischemic_heart_disease (bool): True if there is a history of myocardial infarction, positive exercise test, current chest pain considered due to myocardial ischemia, or use of nitrate therapy or ECG showing pathological Q waves.\n    history_of_congestive_heart_failure (bool): True if there are signs such as pulmonary edema, bilateral rales or S3 gallop, paroxysmal nocturnal dyspnea, or chest X-ray showing pulmonary vascular redistribution.\n    history_of_cerebrovascular_disease (bool): True if there is a history of transient ischemic attack or stroke.\n    preop_treatment_with_insulin (bool): True if the patient is being treated with insulin pre-operatively.\n    preop_creatinine_above_threshold (bool): True if pre-operative creatinine levels are greater than 2 mg/dL or 176.8 µmol/L.\n\n    Returns:\n    int: The total Revised Cardiac Risk Index score, which is the sum of the individual risk factors present.\n\n    Usage:\n    The index is used primarily in the preoperative setting to assess cardiac risk. It assists healthcare providers in making informed decisions about further preoperative risk assessments and postoperative monitoring.\n    \"\"\"\n    # Initialize the risk index\n    risk_index = 0\n    \n    # Add points for each risk factor present\n    if elevated_risk_surgery:\n        risk_index += 1\n    if history_of_ischemic_heart_disease:\n        risk_index += 1\n    if history_of_congestive_heart_failure:\n        risk_index += 1\n    if history_of_cerebrovascular_disease:\n        risk_index += 1\n    if preop_treatment_with_insulin:\n        risk_index += 1\n    if preop_creatinine_above_threshold:\n        risk_index += 1\n\n    return risk_index\n",
        "docstring": "Calculate the Revised Cardiac Risk Index for Pre-Operative Risk.\n\n    This function calculates the Revised Cardiac Risk Index, which is used to assess the risk of major cardiac complications in patients undergoing elective or urgent/semi-urgent non-cardiac surgery. It is based on a set of specific risk factors and is valuable for risk stratification and aiding discussions about informed consent with patients.\n\n    Parameters:\n    elevated_risk_surgery (bool): True if the surgery is intraperitoneal, intrathoracic, or suprainguinal vascular.\n    history_of_ischemic_heart_disease (bool): True if there is a history of myocardial infarction, positive exercise test, current chest pain considered due to myocardial ischemia, or use of nitrate therapy or ECG showing pathological Q waves.\n    history_of_congestive_heart_failure (bool): True if there are signs such as pulmonary edema, bilateral rales or S3 gallop, paroxysmal nocturnal dyspnea, or chest X-ray showing pulmonary vascular redistribution.\n    history_of_cerebrovascular_disease (bool): True if there is a history of transient ischemic attack or stroke.\n    preop_treatment_with_insulin (bool): True if the patient is being treated with insulin pre-operatively.\n    preop_creatinine_above_threshold (bool): True if pre-operative creatinine levels are greater than 2 mg/dL or 176.8 µmol/L.\n\n    Returns:\n    int: The total Revised Cardiac Risk Index score, which is the sum of the individual risk factors present.\n\n    Usage:\n    The index is used primarily in the preoperative setting to assess cardiac risk. It assists healthcare providers in making informed decisions about further preoperative risk assessments and postoperative monitoring.\n ",
        "next_steps": "ADVICE\nAccording to the 2016 CCS Perioperative Guidelines:\nIf the RCRI is ≥1, the patient’s age is ≥65, or they are between 45-64 with significant cardiac disease*, the next step is to measure the patient’s NT-ProBNP or BNP if this is available at your institution.\nIf the NT-ProBNP is ≥300 ng/L or BNP is ≥92 ng/L, then there should be an EKG ordered in the PACU and troponins should be measured daily for 48-72 hours.\nIf, after risk stratification, the NT-ProBNP is <300 ng/L or BNP <92 ng/L, no routine postoperative cardiac monitoring is warranted.\nIf the institution does not have these assays available, then all patients should be monitored with an EKG in the PACU and troponin measurements daily for 48-72 hours if they meet one of the following: RCRI ≥1, age ≥65, or age 45-64 with the aforementioned cardiac disease.*\nThe data supporting the use of NT-ProBNP/BNP comes from a large 2014 meta-analysis of 18 studies with a total of 2,477 patients (Rodseth 2014). This study, which was in agreement with multiple previous meta-analyses, noted that for those patients with a pre-operative NT-ProBNP of <300 ng/l or BNP <92 ng/l, the rate of 30-day postoperative non-fatal MI or Death was 4.9% (3.9%-61%), and was 21.8% (19.0%-24.8%) in those with pre-operative NT-ProBNP is ≥300 ng/L or BNP is ≥92 ng/L.\n\n*Known history of coronary artery disease, cerebral vascular disease, peripheral artery disease, congestive heart failure, severe PHTN or a severe obstructive intracardiac abnormality (e.g. severe aortic stenosis, severe mitral stenosis, or severe hypertrophic obstructive cardiomyopathy)."
    },
    {
        "tool_name": "HEART Score for Major Cardiac Events",
        "function_name": "calculate_heart_score",
        "description": "The HEART Score for Major Cardiac Events is a clinical tool used to assess the risk of major adverse cardiac events in patients presenting with chest pain. It evaluates five components: History, ECG, Age, Risk factors, and Troponin levels, assigning points to each category to stratify patients into low, medium, or high risk. This score aids clinicians in emergency departments or outpatient settings in deciding on patient management strategies, including discharge, further observation, or urgent intervention.",
        "formula": "Addition of the selected points:History1\nSlightly suspicious \n 0\nModerately suspicious\n 1\nHighly suspicious\n 2\nEKG\nNormal\n 0\nNon-specific repolarization disturbance^2\n 1\nSignificant ST deviation^3\n 2\nAge (years)\n<45\n 0\n45–64 \n 1\n≥65\n 2\nRisk factors^4\nNo known risk factors\n 0\n1–2 risk factors\n 1\n≥3 risk factors or history of atherosclerotic disease\n 2\nInitial troponin5\n≤normal limit\n 0\n 1–3× normal limit\n 1\n>3× normal limit\n 2\ne.g. Retrosternal pain, pressure, radiation to jaw/left shoulder/arms, duration 5–15 min, initiated by exercise/cold/emotion, perspiration, nausea/vomiting, reaction on nitrates within mins, patient recognizes symptoms. Low risk features of chest pain include: well localized, sharp, non-exertional, no diaphoresis, no nausea or vomiting, and reproducible with palpation.\nLBBB, typical changes suggesting LVH, repolarization disorders suggesting digoxin, unchanged known repolarization disorders.\nSignificant ST-segment deviation without LBBB, LVH, or digoxin.\nHTN, hypercholesterolemia, DM, obesity (BMI >30 kg/m²), smoking (current, or smoking cessation ≤3 mo), positive family history (parent or sibling with CVD before age 65).\nUse local, regular sensitivity troponin assays and corresponding cutoffs.",
        "code": "def calculate_heart_score(history_score, ekg_score, age_score, risk_factors_score, troponin_score):\n    \"\"\"\n    Calculates the HEART Score for Major Cardiac Events based on five categories:\n    History, EKG, Age, Risk factors, and Troponin level. This score helps to\n    risk-stratify emergency department (ED) patients with chest pain into low,\n    moderate, and high-risk groups for acute coronary syndrome (ACS).\n\n    Args:\n    history_score (int): Score based on patient history assessment, where:\n        0 = Slightly suspicious,\n        1 = Moderately suspicious,\n        2 = Highly suspicious.\n    ekg_score (int): Score based on EKG findings, where:\n        0 = Normal,\n        1 = Non-specific repolarization disturbance,\n        2 = Significant ST deviation.\n    age_score (int): Score based on patient's age, where:\n        0 = less than 45,\n        1 = between 45 and 64,\n        2 = 65 or older.\n    risk_factors_score (int): Score based on number of cardiovascular risk factors, where:\n        0 = No known risk factors,\n        1 = 1–2 risk factors,\n        2 = 3 or more risk factors or history of atherosclerotic disease.\n    troponin_score (int): Score based on initial troponin levels, where:\n        0 = ≤ normal limit,\n        1 = 1–3 times normal limit,\n        2 = >3 times normal limit.\n\n    Returns:\n    int: The total HEART score, which can guide further management of chest pain patients\n         in the emergency setting. Total scores categorize risk as follows:\n         0-3 points indicate low risk,\n         4-6 points indicate moderate risk,\n         7-10 points indicate high risk.\n\n    Example:\n    >>> calculate_heart_score(2, 1, 1, 2, 1)\n    7\n    \"\"\"\n    total_score = history_score + ekg_score + age_score + risk_factors_score + troponin_score\n    return total_score\n",
        "docstring": " Calculates the HEART Score for Major Cardiac Events based on five categories:\n    History, EKG, Age, Risk factors, and Troponin level. This score helps to\n    risk-stratify emergency department (ED) patients with chest pain into low,\n    moderate, and high-risk groups for acute coronary syndrome (ACS).\n\n    Args:\n    history_score (int): Score based on patient history assessment, where:\n        0 = Slightly suspicious,\n        1 = Moderately suspicious,\n        2 = Highly suspicious.\n    ekg_score (int): Score based on EKG findings, where:\n        0 = Normal,\n        1 = Non-specific repolarization disturbance,\n        2 = Significant ST deviation.\n    age_score (int): Score based on patient's age, where:\n        0 = less than 45,\n        1 = between 45 and 64,\n        2 = 65 or older.\n    risk_factors_score (int): Score based on number of cardiovascular risk factors, where:\n        0 = No known risk factors,\n        1 = 1–2 risk factors,\n        2 = 3 or more risk factors or history of atherosclerotic disease.\n    troponin_score (int): Score based on initial troponin levels, where:\n        0 = ≤ normal limit,\n        1 = 1–3 times normal limit,\n        2 = >3 times normal limit.\n\n    Returns:\n    int: The total HEART score, which can guide further management of chest pain patients\n         in the emergency setting. Total scores categorize risk as follows:\n         0-3 points indicate low risk,\n         4-6 points indicate moderate risk,\n         7-10 points indicate high risk.\n\n    Example:\n    >>> calculate_heart_score(2, 1, 1, 2, 1)\n    7\n",
        "next_steps": "MANAGEMENT\nScores 0-3: 0.9-1.7% risk of adverse cardiac event. In the HEART Score study, these patients were discharged (0.99% in the retrospective study, 1.7% in the prospective study)\nScores 4-6: 12-16.6% risk of adverse cardiac event. In the HEART Score study, these patients were admitted to the hospital. (11.6% retrospective, 16.6% prospective)\nScores ≥7: 50-65% risk of adverse cardiac event. In the HEART Score study, these patients were candidates for early invasive measures. (65.2% retrospective, 50.1% prospective)\nA MACE (Major Adverse Cardiac Event) was defined as all-cause mortality, myocardial infarction, or coronary revascularization.\nCRITICAL ACTIONS\nDo not use if new ST-segment elevation requiring immediate intervention or clinically unstable patients."
    },
    {
        "tool_name": "APACHE II Score",
        "function_name": "calculate_apache_ii_score",
        "description": "The APACHE II Score is a severity-of-disease classification system used in intensive care units(ICU) to predict severity and hospital mortality for critically ill patients. It evaluates 12 routine physiological measurements, patient age, previous health status, and type of admission to generate a score. This score is used to calculate the patient's expected mortality rate, aiding in treatment decisions and resource allocation.",
        "formula": "Here are the parameter list of this scale:\nHistory of severe organ failure or immunocompromise(Heart Failure Class IV, cirrhosis, chronic lung disease, or dialysis-dependent)：No/Yes\nAge：years\nTemperature：°C\nMean arterial pressure：mm Hg\npH：\nHeart rate/pulse：beats per minute\nRespiratory rate：breaths per minute\nSodium：mmol/L\nPotassium：mmol/L\nCreatinine：mg/100 mL\nAcute renal failure(Note: \"acute renal failure\" was not defined in the original study. Use clinical judgment to determine whether patient has acute kidney injury.)：No/Yes\nHematocrit：%\nWhite blood cell count：total/cubic mm in\nGlasgow Coma Scale：points\nFiO₂：<50% (or non-intubated)/≥50%\n\nAddition of the selected points:Point values\n\nCriteria\tPoint values\nAge, years\n≤44\t0\n45-54\t+2\n55-64\t+3\n65-74\t+5\n>74\t+6\nHistory of severe organ insufficiency or immunocompromised\nYes, and nonoperative or emergency postoperative patient\t+5\nYes, and elective postoperative patient\t+2\nNo\t0\nRectal temperature, °C\n≥41\t+4\n39 to <41\t+3\n38.5 to <39\t+1\n36 to < 38.5\t0\n34 to <36\t+1\n32 to <34\t+2\n30 to <32\t+3\n<30\t+4\nMean arterial pressure, mmHg\n>159\t+4\n>129-159\t+3\n>109-129\t+2\n>69-109\t0\n>49-69\t+2\n≤49\t+4\nHeart rate, beats per minute\n≥180\t+4\n140 to <180\t+3\n110 to <140\t+2\n70 to <110\t0\n55 to <70\t+2\n40 to <55\t+3\n<40\t+4\nRespiratory rate, breaths per minute\n≥50\t+4\n35 to <50\t+3\n25 to <35\t+1\n12 to <25\t0\n10 to <12\t+1\n6 to <10\t+2\n<6\t+4\nOxygenation (use PaO2 if FiO2 <50%, otherwise use A-a gradient)\nA-a gradient >499\t+4\nA-a gradient 350-499\t+3\nA-a gradient 200-349\t+2\nA-a gradient <200 (if FiO2 over 49%) or pO2 >70 (if FiO2 less than 50%)\t0\nPaO2 = 61-70\t+1\nPaO2 = 55-60\t+3\nPaO2 <55\t+4\nArterial pH\n≥7.70\t+4\n7.60 to <7.70\t+3\n7.50 to <7.60\t+1\n7.33 to <7.50\t0\n7.25 to <7.33\t+2\n7.15 to <7.25\t+3\n<7.15\t+4\nSerum sodium, mmol/L\n≥180\t+4\n160 to <180\t+3\n155 to <160\t+2\n150 to <155\t+1\n130 to <150\t0\n120 to <130\t+2\n111 to <120\t+3\n<111\t+4\nSerum potassium, mmol/L\n≥7.0\t+4\n6.0 to <7.0\t+3\n5.5 to <6.0\t+1\n3.5 to <5.5\t0\n3.0 to <3.5\t+1\n2.5 to <3.0\t+2\n<2.5\t+4\nSerum creatinine, mg/100 mL\n≥3.5 and ACUTE renal failure*\t+8\n2.0 to <3.5 and ACUTE renal failure\t+6\n≥3.5 and CHRONIC renal failure\t+4\n1.5 to <2.0 and ACUTE renal failure\t+4\n2.0 to <3.5 and CHRONIC renal failure\t+3\n1.5 to <2.0 and CHRONIC renal failure\t+2\n0.6 to <1.5\t0\n<0.6\t+2\nHematocrit, %\n≥60\t+4\n50 to <60\t+2\n46 to <50\t+1\n30 to <46\t0\n20 to <30\t+2\n<20\t+4\nWhite blood count, total/cubic mm in\n≥40\t+4\n20 to <40\t+2\n15 to <20\t+1\n3 to <15\t0\n1 to <3\t+2\n<1\t+4\nGlasgow Coma Scale (GCS)\n1 - 15\t15 - [GCS Score]",
        "code": "def calculate_apache_ii_score(age, temperature, mean_arterial_pressure, heart_rate, respiratory_rate, \n                              sodium, potassium, creatinine, hematocrit, white_blood_cell_count, gcs, \n                              ph, history_of_severe_organ_insufficiency, acute_renal_failure, fio2, pao2=None, a_a_gradient=None):\n    \"\"\"\n    Calculate the APACHE II Score for a patient in the ICU.\n\n    Parameters:\n    - age (int): Age of the patient in years.\n    - temperature (float): Rectal temperature in degrees Celsius.\n    - mean_arterial_pressure (int): Mean arterial pressure in mm Hg.\n    - heart_rate (int): Heart rate in beats per minute.\n    - respiratory_rate (int): Respiratory rate in breaths per minute.\n    - sodium (float): Serum sodium in mmol/L.\n    - potassium (float): Serum potassium in mmol/L.\n    - creatinine (float): Serum creatinine in mg/100 mL.\n    - hematocrit (float): Hematocrit percentage.\n    - white_blood_cell_count (float): White blood cell count per cubic millimeter.\n    - gcs (int): Glasgow Coma Scale score, ranging from 3 (most impaired) to 15 (fully awake).\n    - ph (float): Arterial pH.\n    - history_of_severe_organ_insufficiency (int): Indicates the patient's history status, with 0 for 'No', 1 for 'Yes, and elective postoperative patient', and 2 for 'Yes, and nonoperative or emergency postoperative patient'.\n    - acute_renal_failure (int): Indicates if the patient has acute renal failure, with 0 for 'No' and 1 for 'Yes'.\n    - fio2 (int): Fraction of inspired oxygen, 0 for '<50%' and 1 for '≥50%'.\n    - pao2 (float, optional): Partial pressure of arterial oxygen, required if FiO2 < 50%.\n    - a_a_gradient (float, optional): Alveolar-arterial gradient, required if FiO2 ≥ 50%.\n\n    Returns:\n    - int: The computed APACHE II score.\n    \"\"\"\n    \n    # Age score\n    if age <= 44:\n        age_score = 0\n    elif 45 <= age <= 54:\n        age_score = 2\n    elif 55 <= age <= 64:\n        age_score = 3\n    elif 65 <= age <= 74:\n        age_score = 5\n    else:\n        age_score = 6\n\n    # History of severe organ insufficiency or immunocompromise score\n    if history_of_severe_organ_insufficiency == 0:\n        history_score = 0\n    elif history_of_severe_organ_insufficiency == 1:\n        history_score = 2\n    else:\n        history_score = 5\n\n    # Temperature score\n    if temperature >= 41:\n        temperature_score = 4\n    elif 39 <= temperature < 41:\n        temperature_score = 3\n    elif 38.5 <= temperature < 39:\n        temperature_score = 1\n    elif 36 <= temperature < 38.5:\n        temperature_score = 0\n    elif 34 <= temperature < 36:\n        temperature_score = 1\n    elif 32 <= temperature < 34:\n        temperature_score = 2\n    elif 30 <= temperature < 32:\n        temperature_score = 3\n    else:\n        temperature_score = 4\n\n    # Mean arterial pressure score\n    if mean_arterial_pressure > 159:\n        map_score = 4\n    elif 130 <= mean_arterial_pressure <= 159:\n        map_score = 3\n    elif 110 <= mean_arterial_pressure < 130:\n        map_score = 2\n    elif 70 <= mean_arterial_pressure < 110:\n        map_score = 0\n    elif 50 <= mean_arterial_pressure < 70:\n        map_score = 2\n    else:\n        map_score = 4\n\n    # Heart rate score\n    if heart_rate >= 180:\n        heart_rate_score = 4\n    elif 140 <= heart_rate < 180:\n        heart_rate_score = 3\n    elif 110 <= heart_rate < 140:\n        heart_rate_score = 2\n    elif 70 <= heart_rate < 110:\n        heart_rate_score = 0\n    elif 55 <= heart_rate < 70:\n        heart_rate_score = 2\n    elif 40 <= heart_rate < 55:\n        heart_rate_score = 3\n    else:\n        heart_rate_score = 4\n\n    # Respiratory rate score\n    if respiratory_rate >= 50:\n        respiratory_rate_score = 4\n    elif 35 <= respiratory_rate < 50:\n        respiratory_rate_score = 3\n    elif 25 <= respiratory_rate < 35:\n        respiratory_rate_score = 1\n    elif 12 <= respiratory_rate < 25:\n        respiratory_rate_score = 0\n    elif 10 <= respiratory_rate < 12:\n        respiratory_rate_score = 1\n    elif 6 <= respiratory_rate < 10:\n        respiratory_rate_score = 2\n    else:\n        respiratory_rate_score = 4\n\n    # Oxygenation score\n    if fio2 == 1:\n        if a_a_gradient > 499:\n            oxygenation_score = 4\n        elif 350 <= a_a_gradient <= 499:\n            oxygenation_score = 3\n        elif 200 <= a_a_gradient < 350:\n            oxygenation_score = 2\n        else:\n            oxygenation_score = 0\n    else:\n        if pao2 <= 55:\n            oxygenation_score = 4\n        elif 56 <= pao2 <= 60:\n            oxygenation_score = 3\n        elif 61 <= pao2 <= 70:\n            oxygenation_score = 1\n        else:\n            oxygenation_score = 0\n\n    # pH score\n    if ph >= 7.7:\n        ph_score = 4\n    elif 7.6 <= ph < 7.7:\n        ph_score = 3\n    elif 7.5 <= ph < 7.6:\n        ph_score = 1\n    elif 7.33 <= ph < 7.5:\n        ph_score = 0\n    elif 7.25 <= ph < 7.33:\n        ph_score = 2\n    elif 7.15 <= ph < 7.25:\n        ph_score = 3\n    else:\n        ph_score = 4\n\n    # Sodium score\n    if sodium >= 180:\n        sodium_score = 4\n    elif 160 <= sodium < 180:\n        sodium_score = 3\n    elif 155 <= sodium < 160:\n        sodium_score = 2\n    elif 150 <= sodium < 155:\n        sodium_score = 1\n    elif 130 <= sodium < 150:\n        sodium_score = 0\n    elif 120 <= sodium < 130:\n        sodium_score = 2\n    elif 111 <= sodium < 120:\n        sodium_score = 3\n    else:\n        sodium_score = 4\n\n    # Potassium score\n    if potassium >= 7.0:\n        potassium_score = 4\n    elif 6.0 <= potassium < 7.0:\n        potassium_score = 3\n    elif 5.5 <= potassium < 6.0:\n        potassium_score = 1\n    elif 3.5 <= potassium < 5.5:\n        potassium_score = 0\n    elif 3.0 <= potassium < 3.5:\n        potassium_score = 1\n    elif 2.5 <= potassium < 3.0:\n        potassium_score = 2\n    else:\n        potassium_score = 4\n\n    # Creatinine score\n    if creatinine >= 3.5:\n        if acute_renal_failure:\n            creatinine_score = 8\n        else:\n            creatinine_score = 4\n    elif 2.0 <= creatinine < 3.5:\n        if acute_renal_failure:\n            creatinine_score = 6\n        else:\n            creatinine_score = 3\n    elif 1.5 <= creatinine < 2.0:\n        if acute_renal_failure:\n            creatinine_score = 4\n        else:\n            creatinine_score = 2\n    elif 0.6 <= creatinine < 1.5:\n        creatinine_score = 0\n    else:\n        creatinine_score = 2\n\n    # Hematocrit score\n    if hematocrit >= 60:\n        hematocrit_score = 4\n    elif 50 <= hematocrit < 60:\n        hematocrit_score = 2\n    elif 46 <= hematocrit < 50:\n        hematocrit_score = 1\n    elif 30 <= hematocrit < 46:\n        hematocrit_score = 0\n    elif 20 <= hematocrit < 30:\n        hematocrit_score = 2\n    else:\n        hematocrit_score = 4\n\n    # White blood cell count score\n    if white_blood_cell_count >= 40:\n        wbc_score = 4\n    elif 20 <= white_blood_cell_count < 40:\n        wbc_score = 2\n    elif 15 <= white_blood_cell_count < 20:\n        wbc_score = 1\n    elif 3 <= white_blood_cell_count < 15:\n        wbc_score = 0\n    elif 1 <= white_blood_cell_count < 3:\n        wbc_score = 2\n    else:\n        wbc_score = 4\n\n    # Glasgow Coma Scale score\n    gcs_score = 15 - gcs\n\n    # Calculate total APACHE II score\n    total_score = (age_score + temperature_score + map_score + heart_rate_score + respiratory_rate_score +\n                   oxygenation_score + ph_score + sodium_score + potassium_score + creatinine_score +\n                   hematocrit_score + wbc_score + gcs_score + history_score)\n\n    return total_score\n\n",
        "docstring": "Calculate the APACHE II Score for a patient in the ICU, to assess severity and predict mortality.\n\n    Parameters:\n    - age (int): Age of the patient in years.\n    - temperature (float): Rectal temperature in degrees Celsius.\n    - mean_arterial_pressure (int): Mean arterial pressure in mm Hg.\n    - heart_rate (int): Heart rate in beats per minute.\n    - respiratory_rate (int): Respiratory rate in breaths per minute.\n    - sodium (float): Serum sodium in mmol/L.\n    - potassium (float): Serum potassium in mmol/L.\n    - creatinine (float): Serum creatinine in mg/100 mL.\n    - hematocrit (float): Hematocrit percentage.\n    - white_blood_cell_count (float): White blood cell count per cubic millimeter.\n    - gcs (int): Glasgow Coma Scale score, ranging from 3 (most impaired) to 15 (fully awake).\n    - ph (float): Arterial pH.\n    - history_of_severe_organ_insufficiency (int): Indicates the patient's history status, with 0 for 'No', 1 for 'Yes, and elective postoperative patient', and 2 for 'Yes, and nonoperative or emergency postoperative patient'.\n    - acute_renal_failure (int): Indicates if the patient has acute renal failure, with 0 for 'No' and 1 for 'Yes'.\n    - fio2 (int): Fraction of inspired oxygen, 0 for '<50%' and 1 for '≥50%'.\n    - pao2 (float, optional): Partial pressure of arterial oxygen, required if FiO2 < 50%.\n    - a_a_gradient (float, optional): Alveolar-arterial gradient, required if FiO2 ≥ 50%.\n\n    Returns:\n    - int: The computed APACHE II score.\n",
        "next_steps": "MANAGEMENT\nThe APACHE II score was designed as a mortality prediction tool but was not intended to influence the medical management of patients during their ICU stay.\nCRITICAL ACTIONS\nA number of variables are used to calculate the APACHE II score. The worst values recorded during the initial 24 hours in the ICU should be used. Alternatively, the variables initially recorded during the patient’s admission can be used for practical reasons.\nThe APACHE II score is calculated at the beginning of the ICU admission to help determine the patient’s mortality risk for the admission. It is not calculated sequentially and is not meant to show improvement or effect of interventions. As such it should not be used to direct medical management."
    },
    {
        "tool_name": "Fibrosis-4 (FIB-4) Index for Liver Fibrosis",
        "function_name": "calculate_fib4",
        "description": "The Fibrosis-4 (FIB-4) Index is a clinical tool used to estimate the level of scarring, or fibrosis, in the liver, particularly helpful in assessing liver damage in patients with chronic liver diseases like hepatitis C and NAFLD. It calculates scores based on age, and blood tests results—namely, platelet count, aspartate aminotransferase (AST), and alanine aminotransferase (ALT). FIB-4 is widely used in both clinical and outpatient settings as a non-invasive, cost-effective alternative to liver biopsy, helping to identify patients who may require further hepatological assessment or monitoring.",
        "formula": "FIB-4 Score = (Age* x AST) / (Platelets x √(ALT))\n*Use with caution in patients <35 or >65 years old, as the score has been shown to be less reliable in these patients.",
        "code": "def calculate_fib4(age, ast, platelets, alt):\n    \"\"\"\n    Calculate the Fibrosis-4 (FIB-4) Index for Liver Fibrosis.\n\n    This function calculates the FIB-4 Index, a non-invasive scoring system used to estimate the\n    level of liver fibrosis. It is particularly useful for patients with risk factors for liver disease\n    such as chronic hepatitis, alcoholic liver disease, NAFLD, and other liver conditions. The FIB-4\n    Index helps monitor liver fibrosis over time without the need for invasive procedures like liver\n    biopsy, which carries risks and may only provide a limited assessment due to sampling errors.\n\n    Parameters:\n        age (int or float): Age of the patient in years.\n        ast (float): Aspartate aminotransferase level in U/L.\n        platelets (float): Platelet count is measured in units of × 10⁹ per liter (× 10⁹ / L).\n        alt (float): Alanine aminotransferase level in U/L.\n\n    Returns:\n        float: The FIB-4 Index score, which can be used to categorize liver fibrosis into mild,\n               moderate, or severe stages.\n\n    Note:\n        The accuracy of FIB-4 Index may be reduced in patients younger than 35 or older than 65 years.\n    \"\"\"\n    import math\n    if age < 35 or age > 65:\n        print(\"Warning: FIB-4 score may be less reliable in patients under 35 or over 65 years old.\")\n    \n    fib4_score = (age * ast) / (platelets * math.sqrt(alt))\n    return fib4_score\n",
        "docstring": "Calculate the Fibrosis-4 (FIB-4) Index for Liver Fibrosis.\n\n    This function calculates the FIB-4 Index, a non-invasive scoring system used to estimate the\n    level of liver fibrosis. It is particularly useful for patients with risk factors for liver disease\n    such as chronic hepatitis, alcoholic liver disease, NAFLD, and other liver conditions. The FIB-4\n    Index helps monitor liver fibrosis over time without the need for invasive procedures like liver\n    biopsy, which carries risks and may only provide a limited assessment due to sampling errors.\n\n    Parameters:\n        age (int or float): Age of the patient in years.\n        ast (float): Aspartate aminotransferase level in U/L.\n        platelets (float): Platelet count is measured in units of × 10⁹ per liter (× 10⁹ / L).\n        alt (float): Alanine aminotransferase level in U/L.\n\n    Returns:\n        float: The FIB-4 Index score, which can be used to categorize liver fibrosis into mild,\n               moderate, or severe stages.\n\n    Note:\n        The accuracy of FIB-4 Index may be reduced in patients younger than 35 or older than 65 years.\n",
        "next_steps": "ADVICE\nLow fibrosis scores may be appropriate candidates for medical management and may not require liver biopsy if FIB-4 scores continue to stay low.\nSevere fibrosis/cirrhosis scores may need liver biopsy for confirmation of cirrhosis unless there are other clinical or imaging signs of progression to end-stage liver disease."
    },
    {
        "tool_name": "Body Mass Index (BMI) and Body Surface Area (BSA)",
        "function_name": "calculate_bmi_bsa",
        "description": "The Body Mass Index (BMI) is a simple calculation used to assess whether an individual has a healthy body weight for a person of their height, widely used in general health assessments and public health studies. Body Surface Area (BSA) is used to calculate medication dosages and medical indicators, such as renal function, more accurately based on the physical body area of an individual. While BMI is used for general evaluations of weight-related health risks, BSA is more specific and is often applied in clinical settings to tailor treatments to individual patient needs.",
        "formula": "Body mass index, kg/m2 = weight, kg / (height, m)2\nBody surface area (the Mosteller formula), m2 = [ Height, cm x Weight, kg  / 3600 ]^{1/2}",
        "code": "def calculate_bmi_bsa(weight_kg, height_cm):\n    \"\"\"\n    Calculate the Body Mass Index (BMI) and Body Surface Area (BSA) for an individual.\n\n    Args:\n    weight_kg (float): The weight of the individual in kilograms.\n    height_cm (float): The height of the individual in centimeters.\n\n    Returns:\n    list: A list containing the BMI and BSA. The first element is the BMI (kg/m^2), \n          and the second element is the BSA (m^2) calculated using the Mosteller formula.\n\n    Description:\n    The Body Mass Index (BMI) is a simple index of weight-for-height commonly used to classify \n    underweight, overweight, and obesity in adults. It is calculated by dividing the weight in \n    kilograms by the square of the height in meters. Although widely used, BMI has limitations,\n    particularly for very muscular individuals and in different ethnic groups with varying body \n    statures, where it may not accurately reflect body fat percentages.\n\n    Body Surface Area (BSA) is used in many medical tasks, including dosing for certain \n    medications where dosage based on body weight may be inappropriate. BSA is calculated using \n    the Mosteller formula, which takes into account both the weight and the height of the individual.\n\n    Example:\n    For an individual weighing 70 kg and 175 cm tall, the function would be called as follows:\n    results = calculate_bmi_bsa(70, 175)\n    print(results)  # Output: [22.857142857142858, 1.807142857142857]\n    \"\"\"\n    height_m = height_cm / 100.0  # Convert height from cm to m\n    bmi = weight_kg / (height_m ** 2)  # Calculate BMI using kg/m^2\n\n    bsa = (height_cm * weight_kg / 3600) ** 0.5  # Calculate BSA using the Mosteller formula\n\n    return [bmi, bsa]\n",
        "docstring": "Calculate the Body Mass Index (BMI) and Body Surface Area (BSA) using provided weight and height.\n\n    BMI is a measure of body fat based on weight and height that applies to adult men and women.\n    It can be misleading for very muscular individuals or in specific ethnic groups with different\n    body compositions and statures.\n\n    BSA is often used in medical settings to determine the dosages of medications that are more \n    accurately calculated using body surface area rather than weight.\n\n    Parameters:\n    - weight_kg (float): Weight of the individual in kilograms.\n    - height_cm (float): Height of the individual in centimeters.\n\n    Returns:\n    - dict: Dictionary containing 'BMI' and 'BSA' with their respective values.",
        "next_steps": "ADVICE\nOverweight (BMI >25) and obese patients (BMI >30) should be counseled on diet and exercise."
    },
    {
        "tool_name": "Calcium Correction for Hypoalbuminemia",
        "function_name": "corrected_calcium",
        "description": "Calcium correction for hypoalbuminemia is used to accurately assess the level of bioavailable calcium in patients with low albumin levels, which can distort true calcium readings. This correction is particularly important in clinical settings such as hospitals and clinics where patients may present with malnutrition, liver disease, or other conditions affecting albumin production. The corrected calcium formula helps guide appropriate treatment decisions, ensuring patient safety and effective management of calcium-related disorders.",
        "formula": "Corrected Calcium = (0.8 * (Normal Albumin - Pt's Albumin)) + Serum Ca\nNote: formula assumes albumin units in g/dL.",
        "code": "def corrected_calcium(normal_albumin, patient_albumin, serum_ca):\n    \"\"\"\n    Calculate the corrected calcium level in patients with suspected hypocalcemia\n    who have low albumin levels. Hypocalcemia might not be apparent if serum albumin is low,\n    thus this formula adjusts the calcium level based on albumin discrepancy.\n\n    Args:\n    normal_albumin (float): The normal albumin level in g/dL assumed for the calculation.\n    patient_albumin (float): The patient's measured albumin level in g/dL.\n    serum_ca (float): The patient's measured serum calcium level in mg/dL.\n\n    Returns:\n    float: The corrected serum calcium level in mg/dL.\n\n    Example:\n    >>> corrected_calcium(4.0, 3.2, 8.5)\n    8.84\n    \"\"\"\n    return (0.8 * (normal_albumin - patient_albumin)) + serum_ca\n",
        "docstring": "Calculate the corrected calcium level in patients with suspected hypocalcemia\n    who have low albumin levels. Hypocalcemia might not be apparent if serum albumin is low,\n    thus this formula adjusts the calcium level based on albumin discrepancy.\n\n    Args:\n    normal_albumin (float): The normal albumin level in g/dL assumed for the calculation.\n    patient_albumin (float): The patient's measured albumin level in g/dL.\n    serum_ca (float): The patient's measured serum calcium level in mg/dL.\n\n    Returns:\n    float: The corrected serum calcium level in mg/dL.\n\n    Example:\n    >>> corrected_calcium(4.0, 3.2, 8.5)\n    8.84\n ",
        "next_steps": "ADVICE\nPatients with hypercalcemia may initially require volume resuscitation; loop diuretics can help with renal excretion of calcium, and bisphosphonates are also effective, especially in malignancy-related hypercalcemia."
    },
    {
        "tool_name": "HOMA-IR (Homeostatic Model Assessment for Insulin Resistance)",
        "function_name": "calculate_homa_ir",
        "description": "The HOMA-IR (Homeostatic Model Assessment for Insulin Resistance) is a method used to assess insulin resistance, a key feature of conditions like type 2 diabetes and metabolic syndrome. It calculates insulin resistance based on fasting blood glucose and insulin levels, providing a quick and simple estimate. HOMA-IR is commonly used in both clinical research and practice to evaluate metabolic health and monitor the effectiveness of interventions.",
        "formula": "Score = (Fasting insulin, uIU/mL)*(Fasting glucose, mg/dL) / 405",
        "code": "def calculate_homa_ir(fasting_insulin, fasting_glucose):\n    \"\"\"\n    Calculate the Homeostatic Model Assessment for Insulin Resistance (HOMA-IR).\n\n    The HOMA-IR is a clinical tool used to estimate insulin resistance (IR), which can be\n    indicative of potential glucose intolerance and diabetes. It is particularly useful\n    in scenarios where more invasive and time-consuming methods like the clamp measurement\n    (considered the gold standard for measuring IR) are not feasible. Although the HOMA-IR\n    provides a reasonable correlation with clamp measurements, it is less accurate on an\n    individual basis, which suggests a need for caution in its clinical application and\n    interpretation.\n\n    Parameters:\n    - fasting_insulin (float): The fasting insulin level in uIU/mL.\n    - fasting_glucose (float): The fasting glucose level in mg/dL.\n\n    Returns:\n    - float: The estimated insulin resistance (HOMA-IR score).\n\n    Formula:\n    HOMA-IR score = (fasting insulin * fasting glucose) / 405\n    \"\"\"\n    homa_ir_score = (fasting_insulin * fasting_glucose) / 405\n    return homa_ir_score\n",
        "docstring": "Calculate the Homeostatic Model Assessment for Insulin Resistance (HOMA-IR).\n\n    The HOMA-IR is a clinical tool used to estimate insulin resistance (IR), which can be\n    indicative of potential glucose intolerance and diabetes. It is particularly useful\n    in scenarios where more invasive and time-consuming methods like the clamp measurement\n    (considered the gold standard for measuring IR) are not feasible. Although the HOMA-IR\n    provides a reasonable correlation with clamp measurements, it is less accurate on an\n    individual basis, which suggests a need for caution in its clinical application and\n    interpretation.\n\n    Parameters:\n    - fasting_insulin (float): The fasting insulin level in uIU/mL.\n    - fasting_glucose (float): The fasting glucose level in mg/dL.\n\n    Returns:\n    - float: The estimated insulin resistance (HOMA-IR score).\n\n    Formula:\n    HOMA-IR score = (fasting insulin * fasting glucose) / 405",
        "next_steps": "ADVICE\nThe HOMA-IR score may be most useful for epidemiologic, population-based, and other group level assessments. In addition, optimal diagnostic cutoffs for IR-related conditions seem to vary considerably from one population or group to the next, so care should be taken to customize cutoffs when using the score.\nMANAGEMENT\nWe are unaware of validated management algorithms using the HOMA-IR score.\nCRITICAL ACTIONS\nThe HOMA-IR score should not be used in patients on insulin, and studies have questioned its accuracy in those with impaired glucose tolerance, normal BMI, the elderly, and others."
    },
    {
        "tool_name": "CURB-65 Score for Pneumonia Severity",
        "function_name": "curb_65_score",
        "description": "The CURB-65 score is a clinical tool used to assess the severity of pneumonia and guide decisions regarding the need for hospitalization or intensive care. It evaluates five factors: confusion, urea levels, respiratory rate, blood pressure, and age over 65 years. This scoring system helps healthcare providers determine the appropriate treatment setting, enhancing patient management and resource allocation.",
        "formula": "Addition of the selected points:\nConfusion\n\n\nNo0\n\nYes+1\nBUN >19 mg/dL (>7 mmol/L urea)\n\n\nNo0\n\nYes+1\nRespiratory Rate ≥30\n\n\nNo0\n\nYes+1\nSystolic BP <90 mmHg or Diastolic BP ≤60 mmHg\n\n\nNo0\n\nYes+1\nAge ≥65\n\n\nNo0\n\nYes+1",
        "code": "def curb_65_score(confusion: int, bun: int, respiratory_rate: int, blood_pressure: int, age: int) -> int:\n    \"\"\"\n    Calculate the CURB-65 Score for Pneumonia Severity.\n\n    The CURB-65 calculator can be used in the emergency department setting to risk stratify a patient’s community acquired pneumonia.\n    It includes points for confusion, blood urea nitrogen (BUN), respiratory rate, blood pressure, and age.\n    \n    Parameters:\n    confusion (int): Confusion status, where 0 = No and 1 = Yes.\n    bun (int): Blood urea nitrogen status, where 0 = BUN ≤ 19 mg/dL (≤ 7 mmol/L urea) and 1 = BUN > 19 mg/dL (> 7 mmol/L urea).\n    respiratory_rate (int): Respiratory rate status, where 0 = < 30 breaths/min and 1 = ≥ 30 breaths/min.\n    blood_pressure (int): Blood pressure status, where 0 = Systolic BP ≥ 90 mmHg and Diastolic BP > 60 mmHg, and 1 = Systolic BP < 90 mmHg or Diastolic BP ≤ 60 mmHg.\n    age (int): Age status, where 0 = < 65 years and 1 = ≥ 65 years.\n\n    Returns:\n    int: The CURB-65 score which ranges from 0 to 5, indicating the severity of pneumonia.\n\n    Usage:\n    This function can be used in emergency settings to quickly assess the severity of pneumonia in patients and to guide decisions regarding hospitalization and treatment initiation.\n    \n    Example:\n    >>> curb_65_score(1, 1, 1, 0, 1)\n    4\n    \"\"\"\n    return confusion + bun + respiratory_rate + blood_pressure + age\n",
        "docstring": "\n    Calculate the CURB-65 Score for Pneumonia Severity.\n\n    The CURB-65 calculator can be used in the emergency department setting to risk stratify a patient’s community acquired pneumonia.\n    It includes points for confusion, blood urea nitrogen (BUN), respiratory rate, blood pressure, and age.\n    \n    Parameters:\n    confusion (int): Confusion status, where 0 = No and 1 = Yes.\n    bun (int): Blood urea nitrogen status, where 0 = BUN ≤ 19 mg/dL (≤ 7 mmol/L urea) and 1 = BUN > 19 mg/dL (> 7 mmol/L urea).\n    respiratory_rate (int): Respiratory rate status, where 0 = < 30 breaths/min and 1 = ≥ 30 breaths/min.\n    blood_pressure (int): Blood pressure status, where 0 = Systolic BP ≥ 90 mmHg and Diastolic BP > 60 mmHg, and 1 = Systolic BP < 90 mmHg or Diastolic BP ≤ 60 mmHg.\n    age (int): Age status, where 0 = < 65 years and 1 = ≥ 65 years.\n\n    Returns:\n    int: The CURB-65 score which ranges from 0 to 5, indicating the severity of pneumonia.\n\n    Usage:\n    This function can be used in emergency settings to quickly assess the severity of pneumonia in patients and to guide decisions regarding hospitalization and treatment initiation.\n    \n    Example:\n    >>> curb_65_score(1, 1, 1, 0, 1)\n    4\n   ",
        "next_steps": "ADVICE\nWhile many pneumonias are actually viral in nature, typical practice is to provide a course of antibiotics given the pneumonia may be bacterial.\nDisposition (inpatient vs. outpatient) often dictates further care and management -- including lab testing, blood cultures, etc.\nMANAGEMENT\nThe CURB-65 scores range from 0 to 5. Assign points as in the table based on confusion status, urea level, respiratory rate, blood pressure, and age. Clinical management decisions can be made based on the score, as described in the validation study below:\nScore Risk Disposition\n0 or 1 1.5% mortality Outpatient care\n2 9.2% mortality Inpatient vs. observation admission\n≥3 22% mortality Inpatient admission with consideration for ICU admission with score of 4 or 5\nCRITICAL ACTIONS\nFor patients scoring high on CURB-65, it would be prudent to ensure initial triage has not missed the presence of sepsis. Evaluation of SIRS criteria would be beneficial."
    },
    {
        "tool_name": "PSI/PORT Score: Pneumonia Severity Index for CAP",
        "function_name": "calculate_psi_port_score",
        "description": "The Pneumonia Severity Index (PSI) or PORT Score is a clinical tool used to categorize the severity of community-acquired pneumonia (CAP) and assist in deciding the appropriate treatment setting. It evaluates factors such as age, coexisting diseases, vital signs, and laboratory findings to estimate the risk of mortality and need for hospitalization. This scoring system helps clinicians determine whether patients can be safely managed as outpatients or require more intensive inpatient care.",
        "formula": "Addition of the selected points:\nAge\n\nyears\nSex\n\n\nFemale-10\n\nMale0\nNursing home resident\n\n\nNo0\n\nYes+10\nNeoplastic disease\n\n\nNo0\n\nYes+30\nLiver disease history\n\n\nNo0\n\nYes+20\nCHF history\n\n\nNo0\n\nYes+10\nCerebrovascular disease history\n\n\nNo0\n\nYes+10\nRenal disease history\n\n\nNo0\n\nYes+10\nAltered mental status\n\n\nNo0\n\nYes+20\nRespiratory rate ≥30 breaths/min\n\n\nNo0\n\nYes+20\nSystolic blood pressure <90 mmHg\n\n\nNo0\n\nYes+20\nTemperature <35°C (95°F) or >39.9°C (103.8°F)\n\n\nNo0\n\nYes+15\nPulse ≥125 beats/min\n\n\nNo0\n\nYes+10\npH <7.35\n\n\nNo0\n\nYes+30\nBUN ≥30 mg/dL or ≥11 mmol/L\n\n\nNo0\n\nYes+20\nSodium <130 mmol/L\n\n\nNo0\n\nYes+20\nGlucose ≥250 mg/dL or ≥14 mmol/L\n\n\nNo0\n\nYes+10\nHematocrit <30%\n\n\nNo0\n\nYes+10\nPartial pressure of oxygen <60 mmHg or <8 kPa\n\n\nNo0\n\nYes+10\nPleural effusion on x-ray\n\n\nNo0\n\nYes+10",
        "code": "def calculate_psi_port_score(age, sex, nursing_home_resident, neoplastic_disease, liver_disease, chf_history,\n                             cerebrovascular_disease, renal_disease, altered_mental_status, respiratory_rate,\n                             systolic_bp, temperature, pulse, blood_ph, bun, sodium, glucose, hematocrit, oxygen_pressure,\n                             pleural_effusion):\n    \"\"\"\n    Calculate the PSI/PORT Score for Community-Acquired Pneumonia (CAP).\n\n    The PSI/PORT Score helps to risk stratify patients with community-acquired pneumonia in clinical or\n    emergency department settings. This score may underestimate severe pneumonia in younger, otherwise healthy patients.\n    It is important to consider other clinical factors such as sepsis, which may require additional testing\n    like lactate levels. Any patient over 50 years of age is automatically classified as risk class 2.\n\n    Parameters:\n    age (int): Patient's age in years.\n    sex (str): Patient's sex, either 'Female' or 'Male'.\n    nursing_home_resident (bool): True if the patient is a nursing home resident, False otherwise.\n    neoplastic_disease (bool): True if the patient has a history of neoplastic disease, False otherwise.\n    liver_disease (bool): True if the patient has a history of liver disease, False otherwise.\n    chf_history (bool): True if the patient has a history of congestive heart failure, False otherwise.\n    cerebrovascular_disease (bool): True if the patient has a history of cerebrovascular disease, False otherwise.\n    renal_disease (bool): True if the patient has a history of renal disease, False otherwise.\n    altered_mental_status (bool): True if the patient has altered mental status, False otherwise.\n    respiratory_rate (bool): True if respiratory rate is ≥30 breaths/min, False otherwise.\n    systolic_bp (bool): True if systolic blood pressure is <90 mmHg, False otherwise.\n    temperature (bool): True if temperature is <35°C or >39.9°C, False otherwise.\n    pulse (bool): True if pulse rate is ≥125 beats/min, False otherwise.\n    blood_ph (bool): True if blood pH is <7.35, False otherwise.\n    bun (bool): True if BUN is ≥30 mg/dL or ≥11 mmol/L, False otherwise.\n    sodium (bool): True if sodium level is <130 mmol/L, False otherwise.\n    glucose (bool): True if glucose level is ≥250 mg/dL or ≥14 mmol/L, False otherwise.\n    hematocrit (bool): True if hematocrit is <30%, False otherwise.\n    oxygen_pressure (bool): True if partial pressure of oxygen is <60 mmHg or <8 kPa, False otherwise.\n    pleural_effusion (bool): True if there is pleural effusion on x-ray, False otherwise.\n\n    Returns:\n    int: The total PSI/PORT Score indicating the severity of the pneumonia.\n    \"\"\"\n    score = age\n    if sex == 'Female':\n        score -= 10\n\n    score += 10 if nursing_home_resident else 0\n    score += 30 if neoplastic_disease else 0\n    score += 20 if liver_disease else 0\n    score += 10 if chf_history else 0\n    score += 10 if cerebrovascular_disease else 0\n    score += 10 if renal_disease else 0\n    score += 20 if altered_mental_status else 0\n    score += 20 if respiratory_rate else 0\n    score += 20 if systolic_bp else 0\n    score += 15 if temperature else 0\n    score += 10 if pulse else 0\n    score += 30 if blood_ph else 0\n    score += 20 if bun else 0\n    score += 20 if sodium else 0\n    score += 10 if glucose else 0\n    score += 10 if hematocrit else 0\n    score += 10 if oxygen_pressure else 0\n    score += 10 if pleural_effusion else 0\n\n    return score\n",
        "docstring": "Calculate the PSI/PORT Score for Community-Acquired Pneumonia (CAP).\n\n    The PSI/PORT Score helps to risk stratify patients with community-acquired pneumonia in clinical or\n    emergency department settings. This score may underestimate severe pneumonia in younger, otherwise healthy patients.\n    It is important to consider other clinical factors such as sepsis, which may require additional testing\n    like lactate levels. Any patient over 50 years of age is automatically classified as risk class 2.\n\n    Parameters:\n    age (int): Patient's age in years.\n    sex (str): Patient's sex, either 'Female' or 'Male'.\n    nursing_home_resident (bool): True if the patient is a nursing home resident, False otherwise.\n    neoplastic_disease (bool): True if the patient has a history of neoplastic disease, False otherwise.\n    liver_disease (bool): True if the patient has a history of liver disease, False otherwise.\n    chf_history (bool): True if the patient has a history of congestive heart failure, False otherwise.\n    cerebrovascular_disease (bool): True if the patient has a history of cerebrovascular disease, False otherwise.\n    renal_disease (bool): True if the patient has a history of renal disease, False otherwise.\n    altered_mental_status (bool): True if the patient has altered mental status, False otherwise.\n    respiratory_rate (bool): True if respiratory rate is ≥30 breaths/min, False otherwise.\n    systolic_bp (bool): True if systolic blood pressure is <90 mmHg, False otherwise.\n    temperature (bool): True if temperature is <35°C or >39.9°C, False otherwise.\n    pulse (bool): True if pulse rate is ≥125 beats/min, False otherwise.\n    blood_ph (bool): True if blood pH is <7.35, False otherwise.\n    bun (bool): True if BUN is ≥30 mg/dL or ≥11 mmol/L, False otherwise.\n    sodium (bool): True if sodium level is <130 mmol/L, False otherwise.\n    glucose (bool): True if glucose level is ≥250 mg/dL or ≥14 mmol/L, False otherwise.\n    hematocrit (bool): True if hematocrit is <30%, False otherwise.\n    oxygen_pressure (bool): True if partial pressure of oxygen is <60 mmHg or <8 kPa, False otherwise.\n    pleural_effusion (bool): True if there is pleural effusion on x-ray, False otherwise.\n\n    Returns:\n    int: The total PSI/PORT Score indicating the severity of the pneumonia.",
        "next_steps": "ADVICE\nWhile many pneumonias are actually viral in nature, typical practice is to provide a course of antibiotics given the pneumonia may be bacterial.\nDisposition (inpatient vs. outpatient) often dictates further care and management -- including lab testing, blood cultures, etc.\nMANAGEMENT\nStep 1:\nIf the patient is >50 years of age, assign to risk class II - V and proceed to step 2.\nIf the patient is <50 years of age, but has a history of neoplastic disease, congestive heart failure, cerebrovascular disease, renal disease or liver disease, assign to risk class II - V and proceed to step 2.\nIf the patient has an altered mental status, pulse ≥ 125/minute, respiratory rate ≥ 30/minute, systolic blood pressure ≤ 90 mm Hg, or temperature < 35° C or ≥ 40° C, assign to risk class II - V and proceed to step 2\nIf none of the above apply, assign to risk class I = low risk.\nStep 2:\nAssign points based on age, gender, nursing home residence, co-morbid illness, physical examination findings, and laboratory and radiographic findings as listed above.\nPoint distribution:\nScore Risk Disposition\n≤70 Low risk Outpatient care\n71-90 Low risk Outpatient vs. Observation admission\n91-130 Moderate risk Inpatient admission\n>130 High risk Inpatient admission\nCRITICAL ACTIONS\nFor patients scoring high on PSI, it would be prudent to ensure initial triage has not missed the presence of sepsis. Evaluation of SIRS criteria would be beneficial."
    },
    {
        "tool_name": "Child-Pugh Score for Cirrhosis Mortality",
        "function_name": "calculate_child_pugh_score",
        "description": "The Child-Pugh Score is a clinical tool used to assess the prognosis of chronic liver disease, primarily cirrhosis. It evaluates the severity of cirrhosis based on five clinical measures: bilirubin, albumin levels, prothrombin time, ascites, and hepatic encephalopathy. This score helps healthcare providers determine the appropriate treatment strategy and predict patient survival.",
        "formula": "Addition of the selected points:Bilirubin (Total)\n\n  <2 mg/dL (<34.2 µmol/L)\n+1\n\n2-3 mg/dL (34.2-51.3 µmol/L)\n+2\n\n>3 mg/dL (>51.3 µmol/L)\n+3\nAlbumin\n\n>3.5 g/dL (>35 g/L)\n+1\n\n2.8-3.5 g/dL (28-35 g/L)\n+2\n\n<2.8 g/dL (<28 g/L)\n+3\nINR\n\n<1.7\n+1\n\n1.7-2.3\n+2\n\n>2.3\n+3\nAscites\n\nAbsent\n+1\n\nSlight\n+2\n\nModerate\n+3\nEncephalopathy\nSee encephalopathy grades in Evidence > Facts & Figures\n\nNo Encephalopathy\n+1\n\nGrade 1-2\n+2\n\nGrade 3-4\n+3",
        "code": "def calculate_child_pugh_score(bilirubin, albumin, inr, ascites, encephalopathy):\n    \"\"\"\n    Calculate the Child-Pugh Score for Cirrhosis Mortality.\n\n    The Child-Pugh Score helps estimate the prognosis for a patient with cirrhosis.\n    Note that newer scores like the MELD and MELD-Na are generally preferred for their\n    increased accuracy in prognosis.\n\n    Parameters:\n    - bilirubin (float): Total bilirubin level in mg/dL.\n    - albumin (float): Albumin level in g/dL.\n    - inr (float): International Normalized Ratio.\n    - ascites (str): Describes the presence of ascites ('Absent', 'Slight', 'Moderate').\n    - encephalopathy (int): Grade of hepatic encephalopathy (0 for none, 1-2 for Grade 1-2, 3-4 for Grade 3-4).\n\n    Returns:\n    - int: The Child-Pugh Score, ranging from 5 (best) to 15 (worst).\n    \"\"\"\n\n    # Points for Bilirubin\n    if bilirubin < 2:\n        bilirubin_points = 1\n    elif 2 <= bilirubin <= 3:\n        bilirubin_points = 2\n    else:\n        bilirubin_points = 3\n\n    # Points for Albumin\n    if albumin > 3.5:\n        albumin_points = 1\n    elif 2.8 <= albumin <= 3.5:\n        albumin_points = 2\n    else:\n        albumin_points = 3\n\n    # Points for INR\n    if inr < 1.7:\n        inr_points = 1\n    elif 1.7 <= inr <= 2.3:\n        inr_points = 2\n    else:\n        inr_points = 3\n\n    # Points for Ascites\n    if ascites == 'Absent':\n        ascites_points = 1\n    elif ascites == 'Slight':\n        ascites_points = 2\n    else:\n        ascites_points = 3\n\n    # Points for Encephalopathy\n    if encephalopathy == 0:\n        encephalopathy_points = 1\n    elif encephalopathy in [1, 2]:\n        encephalopathy_points = 2\n    else:\n        encephalopathy_points = 3\n\n    # Total Child-Pugh Score\n    total_score = (bilirubin_points + albumin_points + inr_points +\n                   ascites_points + encephalopathy_points)\n\n    return total_score\n",
        "docstring": "Calculate the Child-Pugh Score for Cirrhosis Mortality.\n\n    The Child-Pugh Score helps estimate the prognosis for a patient with cirrhosis.\n    Note that newer scores like the MELD and MELD-Na are generally preferred for their\n    increased accuracy in prognosis.\n\n    Parameters:\n    - bilirubin (float): Total bilirubin level in mg/dL.\n    - albumin (float): Albumin level in g/dL.\n    - inr (float): International Normalized Ratio.\n    - ascites (str): Describes the presence of ascites ('Absent', 'Slight', 'Moderate').\n    - encephalopathy (int): Grade of hepatic encephalopathy (0 for none, 1-2 for Grade 1-2, 3-4 for Grade 3-4).\n\n    Returns:\n    - int: The Child-Pugh Score, ranging from 5 (best) to 15 (worst).",
        "next_steps": "ADVICE\nFor patients with unexpectedly high or low scores, consider comparing the Child-Pugh score with another score like the MELD Score."
    },
    {
        "tool_name": "PERC Rule for Pulmonary Embolism",
        "function_name": "calculate_perc_rule",
        "description": "The PERC (Pulmonary Embolism Rule-out Criteria) Rule is a clinical tool used to help physicians exclude pulmonary embolism (PE) in patients deemed low-risk without resorting to advanced imaging like CT scans. It is applied in emergency settings to patients with low suspicion of PE based on initial assessment, helping to reduce unnecessary diagnostic tests and radiation exposure. The rule includes eight criteria, such as age, pulse rate, and recent surgery; if all criteria are negative, the likelihood of PE is considered sufficiently low.",
        "formula": "Here are the parameter list：\n\nAge ≥50：No0/Yes+1\nHR ≥100：No0/Yes+1\nO₂ sat on room air <95%：No0/Yes+1\nUnilateral leg swelling：No0/Yes+1\nHemoptysis：No0/Yes+1\nRecent surgery or trauma【Surgery or trauma ≤4 weeks ago requiring treatment with general anesthesia】：No0/Yes+1\nPrior PE or DVT：No0/Yes+1\nHormone use【Oral contraceptives, hormone replacement or estrogenic hormones use in males or female patients】：No0/Yes+1\n\nAddition of the selected points:\nAge ≥50\n\nNo0\n\nYes+1\nHR ≥100\n\nNo0\n\nYes+1\nO₂ sat on room air <95%\n\nNo0\n\nYes+1\nUnilateral leg swelling\n\nNo0\n\nYes+1\nHemoptysis\n\nNo0\n\nYes+1\nRecent surgery or trauma\nSurgery or trauma ≤4 weeks ago requiring treatment with general anesthesia\n\nNo0\n\nYes+1\nPrior PE or DVT\n\nNo0\n\nYes+1\nHormone use\nOral contraceptives, hormone replacement or estrogenic hormones use in males or female patients\n\nNo0\n\nYes+1",
        "code": "def calculate_perc_rule(age_over_50, heart_rate_over_100, oxygen_saturation_under_95, unilateral_leg_swelling, hemoptysis,\n              recent_surgery_or_trauma, prior_pe_or_dvt, hormone_use):\n    \"\"\"\n    Calculate the Pulmonary Embolism Rule-out Criteria (PERC) to determine if further testing for Pulmonary Embolism (PE)\n    is unnecessary in patients considered low-risk.\n\n    The PERC rule helps avoid unnecessary PE testing in low-risk patients. It requires that all criteria must be negative\n    (i.e., all parameters must receive a 'no' to rule out PE without further testing).\n\n    Parameters:\n    - age_over_50 (bool): Whether the patient is aged 50 or older. False for no, True for yes.\n    - heart_rate_over_100 (bool): Whether the patient has a heart rate of 100 bpm or higher. False for no, True for yes.\n    - oxygen_saturation_under_95 (bool): Whether the patient has an oxygen saturation less than 95%. False for no, True for yes.\n    - unilateral_leg_swelling (bool): Whether the patient has unilateral leg swelling. False for no, True for yes.\n    - hemoptysis (bool): Whether the patient has hemoptysis (coughing up blood). False for no, True for yes.\n    - recent_surgery_or_trauma (bool): Whether the patient had surgery or trauma within the last 4 weeks requiring general anesthesia. False for no, True for yes.\n    - prior_pe_or_dvt (bool): Whether the patient has a history of Pulmonary Embolism (PE) or Deep Vein Thrombosis (DVT). False for no, True for yes.\n    - hormone_use (bool): Whether the patient is using hormones such as oral contraceptives, hormone replacement therapy, or estrogenic hormones in male or female patients. False for no, True for yes.\n\n    Returns:\n    - result (bool): True if the patient can be ruled out for PE without further testing (all criteria negative), False otherwise.\n    \"\"\"\n    total_score = sum(x is True for x in [age_over_50, heart_rate_over_100, oxygen_saturation_under_95, unilateral_leg_swelling, hemoptysis,\n                       recent_surgery_or_trauma, prior_pe_or_dvt, hormone_use])\n\n    return total_score",
        "docstring": "Calculate the Pulmonary Embolism Rule-out Criteria (PERC) to determine if further testing for Pulmonary Embolism (PE)\n    is unnecessary in patients considered low-risk.\n\n    The PERC rule helps avoid unnecessary PE testing in low-risk patients. It requires that all criteria must be negative\n    (i.e., all parameters must receive a 'no' to rule out PE without further testing).\n\n    Parameters:\n    - age_over_50 (bool): Whether the patient is aged 50 or older. False for no, True for yes.\n    - heart_rate_over_100 (bool): Whether the patient has a heart rate of 100 bpm or higher. False for no, True for yes.\n    - oxygen_saturation_under_95 (bool): Whether the patient has an oxygen saturation less than 95%. False for no, True for yes.\n    - unilateral_leg_swelling (bool): Whether the patient has unilateral leg swelling. False for no, True for yes.\n    - hemoptysis (bool): Whether the patient has hemoptysis (coughing up blood). False for no, True for yes.\n    - recent_surgery_or_trauma (bool): Whether the patient had surgery or trauma within the last 4 weeks requiring general anesthesia. False for no, True for yes.\n    - prior_pe_or_dvt (bool): Whether the patient has a history of Pulmonary Embolism (PE) or Deep Vein Thrombosis (DVT). False for no, True for yes.\n    - hormone_use (bool): Whether the patient is using hormones such as oral contraceptives, hormone replacement therapy, or estrogenic hormones in male or female patients. False for no, True for yes.\n\n    Returns:\n    - result (bool): True if the patient can be ruled out for PE without further testing (all criteria negative), False otherwise.\n",
        "next_steps": "MANAGEMENT\nIn the setting of a low-risk patient who is not PERC negative, the physician should consider a d-dimer for further evaluation.\nIf the d-dimer is negative, and clinical gestalt determines a pre-test probability is <15% then, the patient does not require further testing for PE.\nIf the d-dimer is positive, further testing such as a CT-angiography or V/Q scan should be pursued.\nCRITICAL ACTIONS\nThere is no need to apply the PERC rule to those patients who are not being evaluated for PE.\nIf the patient is considered low-risk, PERC may help avoid further testing.\nIf the patient is moderate or high risk then PERC can not be utilized. Consider d-dimer or imaging based on risk.\nConsider pericardial disease in patients with pleuritic complaints as well."
    },
    {
        "tool_name": "Wells' Criteria for DVT",
        "function_name": "calculate_wells_criteria_dvt",
        "description": "Wells' Criteria for Deep Vein Thrombosis (DVT) is a clinical tool used to assess the probability of DVT in patients presenting with symptoms suggestive of this condition. It combines various clinical factors including symptoms and risk factors to generate a score that categorizes patients into low, moderate, or high probability groups. This tool is primarily utilized in outpatient settings to guide the need for further diagnostic testing such as ultrasonography or D-dimer tests.",
        "formula": "Addition of the selected points:\nVariable Points\nActive cancer (treatment or palliation within 6 months)\nNo\n0\nYes\n1\nBedridden recently >3 days or major surgery within 12 weeks\nNo\n0\nYes\n1\nCalf swelling >3 cm compared to the other leg (measured 10 cm below tibial tuberosity)\nNo\n0\nYes\n1\nCollateral (nonvaricose) superficial veins present\nNo\n0\nYes\n1\nEntire leg swollen\nNo\n0\nYes\n1\nLocalized tenderness along the deep venous system\nNo\n0\nYes\n1\nPitting edema, confined to symptomatic leg\nNo\n0\nYes\n1\nParalysis, paresis, or recent plaster immobilization of the lower extremity\nNo\n0\nYes\n1\nPreviously documented DVT\nNo\n0\nYes\n1\nAlternative diagnosis to DVT as likely or more likely\nNo\n0\nYes\n-2\nNote: there are a few versions of the criteria with minor differences based on the study; this set is the most widely validated, based on Wells 2003.",
        "code": "def calculate_wells_criteria_dvt(active_cancer, bedridden_recently, calf_swelling, collateral_veins, entire_leg_swollen,\n                                 localized_tenderness, pitting_edema, recent_immobilization, previous_dvt, alternative_diagnosis):\n    \"\"\"\n    Calculate the Wells' Criteria for Deep Vein Thrombosis (DVT).\n\n    This scale helps clinicians in outpatient and emergency settings to stratify patients' risk of DVT. A score below 2, coupled with a negative d-dimer test, allows clinicians to rule out DVT without the need for ultrasound imaging. This method balances the need for accurate diagnosis with the resource and time costs associated with more invasive tests.\n\n    Parameters:\n    active_cancer (bool): True if the patient has active cancer (treatment within last 6 months).\n    bedridden_recently (bool): True if the patient was bedridden for more than 3 days recently or had major surgery within the last 12 weeks.\n    calf_swelling (bool): True if the patient's calf swelling exceeds 3 cm compared to the other leg.\n    collateral_veins (bool): True if collateral non-varicose superficial veins are present.\n    entire_leg_swollen (bool): True if the entire leg is swollen.\n    localized_tenderness (bool): True if there is localized tenderness along the deep venous system.\n    pitting_edema (bool): True if there is pitting edema confined to the symptomatic leg.\n    recent_immobilization (bool): True if the patient had paralysis, paresis, or recent plaster immobilization of the lower extremities.\n    previous_dvt (bool): True if the patient has a history of documented DVT.\n    alternative_diagnosis (bool): True if an alternative diagnosis is as likely or more likely than DVT.\n\n    Returns:\n    int: Wells' score for DVT, where higher values indicate a higher probability of DVT.\n\n    Usage:\n    score = calculate_wells_criteria_dvt(True, False, True, True, False, True, True, False, True, False)\n    \"\"\"\n    score = 0\n    score += 1 if active_cancer else 0\n    score += 1 if bedridden_recently else 0\n    score += 1 if calf_swelling else 0\n    score += 1 if collateral_veins else 0\n    score += 1 if entire_leg_swollen else 0\n    score += 1 if localized_tenderness else 0\n    score += 1 if pitting_edema else 0\n    score += 1 if recent_immobilization else 0\n    score += 1 if previous_dvt else 0\n    score += -2 if alternative_diagnosis else 0\n\n    return score\n",
        "docstring": "Calculate the Wells' Criteria for Deep Vein Thrombosis (DVT).\n\n    This scale helps clinicians in outpatient and emergency settings to stratify patients' risk of DVT. A score below 2, coupled with a negative d-dimer test, allows clinicians to rule out DVT without the need for ultrasound imaging. This method balances the need for accurate diagnosis with the resource and time costs associated with more invasive tests.\n\n    Parameters:\n    active_cancer (bool): True if the patient has active cancer (treatment within last 6 months).\n    bedridden_recently (bool): True if the patient was bedridden for more than 3 days recently or had major surgery within the last 12 weeks.\n    calf_swelling (bool): True if the patient's calf swelling exceeds 3 cm compared to the other leg.\n    collateral_veins (bool): True if collateral non-varicose superficial veins are present.\n    entire_leg_swollen (bool): True if the entire leg is swollen.\n    localized_tenderness (bool): True if there is localized tenderness along the deep venous system.\n    pitting_edema (bool): True if there is pitting edema confined to the symptomatic leg.\n    recent_immobilization (bool): True if the patient had paralysis, paresis, or recent plaster immobilization of the lower extremities.\n    previous_dvt (bool): True if the patient has a history of documented DVT.\n    alternative_diagnosis (bool): True if an alternative diagnosis is as likely or more likely than DVT.\n\n    Returns:\n    int: Wells' score for DVT, where higher values indicate a higher probability of DVT.\n\n    Usage:\n    score = calculate_wells_criteria_dvt(True, False, True, True, False, True, True, False, True, False)",
        "next_steps": "ADVICE\nAs with all clinical decision aids, the Wells’ DVT criteria is meant to aid clinical decision making and not force management.\nThe Wells’ DVT criteria should only be applied after a detailed history and physical is performed.\nThe Wells’ DVT criteria should only be applied to those patients who have been deemed at risk for DVT. If there is no concern for DVT, then there is no need for risk stratification.\nMANAGEMENT\nPatients can be divided into “DVT unlikely” and “DVT likely” groups based on Wells score. An additional moderate risk group can be added based on the sensitivity of the d-dimer being used.\nA score of 0 or lower is associated with DVT unlikely with a prevalence of DVT of 5%.\nThese patients should proceed to d-dimer testing:\nA negative high or moderate sensitivity d-dimer results in a probability <1 % and no further imaging is required.\nA positive d-dimer should proceed to US testing.\nA negative US is sufficient for DVT rule out.\nA positive US is concerning for DVT; strongly consider treatment with anticoagulation.\nA score of 1-2 is considered risk with a pretest probability of 17%.*\nThese patients should proceed to high-sensitivity d-dimer testing (moderate sensitivity d-dimer is not sufficient).\nA negative high-sensitivity d-dimer is sufficient for rule out of DVT in a moderate risk patient with a probability of <1%.\nA positive high sensitivity d-dimer should proceed to US testing.\nA negative US is sufficient for ruling out DVT.\nA positive US is concerning for DVT, strongly consider treatment with anticoagulation.\nA score of 3 or higher suggests DVT is likely. Pretest probability 17-53%.\nAll DVT likely patients should receive US.\nD-dimer testing should be utilized to help risk-stratify these DVT-likely patients.\nIn DVT likely patients with negative d-dimer:\nA negative US is sufficient for ruling out DVT, consider discharge.\nA positive US should be concerning for DVT, strongly consider treatment with anticoagulation.\nIn DVT likely patients with a positive d-dimer:\nA positive US should be concerning for DVT, strongly consider treatment with anticoagulation.\nA negative US is still concerning for DVT. A repeat US should be performed within 1 week for re-evaluation.\n* group should only undergo d-dimer testing for rule out without ultrasonography if a high-sensitivity d-dimer is being used.\nCRITICAL ACTIONS\nNo decision rule should trump clinical gestalt. High suspicion for DVT should warrant imaging regardless of Wells score.\nThe Wells’ Criteria for DVT is utilized for the workup of DVT. The presence of DVT is critical to the evaluation of possible PE, and if PE is on the differential, alternative decision aids such as the Wells PE or PERC rule should be entertained."
    },
    {
        "tool_name": "Framingham Risk Score for Hard Coronary Heart Disease",
        "function_name": "calculate_framingham_risk_score",
        "description": "The Framingham Risk Score for Hard Coronary Heart Disease is a tool used by healthcare professionals to estimate a patient's 10-year risk of developing severe heart disease. It utilizes factors such as age, gender, cholesterol levels, blood pressure, and smoking status to calculate risk. This score helps in identifying individuals at high risk, guiding decisions on preventive measures and interventions.",
        "formula": "Here are the parameter list：\n\nAge：years\nSex：Female/Male\nSmoker：No/Yes\nTotal cholesterol：mg/dL\nHDL cholesterol：mg/dL\nSystolic BP：mm Hg\nBlood pressure being treated with medicines：No/Yes\n\nEquations as follows:\n\nMen:\nLMen = 52.00961 x ln(Age) + 20.014077 x ln(Total cholesterol) - 0.905964 x ln(HDL cholesterol) + 1.305784 x ln(Systolic BP) + 0.241549 x Treated for blood pressure + 12.096316 x Smoker - 4.605038 x ln(Age) x ln(Total cholesterol) - 2.84367 x ln(Age) x Smoker - 2.93323 x ln(Age) x ln(Age) - 172.300168\nPMen = 1 - 0.9402^exp(LMen)\n\nWomen:\nLWomen = 31.764001 x ln(Age) + 22.465206 x ln(Total cholesterol) - 1.187731 x ln(HDL cholesterol) + 2.552905 x ln(Systolic BP) + 0.420251 x Treated for blood pressure + 13.07543 x Smoker - 5.060998 x ln(Age) x ln(Total cholesterol) - 2.996945 x ln(Age) x Smoker - 146.5933061\nPWomen = 1 - 0.98767^exp(LWomen)\n\nSupplementary item:\n1. Smoker: Yes = 1, No = 0.\n2. Men: if age >70, use ln(70) x Smoker. Women: if age >78, use ln(78) x Smoker.\n",
        "code": "import math\n\n\ndef calculate_framingham_risk_score(age, sex, smoker_status, total_cholesterol, hdl_cholesterol, systolic_bp,\n                                    bp_medication):\n    \"\"\"\n    Calculate the Framingham Risk Score for Hard Coronary Heart Disease in patients aged 30-79 years without prior coronary heart disease history, diabetes, or intermittent claudication.\n\n    Parameters:\n    - age (int): The age of the patient in years. Valid range: 30-79.\n    - sex (int): The sex of the patient. 0 for female, 1 for male.\n    - smoker_status (int): Smoking status of the patient. 0 for non-smoker, 1 for smoker.\n    - total_cholesterol (float): Total cholesterol level in mg/dL.\n    - hdl_cholesterol (float): HDL cholesterol level in mg/dL.\n    - systolic_bp (float): Systolic blood pressure in mm Hg.\n    - bp_medication (int): Indicates if the blood pressure is being treated with medications. 0 for no, 1 for yes.\n\n    Returns:\n    float: The risk percentage of developing hard coronary heart disease.\n\n    Calculation is based on the logarithmic transformations of risk factors and their interactions,\n    separately for males and females. Note that older population data was used to develop this scale,\n    which may not fully align with current population risks.\n    \"\"\"\n    # Converting inputs for equation\n    ln_age = math.log(age)\n    ln_total_cholesterol = math.log(total_cholesterol)\n    ln_hdl_cholesterol = math.log(hdl_cholesterol)\n    ln_systolic_bp = math.log(systolic_bp)\n\n    if sex == 0:  # Female\n        if age > 78:\n            age_smoker_interaction = math.log(78) * smoker_status\n        else:\n            age_smoker_interaction = ln_age * smoker_status\n\n        L = (31.764001 * ln_age +\n             22.465206 * ln_total_cholesterol -\n             1.187731 * ln_hdl_cholesterol +\n             2.552905 * ln_systolic_bp +\n             0.420251 * bp_medication +\n             13.07543 * smoker_status -\n             5.060998 * ln_age * ln_total_cholesterol -\n             2.996945 * age_smoker_interaction -\n             146.5933061)\n\n        P = 1 - 0.98767 ** math.exp(L)\n\n    else:  # Male\n        if age > 70:\n            age_smoker_interaction = math.log(70) * smoker_status\n        else:\n            age_smoker_interaction = ln_age * smoker_status\n\n        L = (52.00961 * ln_age +\n             20.014077 * ln_total_cholesterol -\n             0.905964 * ln_hdl_cholesterol +\n             1.305784 * ln_systolic_bp +\n             0.241549 * bp_medication +\n             12.096316 * smoker_status -\n             4.605038 * ln_age * ln_total_cholesterol -\n             2.84367 * age_smoker_interaction -\n             2.93323 * ln_age ** 2 -\n             172.300168)\n\n        P = 1 - 0.9402 ** math.exp(L)\n\n    return P * 100  # Convert to percentage\n",
        "docstring": "Calculate the Framingham Risk Score for Hard Coronary Heart Disease in patients aged 30-79 years without prior coronary heart disease history, diabetes, or intermittent claudication.\n\n    Parameters:\n    - age (int): The age of the patient in years. Valid range: 30-79.\n    - sex (int): The sex of the patient. 0 for female, 1 for male.\n    - smoker_status (int): Smoking status of the patient. 0 for non-smoker, 1 for smoker.\n    - total_cholesterol (float): Total cholesterol level in mg/dL.\n    - hdl_cholesterol (float): HDL cholesterol level in mg/dL.\n    - systolic_bp (float): Systolic blood pressure in mm Hg.\n    - bp_medication (int): Indicates if the blood pressure is being treated with medications. 0 for no, 1 for yes.\n\n    Returns:\n    float: The risk percentage of developing hard coronary heart disease.\n\n    Calculation is based on the logarithmic transformations of risk factors and their interactions,\n    separately for males and females. Note that older population data was used to develop this scale,\n    which may not fully align with current population risks.\n",
        "next_steps": "ADVICE\nPatients with high risk scores should be counseled aggressively about social factors contributing to their risk (smoking, exercise, weight, diet, etc) and also managed with blood pressure and lipid evaluation."
    },
    {
        "tool_name": "CKD-EPI Equations for Glomerular Filtration Rate (GFR)",
        "function_name": "calculate_ckd_epi_gfr",
        "description": "The CKD-EPI (Chronic Kidney Disease Epidemiology Collaboration) equations are used to estimate the glomerular filtration rate (GFR), which is crucial for assessing kidney function. These equations are recommended for adults in clinical settings to detect and monitor kidney disease stages. They provide more accurate GFR estimates across different genders, ages, and races, compared to older formulas like the MDRD (Modification of Diet in Renal Disease) Study equation.",
        "formula": "2021  CKD-EPI Creatinine = 142 x (Scr/A)^{B} x 0.9938^{age} x (1.012 if female), where A and B are the following:\n\nFemale:\nScr ≤0.7: A = 0.7, B = -0.241\nScr >0.7: A = 0.7, B = -1.2\n\nMale:\nScr ≤0.9: A = 0.9, B = -0.302\nScr >0.9: A = 0.9, B = -1.2\n\nScr, serum creatinine, mg/dL.\nCKD-EPI Creatinine, ml/min/1.73m^2",
        "code": "def calculate_ckd_epi_gfr(serum_creatinine, age, gender):\n    \"\"\"\n    Calculate the 2021 CKD-EPI (Chronic Kidney Disease Epidemiology Collaboration) GFR (Glomerular Filtration Rate)\n    without the race component. This function estimates kidney function using creatinine-based equations and is intended\n    for patients with chronic (not acute) kidney disease. This calculation is particularly used by nephrologists to \n    assess kidney function non-invasively and is considered more accurate than the MDRD Equation, especially in patients\n    with normal or mildly reduced eGFR.\n\n    Parameters:\n    - serum_creatinine (float): The serum creatinine level of the patient in mg/dL.\n    - age (int): The age of the patient in years.\n    - gender (int): The gender of the patient. Use 0 for male and 1 for female.\n\n    Returns:\n    - float: The estimated GFR in ml/min/1.73m^2.\n\n    Usage:\n    To use this function, provide the serum creatinine level, age, and gender index (0 for male, 1 for female).\n    For example, calculate_ckd_epi_gfr(0.9, 30, 0) calculates the GFR for a 30-year-old male with a serum creatinine of 0.9 mg/dL.\n\n    Note:\n    - Not intended for use in patients on dialysis.\n    - Less accurate in patients with diabetes (before progression to overt nephropathy), pregnant women, and those with unusual body mass.\n    \"\"\"\n    if gender == 1:  # Female\n        if serum_creatinine <= 0.7:\n            A = 0.7\n            B = -0.241\n        else:\n            A = 0.7\n            B = -1.2\n    else:  # Male\n        if serum_creatinine <= 0.9:\n            A = 0.9\n            B = -0.302\n        else:\n            A = 0.9\n            B = -1.2\n\n    # Calculate the GFR\n    gfr = 142 * (serum_creatinine / A) ** B * 0.9938 ** age\n    if gender == 1:  # Adjustment for female\n        gfr *= 1.012\n\n    return gfr\n",
        "docstring": "Calculate the 2021 CKD-EPI (Chronic Kidney Disease Epidemiology Collaboration) GFR (Glomerular Filtration Rate)\n    without the race component. This function estimates kidney function using creatinine-based equations and is intended\n    for patients with chronic (not acute) kidney disease. This calculation is particularly used by nephrologists to \n    assess kidney function non-invasively and is considered more accurate than the MDRD Equation, especially in patients\n    with normal or mildly reduced eGFR.\n\n    Parameters:\n    - serum_creatinine (float): The serum creatinine level of the patient in mg/dL.\n    - age (int): The age of the patient in years.\n    - gender (int): The gender of the patient. Use 0 for male and 1 for female.\n\n    Returns:\n    - float: The estimated GFR in ml/min/1.73m^2.\n\n    Usage:\n    To use this function, provide the serum creatinine level, age, and gender index (0 for male, 1 for female).\n    For example, calculate_ckd_epi_gfr(0.9, 30, 0) calculates the GFR for a 30-year-old male with a serum creatinine of 0.9 mg/dL.\n\n    Note:\n    - Not intended for use in patients on dialysis.\n    - Less accurate in patients with diabetes (before progression to overt nephropathy), pregnant women, and those with unusual body mass.\n",
        "next_steps": "ADVICE\nPatients with decreased GFR are at higher risk of progressive kidney disease. Management of contributing risk factors, such as diabetes and hypertension, is critical to slowing progression. Investigation of the underlying cause of decreased GFR is warranted if not clear from the history. \nMedications should be dose-adjusted for the most recent available eGFR (in this setting, eGFR and creatinine clearance may be used interchangeably, though they are physiologically different terms). Cutoffs for many medications are <60, <45, and <30 mL/min/m2, as well as adjustments for advanced kidney disease and dialysis patients.\nMANAGEMENT\nPatients should be classified into CKD stage by both eGFR and albuminuria status. Patients with decreased GFR, increased urinary albumin excretion or both, are at high risk of progressive CKD and should be referred to nephrology for further management.\nFrom KDIGO 2012 Clinical Practice Guideline."
    },
    {
        "tool_name": "Caprini Score for Venous Thromboembolism (2005)",
        "function_name": "calculate_caprini_score",
        "description": "The Caprini Score for Venous Thromboembolism (2005) is a risk assessment tool used to evaluate the likelihood of developing venous thromboembolism (VTE) in hospital patients. It is applied across various clinical settings, particularly in surgical patients, to guide the prophylactic use of anticoagulation therapy. The score incorporates multiple risk factors, including patient history, clinical conditions, and surgical factors, to stratify patients into different risk categories.",
        "formula": "Age【Years】：\n≤40 0/\n41-60 +1/\n61-74 +2/\n≥75 +3\nSex：Male/Female\nType of surgery【Minor surgery does not refer to type of surgery but rather length of anesthesia <45 minutes.Major surgery refers to procedures with general or regional anesthesia time >45 minutes are included. These include open, laparoscopic, or arthroscopic procedures. Re-operations during the same hospitalization count for 2 points each if the anesthesia time exceeds 45 minutes.Major lower extremity arthroplasties are high-risk procedures. However if additional risk factors are present that further increases the risk. It has been shown that in scores ≥10 the VTE risk is significantly greater. If the procedure is being done as a result of a hip fracture, preoperative screening may be beneficial.】【Recent (<1 month) event】：\nNone 0/\nMinor +1/\nMajor>45 min, laparoscopic>45 min, or arthroscopic +2/\nElective major lower extremity arthroplasty +5\nMajor surgery：No0/Yes+1\nCHF：No0/Yes+1\nSepsis：No0/Yes+1\nPneumonia：No0/Yes+1\nImmobilizing plaster cast：No0/Yes+2\nHip, pelvis, or leg fracture：No0/Yes+5\nStroke：No0/Yes+5\nMultiple trauma：No0/Yes+5\nAcute spinal cord injury causing paralysis【Venous disease or clotting disorder】：No0/Yes+5\nVaricose veins：No0/Yes+1\nCurrent swollen legs：No0/Yes+1\nCurrent central venous access：No0/Yes+2\nHistory of DVT/PE：No0/Yes+3\nFamily history of thrombosis：No0/Yes+3\nPositive Factor V Leiden：No0/Yes+3\nPositive prothrombin 20210A：No0/Yes+3\nElevated serum homocysteine：No0/Yes+3\nPositive lupus anticoagulant：No0/Yes+3\nElevated anticardiolipin antibody：No0/Yes+3\nHeparin-induced thrombocytopenia：No0/Yes+3\nOther congenital or acquired thrombophilia：No0/Yes+3\nMobility【Bed rest is defined as not being able to walk 30 feet (10 meters) at one time. Bathroom privileges or walking in the room are not considered ambulation. Walking this distance reduces the VTE risk by 50%. Click here for VIDEO. PE mortality increased for those immobile for >4 days.】【Other present and past history】\nNormal, out of bed 0/\nMedical patient currently on bed rest +1/\nPatient confined to bed >72 hours +2\nHistory of inflammatory bowel disease：No0/Yes+1\nBMI >25：No0/Yes+1\nAcute MI：No0/Yes+1\nCOPD：No0/Yes+1\nPresent or previous malignancy：No0/Yes+2\nOther risk factors：No0/Yes+1\nOn oral contraceptives or hormone replacement：No0/Yes+1\nHistory of unexplained stillborn, ≥3 spontaneous abortions, or premature birth with toxemia or growth-restricted infant：No0/Yes+1",
        "code": "def calculate_caprini_score(age, sex, surgery_type, recent_event, major_surgery, chf, sepsis, pneumonia, plaster_cast,\n                            fracture, stroke, multiple_trauma, spinal_injury, varicose_veins, swollen_legs,\n                            central_venous_access, history_dvt_pe, family_thrombosis, factor_v_leiden, prothrombin_20210A,\n                            homocysteine, lupus_anticoagulant, anticardiolipin_antibody, heparin_thrombocytopenia,\n                            thrombophilia, mobility, ibd, bmi_over_25, acute_mi, copd, malignancy, other_risk_factors,\n                            contraceptives_hormones, reproductive_history):\n    \"\"\"\n    Calculate the Caprini Score for Venous Thromboembolism (VTE) in surgical patients. The score assesses the risk of VTE\n    based on a variety of risk factors and stratifies patients for potential prophylactic interventions. Not applicable\n    to medical (non-surgical) patients. Requires patient interaction to ascertain certain historical risk factors.\n\n    Parameters:\n    age (int): Patient's age in years.\n    sex (int): Patient's sex (0 for male, 1 for female).\n    surgery_type (int): Type of surgery classified by duration and invasiveness (0 for none, 1 for minor, 2 for major, 5 for elective major lower extremity arthroplasty).\n    recent_event (int): Recent surgeries or events (0 for none, 1 for minor, 2 for major or laparoscopic over 45 min).\n    major_surgery (int): Whether the patient had major surgery (0 for no, 1 for yes).\n    chf (int): Congestive heart failure present (0 for no, 1 for yes).\n    sepsis (int): Sepsis present (0 for no, 1 for yes).\n    pneumonia (int): Pneumonia present (0 for no, 1 for yes).\n    plaster_cast (int): Presence of an immobilizing plaster cast (0 for no, 2 for yes).\n    fracture (int): Presence of hip, pelvis, or leg fracture (0 for no, 5 for yes).\n    stroke (int): History of stroke (0 for no, 5 for yes).\n    multiple_trauma (int): Presence of multiple traumas (0 for no, 5 for yes).\n    spinal_injury (int): Acute spinal cord injury causing paralysis (0 for no, 5 for yes).\n    varicose_veins (int): Presence of varicose veins (0 for no, 1 for yes).\n    swollen_legs (int): Currently swollen legs (0 for no, 1 for yes).\n    central_venous_access (int): Current central venous access (0 for no, 2 for yes).\n    history_dvt_pe (int): History of deep vein thrombosis or pulmonary embolism (0 for no, 3 for yes).\n    family_thrombosis (int): Family history of thrombosis (0 for no, 3 for yes).\n    factor_v_leiden (int): Positive Factor V Leiden mutation (0 for no, 3 for yes).\n    prothrombin_20210A (int): Positive prothrombin 20210A mutation (0 for no, 3 for yes).\n    homocysteine (int): Elevated serum homocysteine levels (0 for no, 3 for yes).\n    lupus_anticoagulant (int): Positive lupus anticoagulant (0 for no, 3 for yes).\n    anticardiolipin_antibody (int): Elevated anticardiolipin antibody levels (0 for no, 3 for yes).\n    heparin_thrombocytopenia (int): Heparin-induced thrombocytopenia (0 for no, 3 for yes).\n    thrombophilia (int): Other congenital or acquired thrombophilia (0 for no, 3 for yes).\n    mobility (int): Mobility status (0 for normal, out of bed, 1 for medical patient currently on bed rest, 2 for patient confined to bed >72 hours).\n    ibd (int): History of inflammatory bowel disease (0 for no, 1 for yes).\n    bmi_over_25 (int): BMI over 25 (0 for no, 1 for yes).\n    acute_mi (int): Acute myocardial infarction (0 for no, 1 for yes).\n    copd (int): Chronic obstructive pulmonary disease (0 for no, 1 for yes).\n    malignancy (int): Presence or history of malignancy (0 for no, 2 for yes).\n    other_risk_factors (int): Other unspecified risk factors (0 for no, 1 for yes).\n    contraceptives_hormones (int): Use of oral contraceptives or hormone replacement therapy (0 for no, 1 for yes).\n    reproductive_history (int): History of unexplained stillborn, ≥3 spontaneous abortions, or premature birth with toxemia or growth-restricted infant (0 for no, 1 for yes).\n\n    Returns:\n    int: The calculated Caprini score.\n    \"\"\"\n    score = 0\n    # Age scoring\n    if age <= 40:\n        score += 0\n    elif 41 <= age <= 60:\n        score += 1\n    elif 61 <= age <= 74:\n        score += 2\n    elif age >= 75:\n        score += 3\n\n    # Sex is not explicitly scored in the given formula, included for completeness\n    sex_score = 0 if sex == 0 else 0\n\n    # Sum all risk factors\n    score += (surgery_type + recent_event + major_surgery + chf + sepsis + pneumonia + plaster_cast + fracture +\n              stroke + multiple_trauma + spinal_injury + varicose_veins + swollen_legs + central_venous_access +\n              history_dvt_pe + family_thrombosis + factor_v_leiden + prothrombin_20210A + homocysteine +\n              lupus_anticoagulant + anticardiolipin_antibody + heparin_thrombocytopenia + thrombophilia +\n              mobility + ibd + bmi_over_25 + acute_mi + copd + malignancy + other_risk_factors +\n              contraceptives_hormones + reproductive_history)\n\n    return score\n",
        "docstring": "Calculate the Caprini Score for Venous Thromboembolism (VTE) in surgical patients. The score assesses the risk of VTE\n    based on a variety of risk factors and stratifies patients for potential prophylactic interventions. Not applicable\n    to medical (non-surgical) patients. Requires patient interaction to ascertain certain historical risk factors.\n\n    Parameters:\n    age (int): Patient's age in years.\n    sex (int): Patient's sex (0 for male, 1 for female).\n    surgery_type (int): Type of surgery classified by duration and invasiveness (0 for none, 1 for minor, 2 for major, 5 for elective major lower extremity arthroplasty).\n    recent_event (int): Recent surgeries or events (0 for none, 1 for minor, 2 for major or laparoscopic over 45 min).\n    major_surgery (int): Whether the patient had major surgery (0 for no, 1 for yes).\n    chf (int): Congestive heart failure present (0 for no, 1 for yes).\n    sepsis (int): Sepsis present (0 for no, 1 for yes).\n    pneumonia (int): Pneumonia present (0 for no, 1 for yes).\n    plaster_cast (int): Presence of an immobilizing plaster cast (0 for no, 2 for yes).\n    fracture (int): Presence of hip, pelvis, or leg fracture (0 for no, 5 for yes).\n    stroke (int): History of stroke (0 for no, 5 for yes).\n    multiple_trauma (int): Presence of multiple traumas (0 for no, 5 for yes).\n    spinal_injury (int): Acute spinal cord injury causing paralysis (0 for no, 5 for yes).\n    varicose_veins (int): Presence of varicose veins (0 for no, 1 for yes).\n    swollen_legs (int): Currently swollen legs (0 for no, 1 for yes).\n    central_venous_access (int): Current central venous access (0 for no, 2 for yes).\n    history_dvt_pe (int): History of deep vein thrombosis or pulmonary embolism (0 for no, 3 for yes).\n    family_thrombosis (int): Family history of thrombosis (0 for no, 3 for yes).\n    factor_v_leiden (int): Positive Factor V Leiden mutation (0 for no, 3 for yes).\n    prothrombin_20210A (int): Positive prothrombin 20210A mutation (0 for no, 3 for yes).\n    homocysteine (int): Elevated serum homocysteine levels (0 for no, 3 for yes).\n    lupus_anticoagulant (int): Positive lupus anticoagulant (0 for no, 3 for yes).\n    anticardiolipin_antibody (int): Elevated anticardiolipin antibody levels (0 for no, 3 for yes).\n    heparin_thrombocytopenia (int): Heparin-induced thrombocytopenia (0 for no, 3 for yes).\n    thrombophilia (int): Other congenital or acquired thrombophilia (0 for no, 3 for yes).\n    mobility (int): Mobility status (0 for normal, out of bed, 1 for medical patient currently on bed rest, 2 for patient confined to bed >72 hours).\n    ibd (int): History of inflammatory bowel disease (0 for no, 1 for yes).\n    bmi_over_25 (int): BMI over 25 (0 for no, 1 for yes).\n    acute_mi (int): Acute myocardial infarction (0 for no, 1 for yes).\n    copd (int): Chronic obstructive pulmonary disease (0 for no, 1 for yes).\n    malignancy (int): Presence or history of malignancy (0 for no, 2 for yes).\n    other_risk_factors (int): Other unspecified risk factors (0 for no, 1 for yes).\n    contraceptives_hormones (int): Use of oral contraceptives or hormone replacement therapy (0 for no, 1 for yes).\n    reproductive_history (int): History of unexplained stillborn, ≥3 spontaneous abortions, or premature birth with toxemia or growth-restricted infant (0 for no, 1 for yes).\n\n    Returns:\n    int: The calculated Caprini score.\n",
        "next_steps": "ADVICE\nWhile many hospitals have developed institution-wide policies for VTE prophylaxis based on risk assessment models, the decision for type and duration of VTE prophylaxis should ultimately be left up to the surgeon’s best clinical judgment based on individual patient factors."
    },
    {
        "tool_name": "STOP-BANG Score for Obstructive Sleep Apnea",
        "function_name": "calculate_stop_bang_score",
        "description": "The STOP-BANG Score is a clinical tool used to screen individuals for obstructive sleep apnea (OSA). It assesses risk factors including Snoring, Tiredness, Observed apnea, high blood Pressure, BMI, Age, Neck circumference, and Gender. This easy-to-use questionnaire is widely utilized in both primary care settings and preoperative assessments to identify patients who may need further diagnostic testing for OSA.",
        "formula": "Addition of the selected points (for the first four, ask the patient):\n  0 points\n1 point\nDo you snore loudly? (Louder than talking or loud enough to be heard through closed doors)\nNo\nYes\nDo you often feel tired, fatigued, or sleepy during the daytime?\nNo\nYes\nHas anyone observed you stop breathing during sleep?\nNo\nYes\nDo you have (or are you being treated for) high blood pressure?\nNo\nYes\nBMI\n≤35 kg/m2\n>35 kg/m2\nAge\n≤50 years\n>50 years\nNeck circumference\n≤40 cm\n>40 cm\nGender\nFemale\nMale",
        "code": "def calculate_stop_bang_score(snore_loudly, feel_tired_daytime, observed_apnea, high_blood_pressure, bmi, age, neck_circumference, gender):\n    \"\"\"\n    Calculate the STOP-BANG Score for screening Obstructive Sleep Apnea (OSA).\n\n    This score is useful for patients undergoing preoperative evaluation but should not be used if a patient\n    has already been diagnosed with OSA or uses CPAP at night. It helps in identifying patients who might have\n    OSA and are at increased risk of perioperative cardiopulmonary complications, as well as other morbidity\n    associated with OSA like daytime sleepiness and cardiopulmonary conditions.\n\n    Parameters:\n    - snore_loudly (bool): True if the patient snores loudly (louder than talking or loud enough to be heard through closed doors), False otherwise.\n    - feel_tired_daytime (bool): True if the patient often feels tired, fatigued, or sleepy during the daytime, False otherwise.\n    - observed_apnea (bool): True if anyone has observed the patient stop breathing during sleep, False otherwise.\n    - high_blood_pressure (bool): True if the patient has or is being treated for high blood pressure, False otherwise.\n    - bmi (float): Body Mass Index of the patient.\n    - age (int): Age of the patient in years.\n    - neck_circumference (float): Neck circumference of the patient in centimeters.\n    - gender (str): Gender of the patient. Expected values: 'Female' or 'Male'.\n\n    Returns:\n    int: The total STOP-BANG score, ranging from 0 to 8.\n\n    Usage:\n    >>> calculate_stop_bang_score(True, True, True, True, 36, 51, 41, 'Male')\n    8\n    \"\"\"\n    # Calculating the score based on binary questions\n    score = int(snore_loudly) + int(feel_tired_daytime) + int(observed_apnea) + int(high_blood_pressure)\n\n    # Additional criteria\n    score += 1 if bmi > 35 else 0\n    score += 1 if age > 50 else 0\n    score += 1 if neck_circumference > 40 else 0\n    score += 1 if gender == 'Male' else 0\n\n    return score\n",
        "docstring": "Calculate the STOP-BANG Score for screening Obstructive Sleep Apnea (OSA).\n\n    This score is useful for patients undergoing preoperative evaluation but should not be used if a patient\n    has already been diagnosed with OSA or uses CPAP at night. It helps in identifying patients who might have\n    OSA and are at increased risk of perioperative cardiopulmonary complications, as well as other morbidity\n    associated with OSA like daytime sleepiness and cardiopulmonary conditions.\n\n    Parameters:\n    - snore_loudly (bool): True if the patient snores loudly (louder than talking or loud enough to be heard through closed doors), False otherwise.\n    - feel_tired_daytime (bool): True if the patient often feels tired, fatigued, or sleepy during the daytime, False otherwise.\n    - observed_apnea (bool): True if anyone has observed the patient stop breathing during sleep, False otherwise.\n    - high_blood_pressure (bool): True if the patient has or is being treated for high blood pressure, False otherwise.\n    - bmi (float): Body Mass Index of the patient.\n    - age (int): Age of the patient in years.\n    - neck_circumference (float): Neck circumference of the patient in centimeters.\n    - gender (str): Gender of the patient. Expected values: 'Female' or 'Male'.\n\n    Returns:\n    int: The total STOP-BANG score, ranging from 0 to 8.\n\n    Usage:\n    >>> calculate_stop_bang_score(True, True, True, True, 36, 51, 41, 'Male')\n    8",
        "next_steps": "ADVICE\nClinicians may opt to modify the care of patients who are high-risk for OSA:\nConsider reducing narcotic medication doses.\nUse caution when extubating “deep” or prior to return of airway reflexes.\nConsider extended monitoring in PACU prior to discharge to an unmonitored floor.\nConsider admission to a floor with increased level of monitoring or nursing supervision.\nPatients should be counseled to bring their own CPAP machines to the hospital preoperatively if they have them.\nPAP (positive airway pressure) machines should be available in the PACU (post anesthesia care unit) or on the floor for patients who are high-risk for OSA.\nFollowing the perioperative period (or prior to if identified in a preoperative clinic), patients that screen as high-risk for OSA (obstructive sleep apnea) should have formal polysomnography to receive a definitive diagnosis.\nMANAGEMENT\nOSA (obstructive sleep apnea) is due to a mechanical obstruction of the upper airway resulting in diminished breathing (hypopnea = narrowing) or elimination of breathing (apnea = collapse and obliteration).\nThe gold standard for OSA diagnosis is polysomnography.\nCPAP (continuous positive airway pressure) is the first-line treatment of OSA and is very effective in stenting open the upper airway, but patient compliance is poor."
    },
    {
        "tool_name": "Gupta Perioperative Risk for Myocardial Infarction or Cardiac Arrest (MICA)",
        "function_name": "calculate_gupta_perioperative_risk",
        "description": "The Gupta Perioperative Risk for Myocardial Infarction or Cardiac Arrest (MICA) score is a clinical tool used to estimate the risk of myocardial infarction or cardiac arrest in patients undergoing surgery. It incorporates factors such as patient age, type of surgery, and preexisting health conditions to provide a quantitative risk assessment. This score aids healthcare providers in making informed decisions about perioperative management and patient counseling.",
        "formula": "Cardiac risk, % = e^x / (1 + e^x)\nWhere x = −5.25 + sum of the values of the selected variables.\nVariable Options\nValue\nAge per year of increase\nAge x 0.02\nFunctional status\nIndependent\n0\nPartially dependent\n0.65\nTotally dependent\n1.03\nASA class\n1: normal healthy patient\n−5.17\n2: mild systemic disease\n−3.29\n3: severe systemic disease\n−1.92\n4: severe systemic disease that is a constant threat to life*\n−0.95\n5: moribund, not expected to survive without surgery\n0\nCreatinine\nNormal (≤1.5 mg/dL, 133 µmol/L)\n0\nElevated (>1.5 mg/dL, 133 µmol/L)\n0.61\nUnknown\n−0.10\nType of procedure\nAnorectal\n−0.16\nAortic\n1.60\nBariatric\n−0.25\nBrain\n1.40\nBreast\n−1.61\nCardiac\n1.01\nENT (except thyroid/parathyroid)\n0.71\nForegut or hepatopancreatobiliary\n1.39\nGallbladder, appendix, adrenals, or spleen\n0.59\nHernia (ventral, inguinal, femoral)\n0\nIntestinal\n1.14\nNeck (thyroid/parathyroid)\n0.18\nObstetric/gynecologic\n0.76\nOrthopedic and non-vascular extremity\n0.80\nOther abdominal\n1.13\nPeripheral vascular**\n0.86\nSkin\n0.54\nSpine\n0.21\nNon-esophageal thoracic\n0.40\nVein\n−1.09\nUrology\n−0.26\n*i.e., patient could die acutely without intervention.\n**Non-aortic, non-vein vascular surgeries.",
        "code": "import math\n\ndef calculate_gupta_perioperative_risk(age: int, functional_status: int, asa_class: int, creatinine: int, procedure_type: int) -> float:\n    \"\"\"\n    Calculate the Gupta Perioperative Risk for Myocardial Infarction or Cardiac Arrest (MICA).\n\n    This function estimates the cardiac risk percentage for patients undergoing surgery based on various factors.\n    \n    Parameters:\n    age (int): The age of the patient in years.\n    functional_status (int): Functional status of the patient. \n                             Options are: \n                             0 - Independent\n                             1 - Partially dependent\n                             2 - Totally dependent\n    asa_class (int): ASA class of the patient. \n                     Options are:\n                     1 - Normal healthy patient\n                     2 - Mild systemic disease\n                     3 - Severe systemic disease\n                     4 - Severe systemic disease that is a constant threat to life\n                     5 - Moribund, not expected to survive without surgery\n    creatinine (int): Creatinine level status. \n                      Options are:\n                      0 - Normal (≤1.5 mg/dL, 133 µmol/L)\n                      1 - Elevated (>1.5 mg/dL, 133 µmol/L)\n                      2 - Unknown\n    procedure_type (int): Type of procedure being performed. \n                          Options are:\n                          0 - Anorectal\n                          1 - Aortic\n                          2 - Bariatric\n                          3 - Brain\n                          4 - Breast\n                          5 - Cardiac\n                          6 - ENT (except thyroid/parathyroid)\n                          7 - Foregut or hepatopancreatobiliary\n                          8 - Gallbladder, appendix, adrenals, or spleen\n                          9 - Hernia (ventral, inguinal, femoral)\n                          10 - Intestinal\n                          11 - Neck (thyroid/parathyroid)\n                          12 - Obstetric/gynecologic\n                          13 - Orthopedic and non-vascular extremity\n                          14 - Other abdominal\n                          15 - Peripheral vascular (Non-aortic, non-vein vascular surgeries)\n                          16 - Skin\n                          17 - Spine\n                          18 - Non-esophageal thoracic\n                          19 - Vein\n                          20 - Urology\n\n    Returns:\n    float: The estimated cardiac risk percentage.\n    \"\"\"\n    # Constants\n    base_value = -5.25\n\n    # Variable values\n    age_value = age * 0.02\n    \n    functional_status_values = [0, 0.65, 1.03]\n    functional_status_value = functional_status_values[functional_status]\n    \n    asa_class_values = [-5.17, -3.29, -1.92, -0.95, 0]\n    asa_class_value = asa_class_values[asa_class-1]\n    \n    creatinine_values = [0, 0.61, -0.10]\n    creatinine_value = creatinine_values[creatinine]\n    \n    procedure_values = [-0.16, 1.60, -0.25, 1.40, -1.61, 1.01, 0.71, 1.39, 0.59, 0, 1.14, 0.18, 0.76, 0.80, 1.13, 0.86, 0.54, 0.21, 0.40, -1.09, -0.26]\n    procedure_value = procedure_values[procedure_type]\n\n    # Calculation\n    x = (base_value + age_value + functional_status_value + asa_class_value + creatinine_value + procedure_value)\n    cardiac_risk_percentage = (math.exp(x) / (1 + math.exp(x))) * 100\n    \n    return cardiac_risk_percentage\n",
        "docstring": "\n    Calculate the Gupta Perioperative Risk for Myocardial Infarction or Cardiac Arrest (MICA).\n\n    This function estimates the cardiac risk percentage for patients undergoing surgery based on various factors.\n    \n    Parameters:\n    age (int): The age of the patient in years.\n    functional_status (int): Functional status of the patient. \n                             Options are: \n                             0 - Independent\n                             1 - Partially dependent\n                             2 - Totally dependent\n    asa_class (int): ASA class of the patient. \n                     Options are:\n                     1 - Normal healthy patient\n                     2 - Mild systemic disease\n                     3 - Severe systemic disease\n                     4 - Severe systemic disease that is a constant threat to life\n                     5 - Moribund, not expected to survive without surgery\n    creatinine (int): Creatinine level status. \n                      Options are:\n                      0 - Normal (≤1.5 mg/dL, 133 µmol/L)\n                      1 - Elevated (>1.5 mg/dL, 133 µmol/L)\n                      2 - Unknown\n    procedure_type (int): Type of procedure being performed. \n                          Options are:\n                          0 - Anorectal\n                          1 - Aortic\n                          2 - Bariatric\n                          3 - Brain\n                          4 - Breast\n                          5 - Cardiac\n                          6 - ENT (except thyroid/parathyroid)\n                          7 - Foregut or hepatopancreatobiliary\n                          8 - Gallbladder, appendix, adrenals, or spleen\n                          9 - Hernia (ventral, inguinal, femoral)\n                          10 - Intestinal\n                          11 - Neck (thyroid/parathyroid)\n                          12 - Obstetric/gynecologic\n                          13 - Orthopedic and non-vascular extremity\n                          14 - Other abdominal\n                          15 - Peripheral vascular (Non-aortic, non-vein vascular surgeries)\n                          16 - Skin\n                          17 - Spine\n                          18 - Non-esophageal thoracic\n                          19 - Vein\n                          20 - Urology\n\n    Returns:\n    float: The estimated cardiac risk percentage.\n   ",
        "next_steps": "ADVICE\nMay help determine which patients require additional post-surgical cardiac monitoring.\nMANAGEMENT\nPatients identified as low risk require no further cardiovascular testing, according to ACC/AHA guidelines.\nPatients identified as high risk may require additional cardiovascular evaluation, including cardiology consultation, stress testing, and/or echocardiogram.\nCRITICAL ACTIONS\nPatients with known or suspected heart disease (cardiovascular disease, significant valvular disease, symptomatic arrhythmias) should undergo routine preoperative cardiac evaluation if indicated for the proposed surgery."
    },
    {
        "tool_name": "Pregnancy Due Dates Calculator",
        "function_name": "calculate_due_date",
        "description": "A Pregnancy Due Date Calculator is used to estimate the expected date of birth, commonly known as the due date, based on the first day of the last menstrual period or conception date. It helps expectant parents and healthcare providers plan for pregnancy care and the birth. The calculator is widely used in prenatal appointments and can also be accessed online for personal tracking by pregnant individuals.",
        "formula": "Here are the parameter list:\n\nCycle length: days\nLast menstrual period: YYYY/MM/DD\n\nEquations as follows:\n\nEstimated due date (EDD) = 1st day of LMP + 40 weeks.\nAssumes 28 day cycle. If cycle is longer than 28 days, this calculator adds the number of days more than 28 to obtain EDD. Example: if cycle length is 35 days, add 7 days (= 35 – 28) to 40 weeks. the answer is the format of a string like 'Saturday,Feb 15,2025'.",
        "code": "import datetime\n\n\ndef calculate_due_date(cycle_length, last_menstrual_period):\n    \"\"\"\n    Calculate the estimated due date (EDD) for a pregnancy based on the last menstrual period and cycle length.\n\n    This function uses a standard method recommended by the American College of Obstetricians and Gynecologists (ACOG),\n    which considers the first trimester ultrasound measurements to be the most accurate method to establish gestational age.\n\n    Parameters:\n    - cycle_length (int): The length of the menstrual cycle in days. Standard cycle is 28 days.\n                           If cycle_length is more than 28, the difference is added to the 40-week period.\n    - last_menstrual_period (str): The first day of the last menstrual period in 'YYYY/MM/DD' format.\n\n    Returns:\n    - str: The estimated due date in the format 'Day, Month DD, YYYY'.\n\n    Usage:\n    The function is intended for use by healthcare providers to estimate due dates for pregnant patients,\n    which can help in managing pregnancy timelines effectively and in planning medical care accordingly.\n\n    Example:\n    'Monday, Oct 16, 2023'\n    \"\"\"\n\n    # Convert the string date to a datetime object\n    lmp_date = datetime.datetime.strptime(last_menstrual_period, \"%Y/%m/%d\")\n\n    # Calculate the base due date by adding 280 days (40 weeks * 7 days)\n    base_due_date = lmp_date + datetime.timedelta(days=280)\n\n    # Adjust the due date based on the cycle length (if longer than 28 days)\n    if cycle_length > 28:\n        additional_days = cycle_length - 28\n        final_due_date = base_due_date + datetime.timedelta(days=additional_days)\n    else:\n        final_due_date = base_due_date\n\n    # Format the due date to 'Day, Month DD, YYYY'\n    return final_due_date.strftime('%A, %b %d, %Y')",
        "docstring": "Calculate the estimated due date (EDD) for a pregnancy based on the last menstrual period and cycle length.\n\n    This function uses a standard method recommended by the American College of Obstetricians and Gynecologists (ACOG),\n    which considers the first trimester ultrasound measurements to be the most accurate method to establish gestational age.\n\n    Parameters:\n    - cycle_length (int): The length of the menstrual cycle in days. Standard cycle is 28 days.\n                           If cycle_length is more than 28, the difference is added to the 40-week period.\n    - last_menstrual_period (str): The first day of the last menstrual period in 'YYYY/MM/DD' format.\n\n    Returns:\n    - str: The estimated due date in the format 'Day, Month DD, YYYY'.\n\n    Usage:\n    The function is intended for use by healthcare providers to estimate due dates for pregnant patients,\n    which can help in managing pregnancy timelines effectively and in planning medical care accordingly.\n\n    Example:\n    'Monday, Oct 16, 2023'\n",
        "next_steps": "ADVICE\nUse to track and estimate pregnancy."
    },
    {
        "tool_name": "Creatinine Clearance (Cockcroft-Gault Equation)",
        "function_name": "calculate_creatinine_clearance",
        "description": "Creatinine clearance, estimated using the Cockcroft-Gault equation, helps assess kidney function by estimating the rate at which the kidneys remove creatinine from the blood. This measurement is crucial for determining the proper dosing of medications that are primarily excreted by the kidneys, particularly in patients with renal impairment. It is widely used in clinical settings, especially before prescribing drugs with narrow therapeutic indices.",
        "formula": "Cockcroft-Gault CrCl, mL/min = (140 – age) × (weight, kg) × (0.85 if female) / (72 × Cr, mg/dL)",
        "code": "def calculate_creatinine_clearance(age, weight, creatinine, sex):\n    \"\"\"\n    Calculate the Creatinine Clearance using the Cockcroft-Gault Equation.\n\n    This function estimates kidney function, useful for Chronic Kidney Disease (CKD) staging\n    and adjusting or discontinuing medications based on kidney function. It incorporates\n    the patient's age, weight, sex, and serum creatinine levels to calculate the clearance rate.\n    This is particularly relevant when considering medication dosages for patients with reduced\n    kidney function, despite potential overestimations in GFR with newer creatinine assays.\n\n    Parameters:\n    - age (int): The age of the patient in years. Should be a positive integer.\n    - weight (float): The weight of the patient in kilograms. Should be a positive decimal.\n    - creatinine (float): The serum creatinine level in mg/dL. Should be a positive decimal.\n    - sex (str): The sex of the patient. Acceptable values are 'male' or 'female'.\n                 This affects the calculation as there is a different multiplier for females.\n\n    Returns:\n    - float: The estimated creatinine clearance in mL/min.\n    \n    Example:\n    >>> calculate_creatinine_clearance(50, 70, 1.2, 'female')\n    49.30555555555556\n    \"\"\"\n    sex_multiplier = 0.85 if sex.lower() == 'female' else 1.0\n    creatinine_clearance = ((140 - age) * weight * sex_multiplier) / (72 * creatinine)\n    return creatinine_clearance\n",
        "docstring": "\n    Calculate the Creatinine Clearance using the Cockcroft-Gault Equation.\n\n    This function estimates kidney function, useful for Chronic Kidney Disease (CKD) staging\n    and adjusting or discontinuing medications based on kidney function. It incorporates\n    the patient's age, weight, sex, and serum creatinine levels to calculate the clearance rate.\n    This is particularly relevant when considering medication dosages for patients with reduced\n    kidney function, despite potential overestimations in GFR with newer creatinine assays.\n\n    Parameters:\n    - age (int): The age of the patient in years. Should be a positive integer.\n    - weight (float): The weight of the patient in kilograms. Should be a positive decimal.\n    - creatinine (float): The serum creatinine level in mg/dL. Should be a positive decimal.\n    - sex (str): The sex of the patient. Acceptable values are 'male' or 'female'.\n                 This affects the calculation as there is a different multiplier for females.\n\n    Returns:\n    - float: The estimated creatinine clearance in mL/min.\n    \n    Example:\n    >>> calculate_creatinine_clearance(50, 70, 1.2, 'female')\n    49.30555555555556\n  ",
        "next_steps": "ADVICE\nPatients with decreased GFR are at higher risk of progressive kidney disease. Management of contributing risk factors, such as diabetes and hypertension, is critical to slowing progression. Investigation of the underlying cause of decreased GFR is warranted if not clear from the history. \nMedications should be dose-adjusted for the most recent available eGFR based on the most accurate available estimation for the patient. In this setting, eGFR and creatinine clearance may be used interchangeably, though they are physiologically different terms. Cutoffs for many medications are <60, <45 and <30 ml/min/1.73m2, as well as adjustments for advanced kidney disease and dialysis patients.\nMANAGEMENT\nPatients should be classified into CKD stage by both eGFR and albuminuria status. Patients with decreased GFR, increased urinary albumin excretion or both, are at high risk of progressive CKD and should be referred to nephrology for further management.\nFrom KDIGO 2012 Clinical Practice Guideline."
    },
    {
        "tool_name": "Corrected QT Interval (QTc)",
        "function_name": "calculate_qtc",
        "description": "The Corrected QT Interval (QTc) is a measure used to assess the heart's electrical recovery period, adjusted for heart rate variations. It is crucial in diagnosing conditions like Long QT Syndrome and monitoring the effects of certain medications that may prolong the QT interval, potentially leading to cardiac arrhythmias. QTc is commonly evaluated using an electrocardiogram (ECG) in clinical settings such as hospitals and health clinics.",
        "formula": "there are five kinds of formula to select to calculate the QTc.the name of the formula we choose will give at first.RR interval = 60 / HR\nBazett Formula: QTc = QT interval / √ (RR interval)\nFridericia Formula: QTc = QT interval / (RR interval)1/3\nFramingham Formula: QTc = QT interval + 154 x (1 - RR interval)\nHodges Formula: QTc = QT interval + 1.75 x [(60 / RR interval) − 60]\nRautaharju Formula: QTc = QT interval x (120 + HR) / 180",
        "code": "def calculate_qtc(qt_interval, heart_rate, formula='Bazett'):\n    \"\"\"\n    Calculate the Corrected QT Interval (QTc) for a patient.\n\n    The QTc is used primarily to assess the risk of ventricular arrhythmias, especially torsades de pointes, \n    in patients with syncope or those receiving multiple QT-prolonging medications. A prolonged QT interval \n    can indicate a higher risk of cardiac arrhythmias. This function corrects the QT interval to a heart rate \n    of 60 beats per minute, accounting for variations due to different heart rates.\n\n    Parameters:\n        qt_interval (float): The measured QT interval in milliseconds.\n        heart_rate (float): The patient's heart rate in beats per minute.\n        formula (str): The formula to use for correction. Options are 'Bazett', 'Fridericia', \n                       'Framingham', 'Hodges', and 'Rautaharju'.\n\n    Returns:\n        float: The corrected QT interval (QTc) in milliseconds.\n\n    Example:\n        >>> calculate_qtc(300, 70, 'Bazett')\n        357.0\n    \"\"\"\n    # Calculate the RR interval (time between beats) in seconds\n    rr_interval = 60 / heart_rate\n\n    if formula == 'Bazett':\n        # Bazett Formula: QTc = QT interval / sqrt(RR interval)\n        qtc = qt_interval / (rr_interval ** 0.5)\n    elif formula == 'Fridericia':\n        # Fridericia Formula: QTc = QT interval / (RR interval)^(1/3)\n        qtc = qt_interval / (rr_interval ** (1/3))\n    elif formula == 'Framingham':\n        # Framingham Formula: QTc = QT interval + 154 x (1 - RR interval)\n        qtc = qt_interval + 154 * (1 - rr_interval)\n    elif formula == 'Hodges':\n        # Hodges Formula: QTc = QT interval + 1.75 x [(60 / RR interval) - 60]\n        qtc = qt_interval + 1.75 * ((60 / rr_interval) - 60)\n    elif formula == 'Rautaharju':\n        # Rautaharju Formula: QTc = QT interval x (120 + HR) / 180\n        qtc = qt_interval * (120 + heart_rate) / 180\n    else:\n        raise ValueError(\"Unsupported formula. Choose from 'Bazett', 'Fridericia', 'Framingham', 'Hodges', or 'Rautaharju'.\")\n\n    return qtc\n",
        "docstring": "Calculate the Corrected QT Interval (QTc) for a patient.\n\n    The QTc is used primarily to assess the risk of ventricular arrhythmias, especially torsades de pointes, \n    in patients with syncope or those receiving multiple QT-prolonging medications. A prolonged QT interval \n    can indicate a higher risk of cardiac arrhythmias. This function corrects the QT interval to a heart rate \n    of 60 beats per minute, accounting for variations due to different heart rates.\n\n    Parameters:\n        qt_interval (float): The measured QT interval in milliseconds.\n        heart_rate (float): The patient's heart rate in beats per minute.\n        formula (str): The formula to use for correction. Options are 'Bazett', 'Fridericia', \n                       'Framingham', 'Hodges', and 'Rautaharju'.\n\n    Returns:\n        float: The corrected QT interval (QTc) in milliseconds.\n\n    Example:\n        >>> calculate_qtc(300, 70, 'Bazett')\n        357.0",
        "next_steps": "ADVICE\nConsider common etiologies for prolonged QT interval, including:\nElectrolyte abnormalities.\nIntrinsic cardiac causes.\nCentral causes.\nMedications.\nSee also Facts & Figures."
    },
    {
        "tool_name": "Sodium Correction for Hyperglycemia",
        "function_name": "sodium_correction_hyperglycemia",
        "description": "Sodium correction for hyperglycemia is used to adjust the measured sodium level in the blood, which can be artificially lowered by high blood glucose levels. This correction is important in accurately diagnosing and managing electrolyte imbalances in patients with conditions such as diabetic ketoacidosis or hyperosmolar hyperglycemic state. The formula typically involves adding 1.6 mmol/L to the measured sodium level for every 100 mg/dL increase in blood glucose above normal.",
        "formula": "Corrected Sodium (Hillier, 1999) = Measured sodium + 0.024 * (Serum glucose - 100)",
        "code": "def sodium_correction_hyperglycemia(measured_sodium, serum_glucose):\n    \"\"\"\n    Calculate the Corrected Sodium for Hyperglycemia using Hillier's method from 1999.\n\n    This function computes the corrected sodium level in patients with hyperglycemia,\n    accounting for osmotic shifts of water from the intracellular to the extracellular space,\n    which can lead to dilutional hyponatremia. The formula uses a correction factor of 2.4 mEq/L\n    for every 100 mg/dL increase in serum glucose above the normal threshold of 100 mg/dL.\n\n    Parameters:\n        measured_sodium (float): The measured sodium level in mEq/L.\n        serum_glucose (float): The serum glucose level in mg/dL.\n\n    Returns:\n        float: The corrected sodium level in mEq/L.\n\n    Example:\n        >>> sodium_correction_hyperglycemia(140, 200)\n        142.4\n    \"\"\"\n    correction_factor = 0.024  # Derived from Hillier et al., corresponds to 2.4 mEq/L per 100 mg/dL\n    glucose_excess = serum_glucose - 100\n    corrected_sodium = measured_sodium + correction_factor * glucose_excess\n\n    return corrected_sodium\n",
        "docstring": "Calculate the Corrected Sodium for Hyperglycemia using Hillier's method from 1999.\n\n    This function computes the corrected sodium level in patients with hyperglycemia,\n    accounting for osmotic shifts of water from the intracellular to the extracellular space,\n    which can lead to dilutional hyponatremia. The formula uses a correction factor of 2.4 mEq/L\n    for every 100 mg/dL increase in serum glucose above the normal threshold of 100 mg/dL.\n\n    Parameters:\n        measured_sodium (float): The measured sodium level in mEq/L.\n        serum_glucose (float): The serum glucose level in mg/dL.\n\n    Returns:\n        float: The corrected sodium level in mEq/L.\n\n    Example:\n        >>> sodium_correction_hyperglycemia(140, 200)\n        142.4",
        "next_steps": "ADVICE\nAct on the corrected sodium level, not the measured sodium level."
    },
    {
        "tool_name": "Glasgow-Blatchford Bleeding Score (GBS)",
        "function_name": "calculate_glasgow_blatchford_score",
        "description": "The Glasgow-Blatchford Bleeding Score (GBS) is a clinical tool used to assess the severity of bleeding and the need for medical intervention in patients presenting with acute upper gastrointestinal bleeding. It helps in identifying patients who may safely be managed as outpatients versus those who require hospital admission and urgent treatment. The score is based on a range of clinical and laboratory parameters, including blood pressure, hemoglobin levels, and comorbidities.",
        "formula": "Here are the parameter list:\n\nHemoglobin：g/dL\nBUN：mg/dL\nInitial systolic BP：mm Hg\nSex：Female/Male\nHeart rate ≥100：No0/Yes+1\nMelena present：No0/Yes+1\nRecent syncope：No0/Yes+2\nHepatic disease history：No0/Yes+2\nCardiac failure present：No0/Yes+2\n\nAddition of assigned points, as below:\n\nGlasgow-Blatchford Score\nBUN (mg/dL)\n<18.2\t0\n18.2-22.3\t+2\n22.4-28\t+3\n28-70\t+4\n>70\t+6\nHemoglobin (g/dL) for men\n>13\t0\n12-13\t+1\n10-12\t+3\n<10\t+6\nHemoglobin (g/dL) for women\n>12\t0\n10-12\t+1\n<10\t+6\nSystolic blood pressure (mm Hg)\n≥110\t0\n100–109\t+1\n90–99\t+2\n<90\t+3\nOther criteria\nPulse ≥100 (per min)\t+1\nMelena present\t+1\nPresentation with syncope\t+2\nLiver disease history\t+2\nCardiac failure present\t+2",
        "code": "def calculate_glasgow_blatchford_score(hemoglobin, bun, systolic_bp, sex, heart_rate, melena, syncope, hepatic_disease, cardiac_failure):\n    \"\"\"\n    Calculate the Glasgow-Blatchford Bleeding Score (GBS) for adult patients being considered for hospital admission due to upper GI bleeding.\n    \n    Parameters:\n    - hemoglobin (float): Patient's hemoglobin level in g/dL.\n    - bun (float): Blood Urea Nitrogen (BUN) level in mg/dL.\n    - systolic_bp (int): Initial systolic blood pressure in mm Hg.\n    - sex (int): Patient's sex, 0 for female, 1 for male.\n    - heart_rate (int): Indicates if heart rate is ≥100 per minute, 0 for no, 1 for yes.\n    - melena (int): Indicates if melena is present, 0 for no, 1 for yes.\n    - syncope (int): Indicates if there has been a recent syncope, 0 for no, 2 for yes.\n    - hepatic_disease (int): Indicates history of hepatic disease, 0 for no, 2 for yes.\n    - cardiac_failure (int): Indicates if cardiac failure is present, 0 for no, 2 for yes.\n\n    Returns:\n    - int: Glasgow-Blatchford Score, ranging from 0 to 23.\n\n    This scoring system aids in determining the necessity for hospital admission based on the severity of the patient's condition.\n    Lower scores indicate lower risk, while higher scores suggest higher risk and potential need for acute intervention.\n    \"\"\"\n    # Calculate points from BUN\n    if bun < 18.2:\n        bun_points = 0\n    elif 18.2 <= bun <= 22.3:\n        bun_points = 2\n    elif 22.4 <= bun <= 28:\n        bun_points = 3\n    elif 28 < bun <= 70:\n        bun_points = 4\n    else:\n        bun_points = 6\n\n    # Calculate points from Hemoglobin based on sex\n    if sex == 1:  # Male\n        if hemoglobin > 13:\n            hgb_points = 0\n        elif 12 <= hemoglobin <= 13:\n            hgb_points = 1\n        elif 10 <= hemoglobin < 12:\n            hgb_points = 3\n        else:\n            hgb_points = 6\n    else:  # Female\n        if hemoglobin > 12:\n            hgb_points = 0\n        elif 10 <= hemoglobin <= 12:\n            hgb_points = 1\n        else:\n            hgb_points = 6\n\n    # Calculate points from Systolic BP\n    if systolic_bp >= 110:\n        bp_points = 0\n    elif 100 <= systolic_bp <= 109:\n        bp_points = 1\n    elif 90 <= systolic_bp <= 99:\n        bp_points = 2\n    else:\n        bp_points = 3\n\n    # Sum all points\n    total_points = (bun_points + hgb_points + bp_points + heart_rate + \n                    melena + syncope + hepatic_disease + cardiac_failure)\n\n    return total_points\n",
        "docstring": "Calculate the Glasgow-Blatchford Bleeding Score (GBS) for adult patients being considered for hospital admission due to upper GI bleeding.\n    \n    Parameters:\n    - hemoglobin (float): Patient's hemoglobin level in g/dL.\n    - bun (float): Blood Urea Nitrogen (BUN) level in mg/dL.\n    - systolic_bp (int): Initial systolic blood pressure in mm Hg.\n    - sex (int): Patient's sex, 0 for female, 1 for male.\n    - heart_rate (int): Indicates if heart rate is ≥100 per minute, 0 for no, 1 for yes.\n    - melena (int): Indicates if melena is present, 0 for no, 1 for yes.\n    - syncope (int): Indicates if there has been a recent syncope, 0 for no, 2 for yes.\n    - hepatic_disease (int): Indicates history of hepatic disease, 0 for no, 2 for yes.\n    - cardiac_failure (int): Indicates if cardiac failure is present, 0 for no, 2 for yes.\n\n    Returns:\n    - int: Glasgow-Blatchford Score, ranging from 0 to 23.\n\n    This scoring system aids in determining the necessity for hospital admission based on the severity of the patient's condition.\n    Lower scores indicate lower risk, while higher scores suggest higher risk and potential need for acute intervention.\n",
        "next_steps": "ADVICE\nOnce the decision for admission has been made, efforts should focus on stratifying patients into high and low risk categories to determine which patients need ICU admission and urgent endoscopy.\nMANAGEMENT\nInitial management should always focus on hemodynamic resuscitation prior to risk stratification."
    },
    {
        "tool_name": "Fractional Excretion of Sodium (FENa)",
        "function_name": "calculate_fena",
        "description": "The Fractional Excretion of Sodium (FENa) is a diagnostic tool used primarily to differentiate between pre-renal and intrinsic renal causes of acute kidney injury (AKI). It calculates the percentage of filtered sodium excreted by the kidneys, which helps determine if kidney dysfunction is due to decreased blood flow (pre-renal) or direct kidney damage. FENa is particularly useful in hospitalized patients with acute changes in kidney function, guiding fluid management and therapeutic interventions.",
        "formula": "Fractional Excretion of Sodium (FENa), %     = 100 × (SCr × UNa ) / (SNa × UCr)\nSCr, serum creatinine; UNa, urine sodium; SNa, serum sodium; UCr, urine creatinine.\nHow the equation is derived:\nFENa is a measure of tubular resorption of Na.\nFENa = (Na excreted/Na filtered) x 100.\nNa excreted = UNa × urine volume.\nTherefore, Na filtered = PNa × (UCr × urine volume)/PCr.",
        "code": "def calculate_fena(serum_creatinine, urine_sodium, serum_sodium, urine_creatinine):\n    \"\"\"\n    Calculate the Fractional Excretion of Sodium (FENa) in percentage.\n    \n    The FENa is a clinical tool used to evaluate oliguria and/or acute kidney injury of unclear etiology. It is most\n    accurate in patients with oliguric acute kidney injury who have not been treated with diuretics, do not have\n    chronic kidney disease, urinary tract obstruction, or acute glomerular disease.\n    \n    Parameters:\n    serum_creatinine (float): Serum creatinine concentration (mg/dL)\n    urine_sodium (float): Urine sodium concentration (mmol/L)\n    serum_sodium (float): Serum sodium concentration (mmol/L)\n    urine_creatinine (float): Urine creatinine concentration (mg/dL)\n    \n    Returns:\n    float: The Fractional Excretion of Sodium (FENa) in percentage\n    \n    Note:\n    FENa is calculated using the formula:\n    FENa (%) = 100 × (serum_creatinine × urine_sodium) / (serum_sodium × urine_creatinine)\n    \"\"\"\n    fena = 100 * (serum_creatinine * urine_sodium) / (serum_sodium * urine_creatinine)\n    return fena\n",
        "docstring": "Calculate the Fractional Excretion of Sodium (FENa) in percentage.\n    \n    The FENa is a clinical tool used to evaluate oliguria and/or acute kidney injury of unclear etiology. It is most\n    accurate in patients with oliguric acute kidney injury who have not been treated with diuretics, do not have\n    chronic kidney disease, urinary tract obstruction, or acute glomerular disease.\n    \n    Parameters:\n    serum_creatinine (float): Serum creatinine concentration (mg/dL)\n    urine_sodium (float): Urine sodium concentration (mmol/L)\n    serum_sodium (float): Serum sodium concentration (mmol/L)\n    urine_creatinine (float): Urine creatinine concentration (mg/dL)\n    \n    Returns:\n    float: The Fractional Excretion of Sodium (FENa) in percentage\n    \n    Note:\n    FENa is calculated using the formula:\n    FENa (%) = 100 × (serum_creatinine × urine_sodium) / (serum_sodium × urine_creatinine)",
        "next_steps": "ADVICE\nNo FENa percentage will always accurately suggest “pre-renal” disease. Always consider history, clinical context, physical exam, and current medications.\nObtaining repeat FENa or urine studies throughout a patient’s hospital course can give more clinical clues.\nNon-volume depleted states with low urine sodium (and consequently low FENa) include: acute glomerulonephritis, cardiorenal syndrome, hepatorenal syndrome, contrast-related nephropathy, and rarely, acute obstruction and early acute interstitial nephritis (AIN) or acute tubular necrosis (ATN).\nMANAGEMENT\nIn patients with acute kidney and suspected obstructive uropathy, consider bedside ultrasound to evaluate for hydronephrosis, bladder distention, etc. Empiric Foley catheter placement may also be valid in some settings, though it may also be associated with complications, and does not rule out ureteral obstructions above the bladder."
    },
    {
        "tool_name": "Glasgow Coma Scale/Score (GCS)",
        "function_name": "calculate_glasgow_coma_scale",
        "description": "The Glasgow Coma Scale (GCS) is a clinical tool used to assess a person's level of consciousness after a head injury. It evaluates three aspects of responsiveness: eye-opening, verbal response, and motor response, assigning a score that helps guide medical treatment. The GCS is widely used in emergency settings, intensive care units, and during the initial assessment in hospitals to monitor patient progress and prognosis.",
        "formula": "The Glasgow Coma Score is calculated by addition of the total points selected under each component (eye, verbal, motor) below, e.g. \"15 points\".\nThe Glasgow Coma Scale is comprised of the individual components\nComponent\tResponse\tPoints\nEye:\nEyes open spontaneously\t+4\nEye opening to verbal command\t+3\nEye opening to pain\t+2\nNo eye opening\t+1\nNot testable*\tNT\nVerbal:\nOriented\t+5\nConfused\t+4\nInappropriate words\t+3\nIncomprehensible sounds\t+2\nNo verbal response\t+1\nNot testable/intubated*\tNT\nMotor:\nObeys commands\t+6\nLocalizes pain\t+5\nWithdrawal from pain\t+4\nFlexion to pain\t+3\nExtension to pain\t+2\nNo motor response\t+1\nNot testable*\tNT",
        "code": "def calculate_glasgow_coma_scale(eye_response, verbal_response, motor_response):\n    \"\"\"\n    Calculates the Glasgow Coma Scale/Score (GCS) based on the assessment of three key responses:\n    eye, verbal, and motor. The GCS is used to assess the level of consciousness in patients who are\n    in a coma due to medical or surgical causes and is applicable in various settings including\n    pre-hospital, acute care, and research.\n\n    The scale is particularly important for monitoring trends in a patient's mental status,\n    facilitating communication between healthcare providers, and aiding in decisions regarding\n    patient management.\n\n    Parameters:\n    eye_response (int or str): Score or 'NT' (not testable) for eye response\n    verbal_response (int or str): Score or 'NT' (not testable) for verbal response\n    motor_response (int or str): Score or 'NT' (not testable) for motor response\n\n    Returns:\n    int or None: Total GCS score if all components are testable, otherwise None\n\n    Notes:\n    - Scores for each component:\n      * Eye:    4 (spontaneous), 3 (to verbal command), 2 (to pain), 1 (none)\n      * Verbal: 5 (oriented), 4 (confused), 3 (inappropriate words),\n                2 (incomprehensible sounds), 1 (no verbal response)\n      * Motor:  6 (obeys commands), 5 (localizes pain), 4 (withdrawal from pain),\n                3 (flexion to pain), 2 (extension to pain), 1 (no motor response)\n    - If any component is 'NT' (not testable), the function returns None to indicate that\n      the GCS cannot be fully assessed.\n    \"\"\"\n    # Validate inputs\n    def is_valid(response):\n        return response in [1, 2, 3, 4, 5, 6, 'NT']\n    \n    if not (is_valid(eye_response) and is_valid(verbal_response) and is_valid(motor_response)):\n        raise ValueError(\"Invalid response scores or 'NT' provided. Please provide valid scores.\")\n    \n    # Calculate total GCS score\n    if 'NT' in [eye_response, verbal_response, motor_response]:\n        return None  # Invalid to sum scores if any component is not testable\n    else:\n        return eye_response + verbal_response + motor_response\n\n",
        "docstring": "Calculates the Glasgow Coma Scale/Score (GCS) based on the assessment of three key responses:\n    eye, verbal, and motor. The GCS is used to assess the level of consciousness in patients who are\n    in a coma due to medical or surgical causes and is applicable in various settings including\n    pre-hospital, acute care, and research.\n\n    The scale is particularly important for monitoring trends in a patient's mental status,\n    facilitating communication between healthcare providers, and aiding in decisions regarding\n    patient management.\n\n    Parameters:\n    eye_response (int or str): Score or 'NT' (not testable) for eye response\n    verbal_response (int or str): Score or 'NT' (not testable) for verbal response\n    motor_response (int or str): Score or 'NT' (not testable) for motor response\n\n    Returns:\n    int or None: Total GCS score if all components are testable, otherwise None\n\n    Notes:\n    - Scores for each component:\n      * Eye:    4 (spontaneous), 3 (to verbal command), 2 (to pain), 1 (none)\n      * Verbal: 5 (oriented), 4 (confused), 3 (inappropriate words),\n                2 (incomprehensible sounds), 1 (no verbal response)\n      * Motor:  6 (obeys commands), 5 (localizes pain), 4 (withdrawal from pain),\n                3 (flexion to pain), 2 (extension to pain), 1 (no motor response)\n    - If any component is 'NT' (not testable), the function returns None to indicate that\n      the GCS cannot be fully assessed.",
        "next_steps": "ADVICE\nThe GCS score can be indicative of how critically ill a patient is.\nTrauma patients presenting with GCS <15 warrant close attention and reassessment.\nA declining GCS is concerning in any setting and should prompt assessment of the airway and possible intervention.\nConversely, a GCS of 15 should not be taken as an indication that a patient (trauma or medical) is not critically ill. Decisions about the aggressiveness of the management and treatment plans should be made based on clinical presentation and context and not in any way overridden by the GCS score.\nMANAGEMENT\nClinical management decisions should not be based solely on the GCS score in the acute setting.\nIf a trauma patient has a GCS ≤8 and there is clinical concern that they are unable to protect their airway or that they have an expected worsening clinical course based on exam or imaging findings, then intubation can be considered.\nIn any patient, a rapidly declining or waxing and waning GCS is concerning and intubation should be considered in the context of the patient's overall clinical picture.\nCRITICAL ACTIONS\nAlthough it has been adopted widely and in a variety of settings, the GCS score is not intended for quantitative use.\nClinical management decisions should not be based solely on the GCS score in the acute setting.\nFrom the creators of the GCS:\n“We have never recommended using the GCS alone, either as a means of monitoring coma, or to assess the severity of brain damage or predict outcome.” (Teasdale 2014)"
    },
    {
        "tool_name": "Ideal Body Weight and Adjusted Body Weight",
        "function_name": "calculate_ibw_abw",
        "description": "Ideal Body Weight (IBW) is used primarily to calculate drug dosages and medical needs where a standard weight is beneficial for clinical calculations. Adjusted Body Weight (AdjBW) is used especially in cases where patients are obese, adjusting the dosage to better match physiological needs without under- or overdosing. Both metrics are essential in healthcare settings to tailor treatments for individual patients accurately.",
        "formula": "Ideal Body Weight (Devine formula):\nIdeal body weight (IBW) (men) = 50 kg + 2.3 kg x (height, in - 60)\nIdeal body weight (IBW) (women) = 45.5 kg + 2.3 kg x  (height, in - 60)\nNote: this formula is only an approximation, and is generally only applicable for people 60 inches (5 foot) tall or greater. For patients under 5 feet, one commonly-used modification is to subtract 2-5 lbs for each inch below 60 inches (written communication with leading expert Dr. Manjunath Pai, 2018).\nAdjusted Body Weight (ABW), for use in obese patients (where actual body weight > IBW):\nABW = IBW + 0.4 x (actual body weight - IBW).The answer return as a List.",
        "code": "def calculate_ibw_abw(height_in_inches, actual_body_weight, gender):\n    \"\"\"\n    Calculate the Ideal Body Weight (IBW) and Adjusted Body Weight (ABW) based on height and gender.\n    \n    The IBW calculation uses the Devine formula, which is applicable for individuals who are at least 60 inches tall.\n    For individuals shorter than 5 feet, the IBW is adjusted by subtracting 2-5 lbs for each inch below 60 inches.\n    The ABW is used for obese patients where the actual body weight exceeds the IBW, calculated as:\n    ABW = IBW + 0.4 * (actual body weight - IBW).\n    \n    Parameters:\n        height_in_inches (int): The height of the individual in inches.\n        actual_body_weight (float): The actual body weight of the individual in kilograms.\n        gender (str): The gender of the individual (\"male\" or \"female\").\n\n    Returns:\n        list: A list containing the IBW and ABW in kilograms. If the individual is not obese, ABW is set equal to IBW.\n    \"\"\"\n    if height_in_inches < 60:\n        # Adjusting IBW for individuals shorter than 60 inches\n        adjustment = 2.5 * (60 - height_in_inches)  # Using an average of 2-5 lbs, approx 2.5 lbs\n        adjustment_kg = adjustment * 0.453592  # Converting lbs to kg\n    else:\n        adjustment_kg = 0\n\n    # Calculate IBW based on gender\n    if gender.lower() == 'male':\n        ibw = 50 + 2.3 * (height_in_inches - 60)  # IBW in kg for males\n    elif gender.lower() == 'female':\n        ibw = 45.5 + 2.3 * (height_in_inches - 60)  # IBW in kg for females\n    else:\n        raise ValueError(\"Gender must be either 'male' or 'female'\")\n    \n    # Adjust IBW for short individuals\n    ibw = max(0, ibw - adjustment_kg)\n\n    # Calculate ABW if actual body weight is greater than IBW\n    if actual_body_weight > ibw:\n        abw = ibw + 0.4 * (actual_body_weight - ibw)\n    else:\n        abw = ibw  # If not obese, ABW equals IBW\n\n    return [ibw, abw]\n",
        "docstring": "Calculate the Ideal Body Weight (IBW) and Adjusted Body Weight (ABW) based on height and gender.\n    \n    The IBW calculation uses the Devine formula, which is applicable for individuals who are at least 60 inches tall.\n    For individuals shorter than 5 feet, the IBW is adjusted by subtracting 2-5 lbs for each inch below 60 inches.\n    The ABW is used for obese patients where the actual body weight exceeds the IBW, calculated as:\n    ABW = IBW + 0.4 * (actual body weight - IBW).\n    \n    Parameters:\n        height_in_inches (int): The height of the individual in inches.\n        actual_body_weight (float): The actual body weight of the individual in kilograms.\n        gender (str): The gender of the individual (\"male\" or \"female\").\n\n    Returns:\n        list: A list containing the IBW and ABW in kilograms. If the individual is not obese, ABW is set equal to IBW.",
        "next_steps": "ADVICE\nConfirm medication dosing with pharmacy: some medication dosing uses ideal body weight while others use actual body weight."
    },
    {
        "tool_name": "Sequential Organ Failure Assessment (SOFA) Score",
        "function_name": "calculate_SOFA_score",
        "description": "The Sequential Organ Failure Assessment (SOFA) Score is a medical tool used to assess the extent of organ function or rate of failure in critically ill patients. It helps predict intensive care outcomes by tracking six organ systems, including respiratory, cardiovascular, hepatic, coagulation, renal, and neurological systems. The SOFA Score is commonly used in intensive care units to evaluate a patient's status daily or to monitor changes in their condition over time.",
        "formula": "Addition of the selected points:\nVariable\nPoints\nPaO2/FiO2*, mmHg\n≥400\n0\n300-399\n+1\n200-299\n+2\n≤199 and NOT mechanically ventilated\n+2\n100-199 and mechanically ventilated\n+3\n<100 and mechanically ventilated\n+4\nPlatelets, ×103/µL\n≥150\n0\n100-149\n+1\n50-99\n+2\n20-49\n+3\n<20\n+4\nGlasgow Coma Scale\n15\n0\n13–14\n+1\n10–12\n+2\n6–9\n+3\n<6\n+4\nBilirubin, mg/dL (μmol/L)\n<1.2 (<20)\n0\n1.2–1.9 (20-32)\n+1\n2.0–5.9 (33-101)\n+2\n6.0–11.9 (102-204)\n+3\n≥12.0 (>204)\n+4\nMean arterial pressure OR administration of vasoactive agents required (listed doses are in units of mcg/kg/min)\nNo hypotension\n0\nMAP <70 mmHg\n+1\nDOPamine ≤5 or DOBUTamine (any dose)\n+2\nDOPamine >5, EPINEPHrine ≤0.1, or norEPINEPHrine ≤0.1\n+3\nDOPamine >15, EPINEPHrine >0.1, or norEPINEPHrine >0.1\n+4\nCreatinine, mg/dL (μmol/L) (or urine output)\n<1.2 (<110)\n0\n1.2–1.9 (110-170)\n+1\n2.0–3.4 (171-299)\n+2\n3.5–4.9 (300-440) or UOP <500 mL/day)\n+3\n≥5.0 (>440) or UOP <200 mL/day\n+4\n  *Estimating FiO₂ from oxygen flow/delivery rates:\nType of O₂ delivery\nFlow rates, L/min\nFiO₂\nNasal cannula\n1-6\n~4% FiO₂ added above room air* per 1 L/min\nRoom air = 21% \n1 L/min = 25%\n2 L/min = 29%\n3 L/min = 33%\n4 L/min = 37%\n5 L/min = 41%\n6 L/min = 45%\nSimple face mask\n~6-12\n35-60%*\nNon-rebreather mask\n10-15\n~70-90%\nHigh-flow nasal cannula\nUp to 60\n30-100%\n*Varies based on respiratory rate and minute ventilation.",
        "code": "def calculate_SOFA_score(pao2_fio2_ratio, platelets, glasgow_coma_scale, bilirubin, map_pressure, vasoactive_agents, creatinine, urine_output, o2_delivery_type, o2_flow_rate):\n    \"\"\"\n    Calculate the Sequential Organ Failure Assessment (SOFA) Score which is used to assess the extent of a person's organ function or rate of failure.\n    The score is used to track a patient's status during their stay in an intensive care unit to determine the extent of a person's organ function or rate of failure.\n\n    Parameters:\n    - pao2_fio2_ratio (float): The ratio of arterial oxygen partial pressure to fractional inspired oxygen (mmHg).\n    - platelets (float): Platelet count in ×103/µL.\n    - glasgow_coma_scale (int): Score on the Glasgow Coma Scale.\n    - bilirubin (float): Serum bilirubin in mg/dL.\n    - map_pressure (float): Mean arterial pressure in mmHg.\n    - vasoactive_agents (int): Index indicating the vasoactive agents being used. Corresponds to 0 for no agents, 1 for low dose dopamine or any dose dobutamine, 2 for higher dose dopamine or low dose epinephrine/norepinephrine, 3 for very high dose of these agents.\n    - creatinine (float): Serum creatinine in mg/dL.\n    - urine_output (float): Urine output in mL/day.\n    - o2_delivery_type (int): Index of the type of oxygen delivery method used. Types are as follows: 0 = nasal cannula, 1 = simple face mask, 2 = non-rebreather mask, 3 = high-flow nasal cannula.\n    - o2_flow_rate (float): Flow rate of oxygen delivery in L/min.\n\n    Returns:\n    int: Total SOFA score which is the sum of individual scores across the specified parameters.\n    \"\"\"\n    # FiO2 estimation from type of O₂ delivery and flow rates\n    fi02_estimations = [21 + 4 * o2_flow_rate, 35 if o2_flow_rate < 10 else 60, 70 if o2_flow_rate < 12 else 90, 30 + 70 * (o2_flow_rate / 60)]\n    fi02 = fi02_estimations[o2_delivery_type]\n    estimated_fio2_ratio = pao2_fio2_ratio / fi02 * 100\n\n    # Scoring based on PaO2/FiO2 ratios\n    if estimated_fio2_ratio >= 400:\n        respiratory_score = 0\n    elif 300 <= estimated_fio2_ratio < 400:\n        respiratory_score = 1\n    elif 200 <= estimated_fio2_ratio < 300:\n        respiratory_score = 2\n    elif estimated_fio2_ratio < 200:\n        respiratory_score = 2 + (1 if o2_delivery_type in [1, 2, 3] and o2_flow_rate >= 10 else 0)\n\n    # Platelet scoring\n    if platelets >= 150:\n        platelet_score = 0\n    elif 100 <= platelets < 150:\n        platelet_score = 1\n    elif 50 <= platelets < 100:\n        platelet_score = 2\n    elif 20 <= platelets < 50:\n        platelet_score = 3\n    else:\n        platelet_score = 4\n\n    # Glasgow coma scale scoring\n    if glasgow_coma_scale == 15:\n        gcs_score = 0\n    elif 13 <= glasgow_coma_scale <= 14:\n        gcs_score = 1\n    elif 10 <= glasgow_coma_scale <= 12:\n        gcs_score = 2\n    elif 6 <= glasgow_coma_scale <= 9:\n        gcs_score = 3\n    else:\n        gcs_score = 4\n\n    # Bilirubin scoring\n    if bilirubin < 1.2:\n        bilirubin_score = 0\n    elif 1.2 <= bilirubin <= 1.9:\n        bilirubin_score = 1\n    elif 2.0 <= bilirubin <= 5.9:\n        bilirubin_score = 2\n    elif 6.0 <= bilirubin <= 11.9:\n        bilirubin_score = 3\n    else:\n        bilirubin_score = 4\n\n    # MAP and vasoactive agents scoring\n    if map_pressure >= 70 and vasoactive_agents == 0:\n        cardiovascular_score = 0\n    elif map_pressure < 70:\n        cardiovascular_score = 1\n\n",
        "docstring": "\"Calculate the Sequential Organ Failure Assessment (SOFA) Score which is used to assess the extent of a person's organ function or rate of failure.\nThe score is used to track a patient's status during their stay in an intensive care unit to determine the extent of a person's organ function or rate of failure.\n\nParameters:\n- pao2_fio2_ratio (float): The ratio of arterial oxygen partial pressure to fractional inspired oxygen (mmHg).\n- platelets (float): Platelet count in ×103/µL.\n- glasgow_coma_scale (int): Score on the Glasgow Coma Scale.\n- bilirubin (float): Serum bilirubin in mg/dL.\n- map_pressure (float): Mean arterial pressure in mmHg.\n- vasoactive_agents (int): Index indicating the vasoactive agents being used. Corresponds to 0 for no agents, 1 for low dose dopamine or any dose dobutamine, 2 for higher dose dopamine or low dose epinephrine/norepinephrine, 3 for very high dose of these agents.\n- creatinine (float): Serum creatinine in mg/dL.\n- urine_output (float): Urine output in mL/day.\n- o2_delivery_type (int): Index of the type of oxygen delivery method used. Types are as follows: 0 = nasal cannula, 1 = simple face mask, 2 = non-rebreather mask, 3 = high-flow nasal cannula.\n- o2_flow_rate (float): Flow rate of oxygen delivery in L/min.\n\nReturns:\nint: Total SOFA score which is the sum of individual scores across the specified parameters.\"",
        "next_steps": "MANAGEMENT\nEven though it is calculated sequentially based on the worst values in the past 24 hours, the SOFA Score is not meant to indicate the success or failure of interventions or to influence medical management.\nCRITICAL ACTIONS\nClinical prediction tools such as the SOFA and APACHE II Scores can be measured on all patients admitted to the intensive care unit in order to determine level of acuity and mortality risk.\nThis information can then be used in a number of ways, such as to provide the family with a prognosis, for clinical trials, or for quality assessment.\nThe SOFA Score is not designed to influence medical management. As such, it should not be used dynamically or to determine success or failure of an intervention in the ICU."
    },
    {
        "tool_name": "LDL Calculated",
        "function_name": "calculate_ldl",
        "description": "LDL Calculated, or LDL-C, is an estimation of the low-density lipoprotein cholesterol in the blood, often used to assess cardiovascular risk. It is commonly measured during routine health screenings or when a patient has risk factors for heart disease. This calculation helps guide decisions on lifestyle changes and medications to manage cholesterol levels effectively.",
        "formula": "LDL cholesterol = total cholesterol - HDL - (triglycerides / 5)",
        "code": "def calculate_ldl(total_cholesterol, hdl, triglycerides):\n    \"\"\"\n    Calculate the Low-Density Lipoprotein (LDL) cholesterol level using the Friedewald formula.\n    \n    Parameters:\n        total_cholesterol (float): Total cholesterol level in mg/dL.\n        hdl (float): High-Density Lipoprotein (HDL) cholesterol level in mg/dL.\n        triglycerides (float): Triglyceride level in mg/dL, measured while fasting.\n\n    Returns:\n        float: Estimated LDL cholesterol level in mg/dL.\n\n    Notes:\n        - The Friedewald formula is generally accurate but can be inaccurate at extremes\n          of triglycerides and total cholesterol levels.\n        - It is recommended to use this calculation only for fasting triglyceride levels.\n\n    Example:\n        >>> calculate_ldl(200, 50, 150)\n        110.0\n\n    References:\n        Cordova, A. (2004). Friedewald formula inaccuracies.\n    \"\"\"\n    ldl_cholesterol = total_cholesterol - hdl - (triglycerides / 2)\n    return ldl_cholesterol\n",
        "docstring": "Calculate the Low-Density Lipoprotein (LDL) cholesterol level using the Friedewald formula.\n    \n    Parameters:\n        total_cholesterol (float): Total cholesterol level in mg/dL.\n        hdl (float): High-Density Lipoprotein (HDL) cholesterol level in mg/dL.\n        triglycerides (float): Triglyceride level in mg/dL, measured while fasting.\n\n    Returns:\n        float: Estimated LDL cholesterol level in mg/dL.\n\n    Notes:\n        - The Friedewald formula is generally accurate but can be inaccurate at extremes\n          of triglycerides and total cholesterol levels.\n        - It is recommended to use this calculation only for fasting triglyceride levels.\n\n    Example:\n        >>> calculate_ldl(200, 50, 150)\n        110.0\n\n    References:\n        Cordova, A. (2004). Friedewald formula inaccuracies.",
        "next_steps": "ADVICE\nPatients with elevated cholesterol may have success with diet and exercise, however those with other cardiovascular risk factors may require medication to reduce levels significantly.\nLatest LDL Guidelines (NCEP 2004 Update):\n“Very” High Risk: Guidelines suggest <70mg/dL may be a reasonable option, but data may suggest there is little incremental benefit to this extreme but with high associated cost\nHigh Risk (known CAD, known other atherosclerotic dz, diabetes, etc): <100 mg/dL\nModerate Risk (>1 risk factor): <130 mg/dL\nLower Risk (0-1 risk factors): <160 mg/dL"
    },
    {
        "tool_name": "NIH Stroke Scale/Score (NIHSS)",
        "function_name": "calculate_nihss",
        "description": "The NIH Stroke Scale/Score (NIHSS) is a tool used by healthcare professionals to objectively quantify the impairment caused by a stroke. It is administered in acute care settings, typically in emergency departments or stroke units, to assess stroke severity and guide treatment decisions. The NIHSS evaluates various neurological functions, including consciousness, vision, motor skills, and speech, helping to determine the appropriate clinical interventions.",
        "formula": "Addition of the selected points\n1A: Level of consciousness\nMay be assessed casually while taking history\n\nAlert; keenly responsive\n0\n\nArouses to minor stimulation\n+1\n\nRequires repeated stimulation to arouse\n+2\n\nMovements to pain\n+2\n\nPostures or unresponsive\n+3\n1B: Ask month and age\n\nBoth questions right\n0\n\n1 question right\n+1\n\n0 questions right\n+2\n\nDysarthric/intubated/trauma/language barrier\n+1\n\nAphasic\n+2\n1C: 'Blink eyes' & 'squeeze hands'\nPantomime commands if communication barrier\n\nPerforms both tasks\n0\n\nPerforms 1 task\n+1\n\nPerforms 0 tasks\n+2\n2: Horizontal extraocular movements\nOnly assess horizontal gaze\n\nNormal\n0\n\nPartial gaze palsy: can be overcome\n+1\n\nPartial gaze palsy: corrects with oculocephalic reflex\n+1\n\nForced gaze palsy: cannot be overcome\n+2\n3: Visual fields\n\nNo visual loss\n0\n\nPartial hemianopia\n+1\n\nComplete hemianopia\n+2\n\nPatient is bilaterally blind\n+3\n\nBilateral hemianopia\n+3\n4: Facial palsy\nUse grimace if obtunded\n\nNormal symmetry\n0\n\nMinor paralysis (flat nasolabial fold, smile asymmetry)\n+1\n\nPartial paralysis (lower face)\n+2\n\nUnilateral complete paralysis (upper/lower face)\n+3\n\nBilateral complete paralysis (upper/lower face)\n+3\n5A: Left arm motor drift\nCount out loud and use your fingers to show the patient your count\n\nNo drift for 10 seconds\n0\n\nDrift, but doesn't hit bed\n+1\n\nDrift, hits bed\n+2\n\nSome effort against gravity\n+2\n\nNo effort against gravity\n+3\n\nNo movement\n+4\n\nAmputation/joint fusion\n0\n5B: Right arm motor drift\nCount out loud and use your fingers to show the patient your count\n\nNo drift for 10 seconds\n0\n\nDrift, but doesn't hit bed\n+1\n\nDrift, hits bed\n+2\n\nSome effort against gravity\n+2\n\nNo effort against gravity\n+3\n\nNo movement\n+4\n\nAmputation/joint fusion\n0\n6A: Left leg motor drift\nCount out loud and use your fingers to show the patient your count\n\nNo drift for 5 seconds\n0\n\nDrift, but doesn't hit bed\n+1\n\nDrift, hits bed\n+2\n\nSome effort against gravity\n+2\n\nNo effort against gravity\n+3\n\nNo movement\n+4\n\nAmputation/joint fusion\n0\n6B: Right leg motor drift\nCount out loud and use your fingers to show the patient your count\n\nNo drift for 5 seconds\n0\n\nDrift, but doesn't hit bed\n+1\n\nDrift, hits bed\n+2\n\nSome effort against gravity\n+2\n\nNo effort against gravity\n+3\n\nNo movement\n+4\n\nAmputation/joint fusion\n0\n7: Limb Ataxia\nFNF/heel-shin\n\nNo ataxia\n0\n\nAtaxia in 1 Limb\n+1\n\nAtaxia in 2 Limbs\n+2\n\nDoes not understand\n0\n\nParalyzed\n0\n\nAmputation/joint fusion\n0\n8: Sensation\n\nNormal; no sensory loss\n0\n\nMild-moderate loss: less sharp/more dull\n+1\n\nMild-moderate loss: can sense being touched\n+1\n\nComplete loss: cannot sense being touched at all\n+2\n\nNo response and quadriplegic\n+2\n\nComa/unresponsive\n+2\n9: Language/aphasia\nDescribe the scene; name the items; read the sentences (see Evidence)\n\nNormal; no aphasia\n0\n\nMild-moderate aphasia: some obvious changes, without significant limitation\n+1\n\nSevere aphasia: fragmentary expression, inference needed, cannot identify materials\n+2\n\nMute/global aphasia: no usable speech/auditory comprehension\n+3\n\nComa/unresponsive\n+3\n10: Dysarthria\nRead the words (see Evidence)\n\nNormal\n0\n\nMild-moderate dysarthria: slurring but can be understood\n+1\n\nSevere dysarthria: unintelligible slurring or out of proportion to dysphasia\n+2\n\nMute/anarthric\n+2\n\nIntubated/unable to test\n0\n11: Extinction/inattention\n\nNo abnormality\n0\n\nVisual/tactile/auditory/spatial/personal inattention\n+1\n\nExtinction to bilateral simultaneous stimulation\n+1\n\nProfound hemi-inattention (ex: does not recognize own hand)\n+2\n\nExtinction to >1 modality\n+2",
        "code": "def calculate_nihss(\n    loc_alertness: int,\n    loc_questions: int,\n    loc_commands: int,\n    horizontal_gaze: int,\n    visual_fields: int,\n    facial_palsy: int,\n    left_arm_motor_drift: int,\n    right_arm_motor_drift: int,\n    left_leg_motor_drift: int,\n    right_leg_motor_drift: int,\n    limb_ataxia: int,\n    sensation: int,\n    language_aphasia: int,\n    dysarthria: int,\n    extinction_inattention: int\n) -> int:\n    \"\"\"\n    Calculate the NIH Stroke Scale/Score (NIHSS).\n\n    The NIHSS helps physicians quantify the severity of a stroke in the acute setting. \n    Increasing scores indicate a more severe stroke and correlate with the size of the infarction on both CT and MRI evaluation.\n    Scores assessed within the first 48 hours following a stroke have been shown to correlate with clinical outcomes at the 3-month and 1-year mark.\n    \n    Parameters:\n        loc_alertness (int): Level of consciousness - Alert (0), Arouses to minor stimulation (1), Requires repeated stimulation (2), Movements to pain (2), Postures or unresponsive (3)\n        loc_questions (int): Ask month and age - Both right (0), One right (1), None right (2), Dysarthric/intubated/trauma/language barrier (1), Aphasic (2)\n        loc_commands (int): 'Blink eyes' & 'squeeze hands' - Performs both (0), Performs one (1), Performs none (2)\n        horizontal_gaze (int): Horizontal extraocular movements - Normal (0), Partial palsy (1), Forced palsy (2)\n        visual_fields (int): Visual fields - No loss (0), Partial hemianopia (1), Complete hemianopia (2), Bilateral blindness (3), Bilateral hemianopia (3)\n        facial_palsy (int): Facial palsy - Normal (0), Minor (1), Partial (2), Unilateral complete (3), Bilateral complete (3)\n        left_arm_motor_drift (int): Left arm motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        right_arm_motor_drift (int): Right arm motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        left_leg_motor_drift (int): Left leg motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        right_leg_motor_drift (int): Right leg motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        limb_ataxia (int): Limb ataxia - No ataxia (0), Ataxia in 1 limb (1), Ataxia in 2 limbs (2), Does not understand (0), Paralyzed (0), Amputation/joint fusion (0)\n        sensation (int): Sensation - Normal (0), Mild-moderate loss (1), Mild-moderate loss (1), Complete loss (2), No response/quadriplegic (2), Coma/unresponsive (2)\n        language_aphasia (int): Language/aphasia - Normal (0), Mild-moderate aphasia (1), Severe aphasia (2), Mute/global aphasia (3), Coma/unresponsive (3)\n        dysarthria (int): Dysarthria - Normal (0), Mild-moderate (1), Severe (2), Mute/anarthric (2), Intubated/unable to test (0)\n        extinction_inattention (int): Extinction/inattention - No abnormality (0), Inattention (1), Extinction to bilateral stimulation (1), Profound hemi-inattention (2), Extinction to >1 modality (2)\n\n    Returns:\n        int: Total NIHSS score, summing all input values.\n    \"\"\"\n    total_score = (\n        loc_alertness +\n        loc_questions +\n        loc_commands +\n        horizontal_gaze +\n        visual_fields +\n        facial_palsy +\n        left_arm_motor_drift +\n        right_arm_motor_drift +\n        left_leg_motor_drift +\n        right_leg_motor_drift +\n        limb_ataxia +\n        sensation +\n        language_aphasia +\n        dysarthria +\n        extinction_inattention\n    )\n\n    return total_score\n",
        "docstring": "\n    Calculate the NIH Stroke Scale/Score (NIHSS).\n\n    The NIHSS helps physicians quantify the severity of a stroke in the acute setting. \n    Increasing scores indicate a more severe stroke and correlate with the size of the infarction on both CT and MRI evaluation.\n    Scores assessed within the first 48 hours following a stroke have been shown to correlate with clinical outcomes at the 3-month and 1-year mark.\n    \n    Parameters:\n        loc_alertness (int): Level of consciousness - Alert (0), Arouses to minor stimulation (1), Requires repeated stimulation (2), Movements to pain (2), Postures or unresponsive (3)\n        loc_questions (int): Ask month and age - Both right (0), One right (1), None right (2), Dysarthric/intubated/trauma/language barrier (1), Aphasic (2)\n        loc_commands (int): 'Blink eyes' & 'squeeze hands' - Performs both (0), Performs one (1), Performs none (2)\n        horizontal_gaze (int): Horizontal extraocular movements - Normal (0), Partial palsy (1), Forced palsy (2)\n        visual_fields (int): Visual fields - No loss (0), Partial hemianopia (1), Complete hemianopia (2), Bilateral blindness (3), Bilateral hemianopia (3)\n        facial_palsy (int): Facial palsy - Normal (0), Minor (1), Partial (2), Unilateral complete (3), Bilateral complete (3)\n        left_arm_motor_drift (int): Left arm motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        right_arm_motor_drift (int): Right arm motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        left_leg_motor_drift (int): Left leg motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        right_leg_motor_drift (int): Right leg motor drift - No drift (0), Drift but doesn't hit bed (1), Drift, hits bed (2), Some effort against gravity (2), No effort against gravity (3), No movement (4), Amputation/joint fusion (0)\n        limb_ataxia (int): Limb ataxia - No ataxia (0), Ataxia in 1 limb (1), Ataxia in 2 limbs (2), Does not understand (0), Paralyzed (0), Amputation/joint fusion (0)\n        sensation (int): Sensation - Normal (0), Mild-moderate loss (1), Mild-moderate loss (1), Complete loss (2), No response/quadriplegic (2), Coma/unresponsive (2)\n        language_aphasia (int): Language/aphasia - Normal (0), Mild-moderate aphasia (1), Severe aphasia (2), Mute/global aphasia (3), Coma/unresponsive (3)\n        dysarthria (int): Dysarthria - Normal (0), Mild-moderate (1), Severe (2), Mute/anarthric (2), Intubated/unable to test (0)\n        extinction_inattention (int): Extinction/inattention - No abnormality (0), Inattention (1), Extinction to bilateral stimulation (1), Profound hemi-inattention (2), Extinction to >1 modality (2)\n\n    Returns:\n        int: Total NIHSS score, summing all input values.\n   ",
        "next_steps": "ADVICE\nConsult Neurology immediately (if available) for all patients presenting with ischemic stroke.\nEvaluate whether the patient is a potential candidate to receive intravenous thrombolysis (tPA).\nConsider further imaging including CT, CT angiography and MRI/MRA.\nMANAGEMENT\nIn patients who present with symptoms concerning for ischemic stroke:\nConsult Neurology.\nDetermine the onset of stroke symptoms (or time patient last felt or was observed normal).\nObtain a stat head CT to evaluate for hemorrhagic stroke.\nIn appropriate circumstances and in consultation with both neurology and the patient, consider IV thrombolysis for ischemic strokes in patients with no contraindications.\nAlways consider stroke mimics in the differential diagnosis, especially in cases with atypical features (age, risk factors, history, physical exam), including:\nRecrudescence of old stroke from metabolic or infectious stress;\nTodd’s paralysis after seizure;\nComplex migraine;\nPseudoseizure, conversion disorder\nCRITICAL ACTIONS\nThe NIHSS is broadly predictive of clinical outcomes, but it is important to recognize that individual cases will vary and that management decisions must be made in consultation with the patient whenever possible.\nPatients with a score of <4 are highly likely to have good clinical outcomes.\nWhenever possible, patients with acute stroke should be transferred to a stroke center for their initial evaluation and treatment, as the holistic care (medical optimization, early initiation of PT and OT, patient and family education and discharge planning) is associated with improved clinical outcomes; some argue that most of the gains in stroke morbidity and mortality are due to these improvements in stroke care."
    },
    {
        "tool_name": "Maintenance Fluids Calculations",
        "function_name": "calculate_maintenance_fluids",
        "description": "Maintenance fluids calculations are used in medical settings to determine the appropriate volume and composition of fluids required to keep a patient hydrated and maintain normal physiological functions, particularly when they cannot consume fluids orally. These calculations are essential for patients undergoing surgery, those with compromised fluid intake, and in the management of certain medical conditions like kidney diseases or severe infections. The formula considers factors such as weight, age, and clinical status to ensure the patient receives the optimal hydration needed for recovery and health maintenance.",
        "formula": "Calculated using the “4-2-1” Rule:\nFor 0-10 kg: 4 mL/kg/hr\nFor >10-20 kg: 40 mL + 2 mL/kg/hr for every kg >10 kg\nFor >20 kg: 60 mL + 1 mL/kg/hr for every kg >20 kg",
        "code": "def calculate_maintenance_fluids(weight):\n    \"\"\"\n    Calculate the Maintenance Fluids rate using the \"4-2-1\" Rule.\n    \n    This function determines the intravenous (IV) fluid rate for patients who are not taking oral fluids,\n    addressing needs such as vomiting, NPO status, dehydration, insensible losses, or third spacing. It uses\n    a weight-based dosing method to ensure appropriate fluid volume according to patient's weight.\n    \n    Parameters:\n    - weight (float): The weight of the patient in kilograms.\n    \n    Returns:\n    - float: The calculated IV fluid rate in mL per hour.\n    \n    Usage:\n    - This calculation is crucial in medical settings where accurate fluid replacement is necessary,\n      particularly in settings where patients cannot intake fluids orally.\n    \n    Example:\n    - calculate_maintenance_fluids(25)  # Calculates fluid rate for a 25 kg patient.\n    \"\"\"\n    \n    if weight <= 10:\n        return 4 * weight\n    elif weight <= 20:\n        return 40 + 2 * (weight - 10)\n    else:\n        return 60 + 1 * (weight - 20)\n",
        "docstring": "Calculate the Maintenance Fluids rate using the \"4-2-1\" Rule.\n    \n    This function determines the intravenous (IV) fluid rate for patients who are not taking oral fluids,\n    addressing needs such as vomiting, NPO status, dehydration, insensible losses, or third spacing. It uses\n    a weight-based dosing method to ensure appropriate fluid volume according to patient's weight.\n    \n    Parameters:\n    - weight (float): The weight of the patient in kilograms.\n    \n    Returns:\n    - float: The calculated IV fluid rate in mL per hour.\n    \n    Usage:\n    - This calculation is crucial in medical settings where accurate fluid replacement is necessary,\n      particularly in settings where patients cannot intake fluids orally.\n    \n    Example:\n    - calculate_maintenance_fluids(25)  # Calculates fluid rate for a 25 kg patient.",
        "next_steps": "ADVICE\nPast, current, and future hydration status should always be considered when prescribing maintenance fluids, as under-dosing will lead to dehydration and renal insufficiency, and over-dosing may lead to fluid overload and edema in some patients."
    },
    {
        "tool_name": "Mean Arterial Pressure (MAP)",
        "function_name": "calculate_mean_arterial_pressure",
        "description": "Mean Arterial Pressure (MAP) is a critical measurement used to assess the average blood pressure in a person's arteries during one cardiac cycle. It is especially important in critical care settings to ensure adequate blood flow to organs and tissues. MAP is commonly used to monitor patients with conditions like sepsis, hypertension, or during surgery to ensure vital organs receive sufficient blood supply.",
        "formula": "Mean Arterial Pressure = 1/3*(SBP) + 2/3*(DBP)",
        "code": "def calculate_mean_arterial_pressure(systolic_bp, diastolic_bp):\n    \"\"\"\n    Calculate the Mean Arterial Pressure (MAP) from the systolic (SBP) and diastolic blood pressure (DBP).\n    \n    MAP is a crucial health metric used to assess tissue perfusion and blood flow. It is particularly important in\n    medical scenarios such as sepsis, trauma, stroke, intracranial bleeding, and hypertensive emergencies.\n    The formula used for calculating MAP is: MAP = 1/3 * SBP + 2/3 * DBP.\n    \n    Parameters:\n        systolic_bp (float): Systolic blood pressure in mmHg.\n        diastolic_bp (float): Diastolic blood pressure in mmHg.\n    \n    Returns:\n        float: The calculated mean arterial pressure in mmHg.\n    \n    Example:\n        >>> calculate_mean_arterial_pressure(120, 80)\n        93.33333333333333\n    \"\"\"\n    return 1/3 * systolic_bp + 2/3 * diastolic_bp\n",
        "docstring": "Calculate the Mean Arterial Pressure (MAP) from the systolic (SBP) and diastolic blood pressure (DBP).\n    \n    MAP is a crucial health metric used to assess tissue perfusion and blood flow. It is particularly important in\n    medical scenarios such as sepsis, trauma, stroke, intracranial bleeding, and hypertensive emergencies.\n    The formula used for calculating MAP is: MAP = 1/3 * SBP + 2/3 * DBP.\n    \n    Parameters:\n        systolic_bp (float): Systolic blood pressure in mmHg.\n        diastolic_bp (float): Diastolic blood pressure in mmHg.\n    \n    Returns:\n        float: The calculated mean arterial pressure in mmHg.\n    \n    Example:\n        >>> calculate_mean_arterial_pressure(120, 80)\n        93.33333333333333",
        "next_steps": "MANAGEMENT\nPatients with a MAP that is under or above set goal values should be treated with fluids, blood products, vasopressors, inotropes, or vasodilators depending on the clinical scenario.\nSpecific blood pressure management and MAP goals will depend on the etiology of the high or low MAP and must be individualized to optimize perfusion and prevent harm.\nCRITICAL ACTIONS\nA MAP ≥60 mmHg is believed to be needed to maintain adequate tissue perfusion.\nA MAP ≥65 mmHg is recommended in patients with severe sepsis and septic shock by the Surviving Sepsis Campaign Guidelines Committee."
    },
    {
        "tool_name": "MDRD GFR Equation",
        "function_name": "calculate_mdrd_gfr",
        "description": "The MDRD (Modification of Diet in Renal Disease) GFR Equation is used to estimate glomerular filtration rate (GFR), reflecting kidney function. It is particularly useful in diagnosing and monitoring chronic kidney disease in adults, aiding in the adjustment of medication dosages and other medical management decisions. This equation is applied in clinical settings where precise kidney function assessment is crucial for patient care.",
        "formula": "GFR = 175 × Serum Cr^{-1.154} × age^{-0.203} × 1.212 (if patient is black) × 0.742 (if female)\nUse serum Cr in mg/dL for this formula.",
        "code": "def calculate_mdrd_gfr(serum_cr, age, race_index, gender_index):\n    \"\"\"\n    Calculate the Modified Diet in Renal Disease (MDRD) Glomerular Filtration Rate (GFR).\n    This function estimates kidney function in patients with stable chronic kidney disease.\n    It should not be used to assess acute renal failure or when GFR is >60 ml/min/m2 as it underestimates GFR.\n\n    Parameters:\n    - serum_cr (float): Serum creatinine (Cr) level in mg/dL. Should be a positive float.\n    - age (int): Age of the patient in years. Should be a non-negative integer.\n    - race_index (int): Index representing the patient's race. 0 for non-black, 1 for black.\n    - gender_index (int): Index representing the patient's gender. 0 for male, 1 for female.\n\n    Returns:\n    - float: Estimated GFR in ml/min/1.73m2.\n\n    The formula used:\n    GFR = 175 × Serum Cr^{-1.154} × age^{-0.203} × 1.212 (if patient is black) × 0.742 (if female)\n    \"\"\"\n    race_multiplier = 1.212 if race_index == 1 else 1\n    gender_multiplier = 0.742 if gender_index == 1 else 1\n\n    gfr = 175 * (serum_cr ** -1.154) * (age ** -0.203) * race_multiplier * gender_multiplier\n    return gfr\n",
        "docstring": "Calculate the Modified Diet in Renal Disease (MDRD) Glomerular Filtration Rate (GFR).\n    This function estimates kidney function in patients with stable chronic kidney disease.\n    It should not be used to assess acute renal failure or when GFR is >60 ml/min/m2 as it underestimates GFR.\n\n    Parameters:\n    - serum_cr (float): Serum creatinine (Cr) level in mg/dL. Should be a positive float.\n    - age (int): Age of the patient in years. Should be a non-negative integer.\n    - race_index (int): Index representing the patient's race. 0 for non-black, 1 for black.\n    - gender_index (int): Index representing the patient's gender. 0 for male, 1 for female.\n\n    Returns:\n    - float: Estimated GFR in ml/min/1.73m2.\n\n    The formula used:\n    GFR = 175 × Serum Cr^{-1.154} × age^{-0.203} × 1.212 (if patient is black) × 0.742 (if female)\n",
        "next_steps": "ADVICE\nPatients with decreased GFR are at higher risk of progressive kidney disease. Management of contributing risk factors, such as diabetes and hypertension, is critical to slowing progression. Investigation of the underlying cause of decreased GFR is warranted if not clear from the history. \nMedications should be dose-adjusted for the most recent available eGFR. In this setting, eGFR and creatinine clearance may be used interchangeably, though they are physiologically different terms. Cutoffs for many medications are <60, <45 and <30 ml/min/m2, as well as adjustments for advanced kidney disease and dialysis patients.\nMANAGEMENT\nPatients should be classified into CKD stage by both eGFR and albuminuria status. Patients with decreased GFR, increased urinary albumin excretion or both, are at high risk of progressive CKD and should be referred to nephrology for further management.\nFrom KDIGO 2012 Clinical Practice Guideline."
    },
    {
        "tool_name": "MELD Na (UNOS/OPTN)",
        "function_name": "calculate_meld_na_unos_optn",
        "description": "The MELD Na (Model for End-Stage Liver Disease Sodium) score, used by the United Network for Organ Sharing (UNOS) and the Organ Procurement and Transplantation Network (OPTN), is a critical tool in prioritizing liver transplant candidates. It incorporates the patient's bilirubin, creatinine, and INR levels, along with sodium levels, to evaluate the urgency of a transplant. This score is primarily used in hospitals and transplant centers to assess the severity of chronic liver disease and allocate liver transplants more effectively.",
        "formula": "Per OPTN policy, January 2016 (pages 4–5):\nCandidates who are at least 12 years old receive an initial MELD(i) score equal to:\nMELD(i) = 0.957 × ln(Cr) + 0.378 × ln(bilirubin) + 1.120 × ln(INR) + 0.643\nThen, round to the tenth decimal place and multiply by 10. \nIf MELD(i) > 11, perform additional MELD calculation as follows:\nMELD = MELD(i) + 1.32 × (137 – Na) –  [ 0.033 × MELD(i) × (137 – Na) ]\nAdditional rules:\nAll values in US units (Cr and bilirubin in mg/dL, Na in mEq/L, and INR unitless).\nIf bilirubin, Cr, or INR is <1.0, use 1.0.\nIf any of the following is true, use Cr 4.0:\n   Cr >4.0.\n  ≥2 dialysis treatments within the prior 7 days.\n   24 hours of continuous veno-venous hemodialysis (CVVHD) within the prior 7 days.\nIf Na <125 mEq/L, use 125. If Na >137 mEq/L, use 137.\nMaximum MELD = 40.",
        "code": "import math\n\ndef calculate_meld_na_unos_optn(creatinine, bilirubin, inr, sodium, dialysis_treatments=0, cvvhd_hours=0):\n    \"\"\"\n    Calculate the MELD Na (UNOS/OPTN) score used to stratify patients ≥12 years old for liver transplant waitlists and predict mortality.\n    The MELD Na score incorporates serum creatinine, bilirubin, INR, and sodium levels to determine the severity of liver dysfunction and predict three-month survival.\n\n    Parameters:\n    - creatinine (float): Serum creatinine in mg/dL. Minimum value used is 1.0. If patient's creatinine >4.0 or they received ≥2 dialysis treatments in the last 7 days or 24 hours of CVVHD, use 4.0.\n    - bilirubin (float): Serum bilirubin in mg/dL. Minimum value used is 1.0.\n    - inr (float): International Normalized Ratio (INR), unitless. Minimum value used is 1.0.\n    - sodium (float): Serum sodium in mEq/L. Adjusted to be within the range of 125 to 137 mEq/L.\n    - dialysis_treatments (int): Number of dialysis treatments in the last 7 days. Default is 0.\n    - cvvhd_hours (int): Hours of continuous veno-venous hemodialysis (CVVHD) within the last 7 days. Default is 0.\n\n    Returns:\n    - meld_score (float): The calculated MELD Na score, capped at a maximum of 40.\n    \"\"\"\n    # Adjust inputs based on given rules\n    if creatinine > 4.0 or dialysis_treatments >= 2 or cvvhd_hours >= 24:\n        creatinine = 4.0\n    creatinine = max(creatinine, 1.0)\n    bilirubin = max(bilirubin, 1.0)\n    inr = max(inr, 1.0)\n    sodium = max(min(sodium, 137), 125)\n\n    # Calculate initial MELD score\n    meld_i = 0.957 * math.log(creatinine) + 0.378 * math.log(bilirubin) + 1.120 * math.log(inr) + 0.643\n    meld_i = round(meld_i * 10, 1)\n\n    # Apply sodium adjustment if MELD(i) is greater than 11\n    if meld_i > 11:\n        meld_score = meld_i + 1.32 * (137 - sodium) - 0.033 * meld_i * (137 - sodium)\n    else:\n        meld_score = meld_i\n\n    # Cap the MELD score at 40\n    meld_score = min(meld_score, 40)\n\n    return meld_score\n",
        "docstring": "Calculate the MELD Na (UNOS/OPTN) score used to stratify patients ≥12 years old for liver transplant waitlists and predict mortality.\n    The MELD Na score incorporates serum creatinine, bilirubin, INR, and sodium levels to determine the severity of liver dysfunction and predict three-month survival.\n\n    Parameters:\n    - creatinine (float): Serum creatinine in mg/dL. Minimum value used is 1.0. If patient's creatinine >4.0 or they received ≥2 dialysis treatments in the last 7 days or 24 hours of CVVHD, use 4.0.\n    - bilirubin (float): Serum bilirubin in mg/dL. Minimum value used is 1.0.\n    - inr (float): International Normalized Ratio (INR), unitless. Minimum value used is 1.0.\n    - sodium (float): Serum sodium in mEq/L. Adjusted to be within the range of 125 to 137 mEq/L.\n    - dialysis_treatments (int): Number of dialysis treatments in the last 7 days. Default is 0.\n    - cvvhd_hours (int): Hours of continuous veno-venous hemodialysis (CVVHD) within the last 7 days. Default is 0.\n\n    Returns:\n    - meld_score (float): The calculated MELD Na score, capped at a maximum of 40.\n",
        "next_steps": "ADVICE\nConsider referral to hepatologist or liver transplant center for patients with MELD Score ≥10.\nMELD Score should be periodically re-assessed, as it changes with changing lab values.\nAll cirrhosis patients should be periodically screened for hepatocellular carcinoma with serum alpha-fetoprotein (AFP) and by appropriate imaging to see if they can earn “standard MELD exceptions”.\nCRITICAL ACTIONS\nStandard MELD Exceptions\nThe following conditions are automatically assigned a MELD Score of 22 (28 in case of hyperoxaluria), with a 10% increase in score every 3 months from diagnosis.\nHepatocellular carcinoma (HCC) with one lesion between 2 - 5 cm or two to three lesions <3 cm (Milan criteria), provided no vascular invasion or extrahepatic disease.\nHepatopulmonary syndrome with PaO2 <60 mmHg on room air.\nPortopulmonary hypertension, with mean pulmonary artery pressure (mPAP) >25 mmHg at rest but maintained <35 mmHg with treatment.\nHepatic artery thrombosis 7–14 days post-liver transplantation.\nFamilial amyloid polyneuropathy, as diagnosed by identification of the transthyretin (TTR) gene mutation by DNA analysis or mass spectrometry in a biopsy sample and confirmation of amyloid deposition in an involved organ.\nPrimary hyperoxaluria with evidence of alanine glyoxylate aminotransferase deficiency (these patients requires combined liver-kidney transplantation).\nCystic fibrosis with FEV1 (forced expiratory volume in 1 second) <40%.\nHilar cholangiocarcinoma."
    },
    {
        "tool_name": "CHA2DS2-VASc Score for Atrial Fibrillation Stroke Risk",
        "function_name": "calculate_cha2ds2_vasc_score",
        "description": "The CHA2DS2-VASc Score is a clinical tool used to estimate the risk of stroke in patients with atrial fibrillation. It assesses factors like congestive heart failure, hypertension, age, diabetes, stroke history, vascular disease, and sex category to calculate a score that guides anticoagulation therapy decisions. This score is commonly used in clinical settings to determine the need for initiating or adjusting anticoagulant medications to prevent stroke in these patients.",
        "formula": "Addition of the selected points:\nCriteria\nPoints\nAge\n<65 years old\n0\n65-74 years old\n+1\n≥75 years old\n+2\nSex\nMale\n0\nFemale\n+1\nCongestive heart failure history\nNo\n0\nYes\n+1\nHypertension history\nNo\n0\nYes\n+1\nStroke/TIA/thromboembolism history\nNo\n0\nYes\n+2\nVascular disease history (prior MI, peripheral artery disease, or aortic plaque)\nNo\n0\nYes\n+1\nDiabetes mellitus history\nNo\n0\nYes\n+1",
        "code": "def calculate_cha2ds2_vasc_score(age, sex, history_of_congestive_heart_failure, history_of_hypertension, history_of_stroke_tia_thromboembolism, history_of_vascular_disease, history_of_diabetes):\n    \"\"\"\n    Calculate the CHA2DS2-VASc Score for Atrial Fibrillation Stroke Risk.\n\n    The CHA2DS2-VASc score is a clinical prediction rule for estimating the risk of stroke in\n    patients with non-valvular atrial fibrillation. It is used to determine whether treatment with\n    anticoagulation or antiplatelet therapy is appropriate, based on the risk of thromboembolism.\n\n    Parameters:\n    - age (int): Age of the patient.\n    - sex (str): Biological sex of the patient, 'male' or 'female'.\n    - history_of_congestive_heart_failure (bool): True if the patient has a history of congestive heart failure, otherwise False.\n    - history_of_hypertension (bool): True if the patient has a history of hypertension, otherwise False.\n    - history_of_stroke_tia_thromboembolism (bool): True if the patient has a history of stroke, transient ischemic attack (TIA), or thromboembolism, otherwise False.\n    - history_of_vascular_disease (bool): True if the patient has a history of vascular disease (prior myocardial infarction, peripheral artery disease, or aortic plaque), otherwise False.\n    - history_of_diabetes (bool): True if the patient has a history of diabetes mellitus, otherwise False.\n\n    Returns:\n    - int: The total CHA2DS2-VASc score which is a sum of the points for each risk factor.\n\n    Example:\n    >>> calculate_cha2ds2_vasc_score(75, 'female', True, True, True, True, True)\n    9\n    \"\"\"\n    score = 0\n    # Age points\n    if age < 65:\n        score += 0\n    elif 65 <= age <= 74:\n        score += 1\n    else:  # age >= 75\n        score += 2\n\n    # Sex points\n    if sex.lower() == 'female':\n        score += 1\n\n    # History of congestive heart failure\n    if history_of_congestive_heart_failure:\n        score += 1\n\n    # History of hypertension\n    if history_of_hypertension:\n        score += 1\n\n    # History of stroke, TIA, or thromboembolism\n    if history_of_stroke_tia_thromboembolism:\n        score += 2\n\n    # History of vascular disease\n    if history_of_vascular_disease:\n        score += 1\n\n    # History of diabetes\n    if history_of_diabetes:\n        score += 1\n\n    return score\n",
        "docstring": "Calculate the CHA2DS2-VASc Score for Atrial Fibrillation Stroke Risk.\n\n    The CHA2DS2-VASc score is a clinical prediction rule for estimating the risk of stroke in\n    patients with non-valvular atrial fibrillation. It is used to determine whether treatment with\n    anticoagulation or antiplatelet therapy is appropriate, based on the risk of thromboembolism.\n\n    Parameters:\n    - age (int): Age of the patient.\n    - sex (str): Biological sex of the patient, 'male' or 'female'.\n    - history_of_congestive_heart_failure (bool): True if the patient has a history of congestive heart failure, otherwise False.\n    - history_of_hypertension (bool): True if the patient has a history of hypertension, otherwise False.\n    - history_of_stroke_tia_thromboembolism (bool): True if the patient has a history of stroke, transient ischemic attack (TIA), or thromboembolism, otherwise False.\n    - history_of_vascular_disease (bool): True if the patient has a history of vascular disease (prior myocardial infarction, peripheral artery disease, or aortic plaque), otherwise False.\n    - history_of_diabetes (bool): True if the patient has a history of diabetes mellitus, otherwise False.\n\n    Returns:\n    - int: The total CHA2DS2-VASc score which is a sum of the points for each risk factor.\n\n    Example:\n    >>> calculate_cha2ds2_vasc_score(75, 'female', True, True, True, True, True)\n    9",
        "next_steps": "CRITICAL ACTIONS\nRecent guidelines emphasize the strong evidence of benefit with anticoagulation, and the lack of benefit from antiplatelet treatment. Most guidelines suggest that scores of 0 (men) or 1 (women) do not require treatment; however, all other patients should receive anticoagulation, preferably with a direct oral anticoagulant (unless contraindicated).\nAnticoagulation is not recommended in patients with non-valvular AF and a CHA2DS2-VASc score of 0 if male or 1 if female, as these patients had no TE events in the original study.\nDepending on a patient’s preferences and individual risk factors, anticoagulation can be considered for a CHA2DS2-VASc score of 1 in males and 2 in females\nAnticoagulation should be started in patients with a CHA2DS2-VASc score of ≥2 if male or ≥3 if female\nFor those patients in whom anticoagulation is considered, risk bleeding scores such as ATRIA can be used to determine the risk for warfarin-associated hemorrhage; however, these should usually be used as a reminder to regularly address reversible risk factors for bleeding, as the risk-benefit ratio of anticoagulation usually remains favorable.\nCarefully consider all the risks and benefits prior to initiating anticoagulation in patients with non-valvular AF.\nAspirin monotherapy is not supported by current evidence."
    },
    {
        "tool_name": "HAS-BLED Score for Major Bleeding Risk",
        "function_name": "calculate_has_bled_score",
        "description": "The HAS-BLED score is a clinical tool used to assess the risk of major bleeding in patients with atrial fibrillation who are on anticoagulation therapy. It evaluates various risk factors, including hypertension, abnormal renal/liver function, stroke history, bleeding history or predisposition, labile INR, elderly age, drugs, or alcohol use. This score helps clinicians decide whether the benefits of anticoagulation outweigh the risks and guide adjustments in therapy.",
        "formula": "Addition of the selected points:\nVariable\nPoints\nHypertension\nNo ,get 0 point\nYes, get 1 point\nRenal disease (dialysis, transplant, Cr >2.26 mg/dL or 200 µmol/L)\nNo ,get 0 point\nYes, get 1 point\nLiver disease (cirrhosis or bilirubin >2x normal with AST/ALT/AP >3x normal)\nNo ,get 0 point\nYes, get 1 point\nStroke history\nNo ,get 0 point\nYes, get 1 point\nPrior major bleeding or predisposition to bleeding\nNo ,get 0 point\nYes, get 1 point\nLabile INR (unstable/high INRs, time in therapeutic range <60%)\nNo ,get 0 point\nYes, get 1 point\nElderly (age >65)\nNo ,get 0 point\nYes, get 1 point\nMedication usage predisposing to bleeding (aspirin, clopidogrel, NSAIDs)\nNo ,get 0 point\nYes, get 1 point\nAlcohol usage (≥8 drinks/week)\nNo ,get 0 point\nYes, get 1 point\nNote: HAS-BLED is an acronym for Hypertension, Abnormal liver/renal function, Stroke history, Bleeding predisposition, Labile INR, Elderly, Drug/alcohol usage.",
        "code": "def calculate_has_bled_score(hypertension, renal_disease, liver_disease, stroke_history, major_bleeding_history, labile_inr, elderly, medication_risk, alcohol_usage):\n    \"\"\"\n    Calculate the HAS-BLED Score for Major Bleeding Risk in patients with atrial fibrillation.\n    \n    The HAS-BLED Score is used to estimate the 1-year risk for major bleeding and helps guide decisions regarding anticoagulation therapy.\n    This scoring system can be considered alongside other bleeding risk scores or thromboembolic risk assessments to weigh the benefits and risks of anticoagulation.\n\n    Parameters:\n    hypertension (bool): True if the patient has hypertension, False otherwise.\n    renal_disease (bool): True if the patient has renal disease (dialysis, transplant, or Cr >2.26 mg/dL), False otherwise.\n    liver_disease (bool): True if the patient has liver disease (cirrhosis or bilirubin >2x normal with AST/ALT/AP >3x normal), False otherwise.\n    stroke_history (bool): True if the patient has a history of stroke, False otherwise.\n    major_bleeding_history (bool): True if the patient has had prior major bleeding or predisposition to bleeding, False otherwise.\n    labile_inr (bool): True if the patient has labile INR (unstable/high INRs, time in therapeutic range <60%), False otherwise.\n    elderly (bool): True if the patient is elderly (age >65), False otherwise.\n    medication_risk (bool): True if the patient uses medication that predisposes to bleeding (aspirin, clopidogrel, NSAIDs), False otherwise.\n    alcohol_usage (bool): True if the patient consumes alcohol significantly (≥8 drinks/week), False otherwise.\n\n    Returns:\n    int: The total HAS-BLED score, which is a sum of all applicable risk factors.\n\n    Example:\n    >>> calculate_has_bled_score(True, False, False, True, False, True, True, False, True)\n    5\n    \"\"\"\n    score = sum([\n        hypertension,\n        renal_disease,\n        liver_disease,\n        stroke_history,\n        major_bleeding_history,\n        labile_inr,\n        elderly,\n        medication_risk,\n        alcohol_usage\n    ])\n    return score\n",
        "docstring": "Calculate the HAS-BLED Score for Major Bleeding Risk in patients with atrial fibrillation.\n    \n    The HAS-BLED Score is used to estimate the 1-year risk for major bleeding and helps guide decisions regarding anticoagulation therapy.\n    This scoring system can be considered alongside other bleeding risk scores or thromboembolic risk assessments to weigh the benefits and risks of anticoagulation.\n\n    Parameters:\n    hypertension (bool): True if the patient has hypertension, False otherwise.\n    renal_disease (bool): True if the patient has renal disease (dialysis, transplant, or Cr >2.26 mg/dL), False otherwise.\n    liver_disease (bool): True if the patient has liver disease (cirrhosis or bilirubin >2x normal with AST/ALT/AP >3x normal), False otherwise.\n    stroke_history (bool): True if the patient has a history of stroke, False otherwise.\n    major_bleeding_history (bool): True if the patient has had prior major bleeding or predisposition to bleeding, False otherwise.\n    labile_inr (bool): True if the patient has labile INR (unstable/high INRs, time in therapeutic range <60%), False otherwise.\n    elderly (bool): True if the patient is elderly (age >65), False otherwise.\n    medication_risk (bool): True if the patient uses medication that predisposes to bleeding (aspirin, clopidogrel, NSAIDs), False otherwise.\n    alcohol_usage (bool): True if the patient consumes alcohol significantly (≥8 drinks/week), False otherwise.\n\n    Returns:\n    int: The total HAS-BLED score, which is a sum of all applicable risk factors.\n\n    Example:\n    >>> calculate_has_bled_score(True, False, False, True, False, True, True, False, True)\n    5",
        "next_steps": "CRITICAL ACTIONS\nPatient specific risks and benefits of anticoagulation must be carefully weighed in all patients who are potential candidates for long-term anticoagulation therapy."
    },
    {
        "tool_name": "Serum Osmolality/Osmolarity",
        "function_name": "calculate_serum_osmolality",
        "description": "Serum osmolality or osmolarity measures the concentration of solutes in the blood, providing insights into the body's water balance and solute concentration. It is commonly used in medical settings to assess hydration status, diagnose and manage conditions like diabetes insipidus, hyponatremia, or hypernatremia. This test helps guide treatment decisions, especially in patients presenting with altered mental status or electrolyte imbalances.",
        "formula": "Smithline-Gardner Formula: (Serum Osm, mOsm/kg)= 2*(Na,mmol/L)+(Glucose, mg/dL)/ 18 + (BUN, mg/dL)/ 2.8",
        "code": "def calculate_serum_osmolality(serum_na, serum_glucose, serum_bun):\n    \"\"\"\n    Calculate the Serum Osmolality/Osmolarity using the Smithline-Gardner Formula.\n\n    This function calculates the serum osmolality/osmolarity based on the concentrations of sodium, glucose,\n    and blood urea nitrogen (BUN) in the blood. Serum osmolality is a measure of the solute concentration in the blood,\n    and it can be used to assess the body's fluid and electrolyte balance. An osmolar gap (difference between measured\n    and expected osmolality) greater than 10 can indicate the presence of certain toxic alcohols, mannitol, or propylene glycol.\n\n    Note: At extreme levels of serum glucose, such as in hyperosmolar hyperglycemic state (HHS), the osmolar gap may be skewed,\n    and clinical judgment should be used.\n\n    Parameters:\n    serum_na (float): Serum sodium concentration in mmol/L. Typical reference range is 135-145 mmol/L.\n    serum_glucose (float): Serum glucose concentration in mg/dL. Typical reference range is 70-100 mg/dL.\n    serum_bun (float): Blood urea nitrogen concentration in mg/dL. Typical reference range is 7-20 mg/dL.\n\n    Returns:\n    float: Calculated serum osmolality in mOsm/kg.\n\n    Formula:\n    Serum Osmolality (mOsm/kg) = 2 * (serum_na) + (serum_glucose / 18) + (serum_bun / 2.8)\n    \"\"\"\n\n    # Validate the input parameters\n    if not isinstance(serum_na, (int, float)) or serum_na <= 0:\n        raise ValueError(\"serum_na must be a positive number representing serum sodium concentration in mmol/L.\")\n    if not isinstance(serum_glucose, (int, float)) or serum_glucose < 0:\n        raise ValueError(\"serum_glucose must be a non-negative number representing serum glucose concentration in mg/dL.\")\n    if not isinstance(serum_bun, (int, float)) or serum_bun < 0:\n        raise ValueError(\"serum_bun must be a non-negative number representing blood urea nitrogen concentration in mg/dL.\")\n\n    # Calculate serum osmolality using the Smithline-Gardner Formula\n    serum_osmolality = 2 * serum_na + (serum_glucose / 18) + (serum_bun / 2.8)\n\n    return serum_osmolality\n",
        "docstring": "Calculate the Serum Osmolality/Osmolarity using the Smithline-Gardner Formula.\n\n    This function calculates the serum osmolality/osmolarity based on the concentrations of sodium, glucose,\n    and blood urea nitrogen (BUN) in the blood. Serum osmolality is a measure of the solute concentration in the blood,\n    and it can be used to assess the body's fluid and electrolyte balance. An osmolar gap (difference between measured\n    and expected osmolality) greater than 10 can indicate the presence of certain toxic alcohols, mannitol, or propylene glycol.\n\n    Note: At extreme levels of serum glucose, such as in hyperosmolar hyperglycemic state (HHS), the osmolar gap may be skewed,\n    and clinical judgment should be used.\n\n    Parameters:\n    serum_na (float): Serum sodium concentration in mmol/L. Typical reference range is 135-145 mmol/L.\n    serum_glucose (float): Serum glucose concentration in mg/dL. Typical reference range is 70-100 mg/dL.\n    serum_bun (float): Blood urea nitrogen concentration in mg/dL. Typical reference range is 7-20 mg/dL.\n\n    Returns:\n    float: Calculated serum osmolality in mOsm/kg.\n\n    Formula:\n    Serum Osmolality (mOsm/kg) = 2 * (serum_na) + (serum_glucose / 18) + (serum_bun / 2.8)\n",
        "next_steps": "ADVICE\nMethanol and ethylene glycol ingestions are treated by blocking alcohol dehydrogenase with fomepizol or ethanol, and often sodium bicarb if severely acidotic."
    }
]