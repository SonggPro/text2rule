{"task_index": 2, "task_description": "calculator name is：Creatinine Clearance (Cockcroft-Gault Equation),\nquestion is:What is the patient's Creatinine Clearance using the Cockroft-Gault Equation in terms of mL/min? You should use the patient's adjusted body weight in kg instead of the patient's actual body weight if the patient is overweight or obese based on their BMI. If the patient's BMI's normal, set their adjusted body weight to the minimum of the ideal body and actual weight. If the patient is underweight, please set their adjusted body weight to their actual body weight..", "python_code": "def calculate_creatinine_clearance(age: float, height: float, actual_weight: float, serum_creatinine: float, gender: str) -> float:\n    # Calculate Ideal Body Weight (IBW)\n    if gender.lower() == 'male':\n        ibw = 50 + 2.3 * (height - 60)\n    else:\n        ibw = 45.5 + 2.3 * (height - 60)\n\n    # Determine Adjusted Body Weight (ABW)\n    bmi = actual_weight / ((height * 0.0254) ** 2)  # kg/m^2\n    if bmi < 18.5:  # Underweight\n        abw = actual_weight\n    elif 18.5 <= bmi < 24.9:  # Normal weight\n        abw = min(ibw, actual_weight)\n    else:  # Overweight or Obese\n        abw = actual_weight  # For simplicity, ABW would be calculated as per specific overweight/obese formula if given\n\n    # Calculate Creatinine Clearance (CrCl)\n    if gender.lower() == 'female':\n        crcl = (140 - age) * abw / (72 * serum_creatinine) * 0.85\n    else:\n        crcl = (140 - age) * abw / (72 * serum_creatinine)\n\n    return crcl", "properties": {"row": "properties = {\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"actual_weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's actual body weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's actual body weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"serum_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Serum creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender, returns 'male' or 'female'\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"age": "years", "height": "inches", "actual_weight": "kg", "serum_creatinine": "mg/dL"}}
{"task_index": 3, "task_description": "calculator name is:CKD-EPI Equations for Glomerular Filtration Rate,\nquestion is:Using the 2021 CKD-EPI Creatinine equation, what is the patient's Glomerular Filtration Rate (GFR) in terms of mL/min/1.73 m²?.\nstrictly use the formula to solve the question:\ndef ckd_epi_2021_gfr(scr_umol_l, age, gender):\n    scr = scr_umol_l / 88.4  # μmol/L 转 mg/dL\n    if gender.lower() == \"male\":\n        kappa = 0.9\n        alpha = -0.302\n        sex_factor = 1\n    else:\n        kappa = 0.7\n        alpha = -0.241\n        sex_factor = 1.012\n\n    scr_kappa = scr / kappa\n    min_scr_kappa = min(scr_kappa, 1)\n    max_scr_kappa = max(scr_kappa, 1)\n\n    egfr = 142 * (min_scr_kappa ** alpha)               * (max_scr_kappa ** -1.200)               * (0.9938 ** age)               * sex_factor\n    return egfr", "python_code": "def ckd_epi_2021_gfr(scr_umol_l, age, gender):\n    scr = scr_umol_l / 88.4  # μmol/L to mg/dL\n    if gender.lower() == \"male\":\n        kappa = 0.9\n        alpha = -0.302\n        sex_factor = 1\n    else:\n        kappa = 0.7\n        alpha = -0.241\n        sex_factor = 1.012\n\n    scr_kappa = scr / kappa\n    min_scr_kappa = min(scr_kappa, 1)\n    max_scr_kappa = max(scr_kappa, 1)\n\n    egfr = 142 * (min_scr_kappa ** alpha) * (max_scr_kappa ** -1.200) * (0.9938 ** age) * sex_factor\n    return egfr", "properties": {"row": "properties = {\n    \"scr_umol_l\": {\n        \"type\": \"array\",\n        \"description\": \"Serum creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender (returns 'male' or 'female')\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"scr_umol_l": "μmol/L", "age": "years"}},
{"task_index": 5, "task_description": "calculator name is：Mean Arterial Pressure (MAP),\nquestion is:What is patient's mean arterial pressure in mm Hg?.", "python_code": "def calculate_map(sbp: float, dbp: float) -> float:\n    # Calculate Mean Arterial Pressure (MAP)\n    map_value = dbp + (1 / 3) * (sbp - dbp)\n    return map_value", "properties": {"row": "properties = {\n    \"sbp\": {\n        \"type\": \"array\",\n        \"description\": \"Systolic Blood Pressure\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Systolic Blood Pressure\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"dbp\": {\n        \"type\": \"array\",\n        \"description\": \"Diastolic Blood Pressure\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Diastolic Blood Pressure\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"sbp": "mm Hg", "dbp": "mm Hg"}}
{"task_index": 6, "task_description": "calculator name is：Body Mass Index (BMI),\nquestion is:What is the patient's body mass mass index (BMI)? Your answer should be in terms of kg/m²..", "python_code": "def calculate_bmi(weight: float, height: float) -> float:\n    # Calculate Body Mass Index (BMI)\n    bmi = weight / (height ** 2)\n    return bmi", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"weight": "kg", "height": "meters"}}
{"task_index": 7, "task_description": "calculator name is：Calcium Correction for Hypoalbuminemia,\nquestion is:Using the Calcium Correction for Hypoalbuminemia formula, what is the patient's corrected calcium in mg/dL? Your may set your normal albumin concentration to be 4 g/dL..", "python_code": "def calculate_corrected_calcium(measured_calcium: float, albumin: float) -> float:\n    # Calculate Corrected Calcium for Hypoalbuminemia\n    corrected_calcium = measured_calcium + 0.8 * (4 - albumin)\n    return corrected_calcium", "properties": {"row": "properties = {\n    \"measured_calcium\": {\n        \"type\": \"array\",\n        \"description\": \"The patient's measured total calcium level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"The patient's measured total calcium level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Serum albumin concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum albumin concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"measured_calcium": "mg/dL", "albumin": "g/dL"}}
{"task_index": 8, "task_description": "calculator name is：Wells' Criteria for Pulmonary Embolism,\nquestion is:What is the patient’s score of Wells' criteria for Pulmonary Embolism?.", "python_code": "def calculate_wells_score(dvt_symptoms: bool, alternative_diagnosis_less_likely: bool, heart_rate_above_100: bool,\n                           immobilization_surgery: bool, history_dvt_pe: bool, hemoptysis: bool, malignancy: bool) -> float:\n    # Assign points based on Wells' Criteria\n    score = 0\n    \n    if dvt_symptoms:\n        score += 3\n    if alternative_diagnosis_less_likely:\n        score += 3\n    if heart_rate_above_100:\n        score += 1.5\n    if immobilization_surgery:\n        score += 1.5\n    if history_dvt_pe:\n        score += 1.5\n    if hemoptysis:\n        score += 1\n    if malignancy:\n        score += 1\n    \n    return score", "properties": {"row": "properties = {\n    \"dvt_symptoms\": {\n        \"description\": \"Clinical signs and symptoms of DVT (True for presence, False for absence)\",\n        \"type\": \"boolean\"\n    },\n    \"alternative_diagnosis_less_likely\": {\n        \"description\": \"Alternative diagnosis is less likely than PE (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    },\n    \"heart_rate_above_100\": {\n        \"description\": \"Heart rate > 100 bpm (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    },\n    \"immobilization_surgery\": {\n        \"description\": \"Immobilization for more than 3 days or surgery in the previous 4 weeks (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    },\n    \"history_dvt_pe\": {\n        \"description\": \"History of DVT or PE (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    },\n    \"hemoptysis\": {\n        \"description\": \"Hemoptysis present (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    },\n    \"malignancy\": {\n        \"description\": \"Active malignancy treatment within 6 months or palliative treatment present (True for yes, False for no)\",\n        \"type\": \"boolean\"\n    }\n}"}, "need_unit": {}}
{"task_index": 9, "task_description": "calculator name is：MDRD GFR Equation,\nquestion is:Using the MDRD GFR equation, what is the patient's Glomerular Filtration Rate (GFR) in terms of mL/min/1.73 m²?.", "python_code": "def calculate_mdrd_gfr(scr: float, age: float, gender: str, race: str) -> float:\n    # Set the coefficient based on gender\n    if gender.lower() == 'female':\n        gender_factor = 0.742\n    else:\n        gender_factor = 1.0  # No adjustment for males\n\n    # Set the coefficient based on race\n    if race.lower() == 'black':\n        race_factor = 1.212\n    else:\n        race_factor = 1.0  # No adjustment for non-black\n\n    # Calculate GFR using the MDRD formula\n    gfr = 175 * (scr ** -1.154) * (age ** -0.203) * gender_factor * race_factor\n    return gfr", "properties": {"row": "properties = {\n    \"scr\": {\n        \"type\": \"array\",\n        \"description\": \"Serum creatinine level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum creatinine level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender, returns 'male' or 'female'\",\n        \"type\": \"string\"\n    },\n    \"race\": {\n        \"description\": \"Patient's race, returns 'black' or 'non-black'\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"scr": "mg/dL", "age": "years"}}
{"task_index": 10, "task_description": "calculator name is：Ideal Body Weight,\nquestion is:Using the Ideal Body Weight Formula, what is the patient's ideal body weight in terms of kg?.", "python_code": "def calculate_ideal_body_weight(height: float, gender: str) -> float:\n    # Calculate Ideal Body Weight based on height and gender\n    if gender.lower() == 'male':\n        ibw = 50 + 2.3 * (height - 60)\n    else:  # Assume female if not male\n        ibw = 45.5 + 2.3 * (height - 60)\n    \n    return ibw", "properties": {"row": "properties = {\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender, returns 'male' or 'female'\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"height": "inches"}}
{"task_index": 11, "task_description": "calculator name is：QTc Bazett Calculator,\nquestion is:Using the Bazett Formula for corrected QT interval, what is the patient's corrected QT interval in msec?.", "python_code": "def calculate_qtc_bazett(qt: float, rr: float) -> float:\n    # Convert RR to seconds if given in milliseconds\n    if rr > 3:  # Assuming rr is in seconds, values greater than 3 seconds are abnormal\n        rr_seconds = rr / 1000  # Convert from milliseconds\n    else:\n        rr_seconds = rr  # Already in seconds\n\n    # Calculate the corrected QT interval (QTc) using the Bazett formula\n    qtc = qt / (rr_seconds ** 0.5)\n    return qtc", "properties": {"row": "properties = {\n    \"qt\": {\n        \"type\": \"array\",\n        \"description\": \"Measured QT interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Measured QT interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"rr\": {\n        \"type\": \"array\",\n        \"description\": \"RR interval\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"RR interval\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt": "milliseconds", "rr": "seconds (or milliseconds"}}
{"task_index": 19, "task_description": "calculator name is：Fibrosis-4 (FIB-4) Index for Liver Fibrosis,\nquestion is:What is the patient's Fibrosis-4 (FIB-4) index?.", "python_code": "def calculate_fib4_index(age: float, ast: float, alt: float, platelets: float) -> float:\n    # Calculate the Fibrosis-4 (FIB-4) index for liver fibrosis\n    fib4_index = (age * ast) / (platelets * (alt ** 0.5))\n    return fib4_index", "properties": {"row": "properties = {\n    \"age\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's age\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's age\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"ast\": {\n        \"type\": \"array\",\n        \"description\": \"Aspartate aminotransferase level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Aspartate aminotransferase level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"alt\": {\n        \"type\": \"array\",\n        \"description\": \"Alanine aminotransferase level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Alanine aminotransferase level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"platelets\": {\n        \"type\": \"array\",\n        \"description\": \"Platelet count\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Platelet count\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"age": "years", "ast": "U/L", "alt": "U/L", "platelets": "thousands/mm³"}}
{"task_index": 22, "task_description": "calculator name is：Maintenance Fluids Calculations,\nquestion is:Based on the patient's weight, what is the patient's maintenance fluid in mL/hr?.", "python_code": "def calculate_maintenance_fluid(weight: float) -> float:\n    # Calculate maintenance fluid requirement based on weight\n    if weight <= 10:\n        maintenance = 4 * weight\n    elif weight <= 20:\n        maintenance = 40 + 2 * (weight - 10)\n    else:  # weight > 20\n        maintenance = 40 + 20 + (weight - 20)\n\n    return maintenance", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"weight": "kg"}}
{"task_index": 26, "task_description": "calculator name is：Sodium Correction for Hyperglycemia,\nquestion is:What is the patient's corrected sodium concentration in terms of mEq/L?.", "python_code": "def calculate_corrected_sodium(measured_sodium: float, glucose: float) -> float:\n    # Calculate the corrected sodium concentration for hyperglycemia\n    corrected_sodium = measured_sodium + (0.024 * glucose) - (0.012 * (glucose ** 2))\n    return corrected_sodium", "properties": {"row": "properties = {\n    \"measured_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"The patient's measured sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"The patient's measured sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"glucose\": {\n        \"type\": \"array\",\n        \"description\": \"Serum glucose concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum glucose concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"measured_sodium": "mEq/L", "glucose": "mg/dL"}}
{"task_index": 30, "task_description": "calculator name is：Serum Osmolality,\nquestion is:What is the patient's serum osmolality in terms of mOsm/kg?.", "python_code": "def calculate_serum_osmolality(na: float, glucose: float, bun: float) -> float:\n    # Calculate the serum osmolality using the provided formula\n    serum_osmolality = (2 * na) + (glucose / 18) + (bun / 2.8)\n    return serum_osmolality", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"glucose\": {\n        \"type\": \"array\",\n        \"description\": \"Serum glucose concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum glucose concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bun\": {\n        \"type\": \"array\",\n        \"description\": \"Blood urea nitrogen concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Blood urea nitrogen concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "glucose": "mg/dL", "bun": "mg/dL"}}
{"task_index": 31, "task_description": "calculator name is：HOMA-IR (Homeostatic Model Assessment for Insulin Resistance),\nquestion is:What is the patient's HOMA-IR score?.", "python_code": "def calculate_homa_ir(fasting_insulin: float, fasting_glucose: float) -> float:\n    # Calculate the HOMA-IR score using the provided formula\n    homa_ir = (fasting_insulin * fasting_glucose) / 405\n    return homa_ir", "properties": {"row": "properties = {\n    \"fasting_insulin\": {\n        \"type\": \"array\",\n        \"description\": \"Fasting insulin level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Fasting insulin level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"fasting_glucose\": {\n        \"type\": \"array\",\n        \"description\": \"Fasting glucose level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Fasting glucose level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"fasting_insulin": "µU/mL", "fasting_glucose": "mg/dL"}}
{"task_index": 38, "task_description": "calculator name is：Free Water Deficit,\nquestion is:What is the patient's free water deficit in terms of liters? You may take the ideal sodium concentration to be 140 mEq/L..", "python_code": "def calculate_free_water_deficit(measured_sodium: float, body_weight: float) -> float:\n    # Ideal Sodium concentration\n    ideal_sodium = 140  # mEq/L\n    \n    # Calculate Free Water Deficit (FWD)\n    fwd = ((measured_sodium - ideal_sodium) * body_weight * 0.6) / ideal_sodium\n    return fwd", "properties": {"row": "properties = {\n    \"measured_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Actual sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Actual sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"body_weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"measured_sodium": "mEq/L", "body_weight": "kg"}}
{"task_index": 39, "task_description": "calculator name is：Anion Gap,\nquestion is:What is the patient's anion gap in terms of mEq/L?.", "python_code": "def calculate_anion_gap(na: float, cl: float, hco3: float) -> float:\n    # Calculate the anion gap using the provided formula\n    anion_gap = na - (cl + hco3)\n    return anion_gap", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L"}}
{"task_index": 40, "task_description": "calculator name is：Fractional Excretion of Sodium (FENa),\nquestion is:What is the patient's Fractional Excretion of Sodium (FENa)? Please return your answer as a percentage value..", "python_code": "def calculate_fena(urine_sodium: float, plasma_creatinine: float, plasma_sodium: float, urine_creatinine: float) -> float:\n    # Calculate the Fractional Excretion of Sodium (FENa)\n    fena = (urine_sodium * plasma_creatinine) / (plasma_sodium * urine_creatinine) * 100\n    return fena", "properties": {"row": "properties = {\n    \"urine_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"plasma_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Creatinine concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Creatinine concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"plasma_sodium\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"urine_creatinine\": {\n        \"type\": \"array\",\n        \"description\": \"Creatinine concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Creatinine concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"urine_sodium": "urine in mEq/L", "plasma_creatinine": "plasma in mg/dL", "plasma_sodium": "plasma in mEq/L", "urine_creatinine": "urine in mg/dL"}}
{"task_index": 44, "task_description": "calculator name is：LDL Calculated,\nquestion is:What is the patient's LDL cholestrol concentration? Please outuput your answer in terms of mg/dL..", "python_code": "def calculate_ldl(total_cholesterol: float, hdl: float, triglycerides: float) -> float:\n    # Calculate LDL cholesterol concentration using the Friedewald formula\n    ldl = total_cholesterol - hdl - (triglycerides / 5)\n    return ldl", "properties": {"row": "properties = {\n    \"total_cholesterol\": {\n        \"type\": \"array\",\n        \"description\": \"Total cholesterol level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Total cholesterol level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hdl\": {\n        \"type\": \"array\",\n        \"description\": \"High-density lipoprotein cholesterol level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"High-density lipoprotein cholesterol level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"triglycerides\": {\n        \"type\": \"array\",\n        \"description\": \"Triglyceride level\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Triglyceride level\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"total_cholesterol": "mg/dL", "hdl": "mg/dL", "triglycerides": "mg/dL"}}
{"task_index": 56, "task_description": "calculator name is:QTc Fridericia Calculator,\nquestion is:Using the Fridericia Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.", "python_code": "def calculate_qtc_fridericia(qt_interval, heart_rate):\n    # Calculate the RR Interval\n    rr_interval = 60 / heart_rate\n    \n    # Calculate the QTc using the Fridericia formula\n    qtc = qt_interval / (rr_interval ** (1/3))\n    \n    return round(qtc, 2)", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"QT interval as measured\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"QT interval as measured\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "heart_rate": "beats per minute"}}
{"task_index": 57, "task_description": "calculator name is:QTc Framingham Calculator,\nquestion is:Using the Framingham Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.", "python_code": "def calculate_qtc_framingham(qt_interval, heart_rate):\n    # Calculate the RR Interval\n    rr_interval = 60 / heart_rate\n    \n    # Calculate the QTc using the Framingham formula\n    qtc = qt_interval + (154 * (1 - rr_interval))\n    \n    return round(qtc, 3)", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"QT interval as measured\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"QT interval as measured\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "heart_rate": "beats per minute"}}
{"task_index": 58, "task_description": "calculator name is:QTc Hodges Calculator,\nquestion is:Using the Hodges Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.", "python_code": "def calculate_qtc_hodges(qt_interval, heart_rate):\n    # Calculate the RR Interval\n    rr_interval = 60 / heart_rate\n    \n    # Calculate the QTc using the Hodges formula\n    qtc = qt_interval + 1.75 * ((60 / rr_interval) - 60)\n    \n    return round(qtc, 3)", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"QT interval as measured\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"QT interval as measured\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "heart_rate": "beats per minute"}}
{"task_index": 59, "task_description": "calculator name is:QTc Rautaharju Calculator,\nquestion is:Using the Rautaharju Formula for corrected QT interval, what is the patient's corrected QT interval in terms of msec?.", "python_code": "def calculate_qtc_rautaharju(qt_interval, heart_rate):\n    # Calculate the QTc using the Rautaharju formula\n    qtc = qt_interval * ((120 + heart_rate) / 180)\n    \n    return round(qtc, 3)", "properties": {"row": "properties = {\n    \"qt_interval\": {\n        \"type\": \"array\",\n        \"description\": \"QT interval as measured\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"QT interval as measured\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"heart_rate\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's heart rate\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's heart rate\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"qt_interval": "msec", "heart_rate": "beats per minute"}}
{"task_index": 60, "task_description": "calculator name is：Body Surface Area Calculator,\nquestion is:What is the patient's body surface area? Please output your answer in terms of m²..", "python_code": "def calculate_bsa(weight: float, height: float) -> float:\n    # Calculate Body Surface Area (BSA) using the Mosteller formula\n    bsa = (weight * height / 3600) ** 0.5\n    return bsa", "properties": {"row": "properties = {\n    \"weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"weight": "kg", "height": "cm"}}
{"task_index": 62, "task_description": "calculator name is：Adjusted Body Weight,\nquestion is:Using the adjusted body weight formula, what is the patient's adjusted body weight in terms of kg?.", "python_code": "def calculate_abw(actual_weight: float, height: float, gender: str) -> float:\n    # Calculate Ideal Body Weight (IBW)\n    if gender.lower() == 'male':\n        ibw = 50 + 2.3 * (height - 60)\n    else:  # Assuming female if not male\n        ibw = 45.5 + 2.3 * (height - 60)\n\n    # Calculate Adjusted Body Weight (ABW)\n    abw = ibw + (0.4 * (actual_weight - ibw))\n    return abw", "properties": {"row": "properties = {\n    \"actual_weight\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's actual body weight\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's actual body weight\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"gender\": {\n        \"description\": \"Patient's gender, returns 'male' or 'female'\",\n        \"type\": \"string\"\n    }\n}"}, "need_unit": {"actual_weight": "kg", "height": "inches"}}
{"task_index": 63, "task_description": "calculator name is：Delta Gap,\nquestion is:What is the patient's delta gap in mEq/L?.", "python_code": "def calculate_delta_gap(na: float, cl: float, hco3: float) -> float:\n    # Calculate the Anion Gap\n    anion_gap = na - (cl + hco3)\n    \n    # Calculate the Delta Gap\n    delta_gap = anion_gap - 12\n    return delta_gap", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L"}}
{"task_index": 64, "task_description": "calculator name is：Delta Ratio,\nquestion is:What is the patient's delta ratio?.", "python_code": "def calculate_delta_ratio(na: float, cl: float, hco3: float) -> float:\n    # Calculate the Anion Gap\n    anion_gap = na - (cl + hco3)\n    \n    # Calculate Delta AG\n    delta_ag = anion_gap - 12\n    \n    # Calculate Delta HCO3\n    delta_hco3 = 24 - hco3\n    \n    # Calculate Delta Ratio\n    delta_ratio = delta_ag / delta_hco3 if delta_hco3 != 0 else float('inf')  # Avoid division by zero\n    return delta_ratio", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L"}}
{"task_index": 65, "task_description": "calculator name is：Albumin Corrected Anion Gap,\nquestion is:What is the patient's albumin corrected anion gap in mEq/L?.", "python_code": "def calculate_corrected_anion_gap(na: float, cl: float, hco3: float, albumin: float) -> float:\n    # Calculate the Anion Gap\n    anion_gap = na - (cl + hco3)\n    \n    # Calculate the Albumin Corrected Anion Gap\n    corrected_anion_gap = anion_gap + (2.5 * (4 - albumin))\n    return corrected_anion_gap", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Serum albumin concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum albumin concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L", "albumin": "g/dL"}}
{"task_index": 66, "task_description": "calculator name is：Albumin Corrected Delta Gap,\nquestion is:What is the patient's albumin corrected delta gap in mEq/L?.", "python_code": "def calculate_corrected_delta_gap(na: float, cl: float, hco3: float, albumin: float) -> float:\n    # Calculate the Anion Gap\n    anion_gap = na - (cl + hco3)\n    \n    # Calculate Delta AG\n    delta_ag = anion_gap - 12\n    \n    # Calculate the Albumin Corrected Delta Gap\n    corrected_delta_gap = delta_ag + (2.5 * (4 - albumin))\n    return corrected_delta_gap", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Serum albumin concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum albumin concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L", "albumin": "g/dL"}}
{"task_index": 67, "task_description": "calculator name is：Albumin Corrected Delta Ratio,\nquestion is:What is the patient's albumin corrected delta ratio?.", "python_code": "def calculate_corrected_delta_ratio(na: float, cl: float, hco3: float, albumin: float) -> float:\n    # Calculate the Anion Gap\n    anion_gap = na - (cl + hco3)\n    \n    # Calculate Delta AG\n    delta_ag = anion_gap - 12\n    \n    # Calculate Delta HCO3\n    delta_hco3 = 24 - hco3\n    \n    # Calculate the Albumin Corrected Delta Ratio\n    corrected_delta_ratio = (delta_ag + (2.5 * (4 - albumin))) / delta_hco3 if delta_hco3 != 0 else float('inf')  # Avoid division by zero\n    return corrected_delta_ratio", "properties": {"row": "properties = {\n    \"na\": {\n        \"type\": \"array\",\n        \"description\": \"Sodium concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Sodium concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"cl\": {\n        \"type\": \"array\",\n        \"description\": \"Chloride concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Chloride concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"hco3\": {\n        \"type\": \"array\",\n        \"description\": \"Bicarbonate concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Bicarbonate concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"albumin\": {\n        \"type\": \"array\",\n        \"description\": \"Serum albumin concentration\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Serum albumin concentration\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    }\n}"}, "need_unit": {"na": "mEq/L", "cl": "mEq/L", "hco3": "mEq/L", "albumin": "g/dL"}}
{"task_index": 61, "task_description": "calculator name is：Target weight,\nquestion is:Based on the patient's height and target BMI, what is the patient's target weight in kg?.", "python_code": "def calculate_target_weight(height: float, bmi: float) -> float:\n    # Convert height from centimeters to meters\n    height_m = height / 100\n\n    # Calculate target weight based on BMI and height\n    target_weight = bmi * (height_m ** 2)\n    return target_weight", "properties": {"row": "properties = {\n    \"height\": {\n        \"type\": \"array\",\n        \"description\": \"Patient's height\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"number\",\n                    \"description\": \"Patient's height\"\n                },\n                \"unit\": {\n                    \"type\": \"string\",\n                    \"description\": \"exactly unit extracted from EMR.\"\n                }\n            },\n            \"required\": [\n                \"value\",\n                \"unit\"\n            ]\n        }\n    },\n    \"bmi\": {\n        \"description\": \"Target Body Mass Index (dimensionless)\",\n        \"type\": \"number\"\n    }\n}"}, "need_unit": {"height": "centimeters (cm)"}}